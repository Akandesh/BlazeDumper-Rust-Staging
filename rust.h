#pragma once
#include <cstdint>

namespace blazedumper {
    constexpr ::std::ptrdiff_t BaseEntity_TypeInfo = 0x469E2D8;
    constexpr ::std::ptrdiff_t Facepunch_Input_TypeInfo = 0x46D4AE8;
    constexpr ::std::ptrdiff_t MainCamera_TypeInfo = 0x469E000;
    constexpr ::std::ptrdiff_t System_Collections_Generic_List_BaseGameMode_TypeInfo = 0x46AE840;
    constexpr ::std::ptrdiff_t BaseGameMode_TypeInfo = 0x46AC2F0;
    constexpr ::std::ptrdiff_t TOD_Sky_TypeInfo = 0x46D45B0;
    constexpr ::std::ptrdiff_t ConsoleSystem_Index_TypeInfo = 0x468A660;
    constexpr ::std::ptrdiff_t BasePlayer_TypeInfo = 0x469DFD8;
    constexpr ::std::ptrdiff_t OcclusionCulling_TypeInfo = 0x46ABE90;
    constexpr ::std::ptrdiff_t BaseNetworkable_TypeInfo = 0x46AA1A0;
    namespace BasePlayer {
        constexpr ::std::ptrdiff_t _a2cfffb2d4c67c675e0de871ea833fc65b5915e0 = 0x290; // %6d8cf3a8addc14103d92a69f88418ace3b5dd02d
        constexpr ::std::ptrdiff_t _292545c54fb431bb7cbca698310d29d5d7ab42aa = 0x308; // %6d8cf3a8addc14103d92a69f88418ace3b5dd02d
        constexpr ::std::ptrdiff_t _567735f842edec36e49ba400b522fd2b1f1983ac = 0x380; // %6d8cf3a8addc14103d92a69f88418ace3b5dd02d
        constexpr ::std::ptrdiff_t _91fb974b080ae56c4a8926d8ffb9906970ef0b72 = 0x3F8; // %6d8cf3a8addc14103d92a69f88418ace3b5dd02d
        constexpr ::std::ptrdiff_t _b174faed2ede8a7d898b6b9f874e3f5a9682a7bf = 0x470; // %6d8cf3a8addc14103d92a69f88418ace3b5dd02d
        constexpr ::std::ptrdiff_t _8c11cb2d6f7efb874a66ac65c542fa16c6f47a97 = 0x4E8; // %6d8cf3a8addc14103d92a69f88418ace3b5dd02d
        constexpr ::std::ptrdiff_t _18f0913b443cba94dc2f3ad07c8f9a7df02272b4 = 0x560; // %6d8cf3a8addc14103d92a69f88418ace3b5dd02d
        constexpr ::std::ptrdiff_t _47422b611d20ca94af4b72d14f5fafcceeb09039 = 0x5D8; // %6d8cf3a8addc14103d92a69f88418ace3b5dd02d
        constexpr ::std::ptrdiff_t _c5c3107653f7e6f48f4dc9908c5d2bdc47e6cc38 = 0x650; // %6d8cf3a8addc14103d92a69f88418ace3b5dd02d
        constexpr ::std::ptrdiff_t _d6fe984c24523244a331d4fd5fbd41e4e090e1f6 = 0x6C8; // %6d8cf3a8addc14103d92a69f88418ace3b5dd02d
        constexpr ::std::ptrdiff_t _f8dfc110fb66272a60a302a6ed3cf68120dcd657 = 0x740; // %6d8cf3a8addc14103d92a69f88418ace3b5dd02d
        constexpr ::std::ptrdiff_t _e718de788ddd3b697c91eedfa3464be15909b3f9 = 0x7B8; // %6d8cf3a8addc14103d92a69f88418ace3b5dd02d
        constexpr ::std::ptrdiff_t _74c84f63d3df4fdbaef68f05e7e9f5d04ae09bf3 = 0x830; // %6d8cf3a8addc14103d92a69f88418ace3b5dd02d
        constexpr ::std::ptrdiff_t _6a6ea8f5a4ef7f20235b43613886dc444a0ff633 = 0x8A8; // long
        constexpr ::std::ptrdiff_t _2234651eaf9f4195ca74d13d1bede30a902fe809 = 0x8B0; // PlayerModel
        constexpr ::std::ptrdiff_t _466f9ad5989e9e736c56b9d4bf95c869023b20e1 = 0x8B8; // bool
        constexpr ::std::ptrdiff_t _8ccc5b421a4356b49147941f3730d706b817c85d = 0x8B9; // bool
        constexpr ::std::ptrdiff_t _39d74b3e5172bc82d4fd275d0a7277e4352b5a37 = 0x8C0; // PlayerVoiceRecorder
        constexpr ::std::ptrdiff_t _0f75d82e6e7aa5eba5d291d9d0f14954c67f3c3c = 0x8C8; // PlayerVoiceSpeaker
        constexpr ::std::ptrdiff_t _832f6f8fe1cc99d47d5754d62a0181dbb2e54bf4 = 0x8D0; // PlayerInput
        constexpr ::std::ptrdiff_t _eedeecb1872ba9eacae4d131cfdb3ac5bed2cf97 = 0x8D8; // BaseMovement
        constexpr ::std::ptrdiff_t _397a0581a79d92b3563cedbaacbef57f18aea4ae = 0x8E0; // BaseCollision
        constexpr ::std::ptrdiff_t _e0bd1126c0a928b1a927bc62d261ee33874394cc = 0x8E8; // int
        constexpr ::std::ptrdiff_t _ca89c5e81d02226d06cdbd787cf395c88b776f68 = 0x8EC; // int
        constexpr ::std::ptrdiff_t _9d934e390027801692c593356468833ca7296311 = 0x8F0; // uint
        constexpr ::std::ptrdiff_t _520145df59f7d5b48c58203abdb2912c3f72a1cb = 0x8F8; // GameObject
        constexpr ::std::ptrdiff_t _48fe9603c7b23c5e287e82bfd660418fbe8fe207 = 0x900; // BaseEntity
        constexpr ::std::ptrdiff_t _cf6dbe0271fc7d8b5691183b77212f22ebfdb013 = 0x908; // Collider
        constexpr ::std::ptrdiff_t _a010291260725526ee186ba2d2e62af1b098a568 = 0x910; // Vector3
        constexpr ::std::ptrdiff_t _85ece7b2914290e2884e74d5538fd62b5e675402 = 0x91C; // float
        constexpr ::std::ptrdiff_t _37c85246ca68106ed8845507adef38cdf8210cd8 = 0x920; // bool
        constexpr ::std::ptrdiff_t _ef49bcd3097706eb2144db4699729f414cc83120 = 0x921; // bool
        constexpr ::std::ptrdiff_t _0648d6285fab4ecb62a6570ba429b938ee7bc87f = 0x922; // bool
        constexpr ::std::ptrdiff_t _f68aa1368387267ca4d3a40b302bfec314e00e5c = 0x923; // bool
        constexpr ::std::ptrdiff_t _16a38e40dbb4e73636ad01a4fe35c068f8fccc95 = 0x924; // bool
        constexpr ::std::ptrdiff_t _28bf8d1c9afe638a19578d7a43b888f68710a1c5 = 0x925; // bool
        constexpr ::std::ptrdiff_t _8eff6db1d0e5725a0c3118479b459835513c88d6 = 0x928; // uint
        constexpr ::std::ptrdiff_t _59645d1afb9e52765c451a89a4a6e530247c9850 = 0x92C; // TimeSince
        constexpr ::std::ptrdiff_t _75d53b6ababd00aa0ff3a73c6612c9ba2f155660 = 0x930; // BasePlayer.CameraMode
        constexpr ::std::ptrdiff_t _bcd5695cebf09c24624fb5b42c7586a74d87a7e7 = 0x934; // BasePlayer.CameraMode
        constexpr ::std::ptrdiff_t _2be6910b2d67597d6484693181a08ad70328c562 = 0x938; // Vector3
        constexpr ::std::ptrdiff_t _1268ea81a25e467058c084639589652905dc2460 = 0x944; // Vector3
        constexpr ::std::ptrdiff_t _2ecf52d0bc2ac0ae9443c93283757866fe3785ee = 0x950; // bool
        constexpr ::std::ptrdiff_t GestureViewModel = 0x958; // ViewModel
        constexpr ::std::ptrdiff_t _9efcb14a5ad33eb9e393eff3be778019c4cd959f = 0x960; // RespawnInformation
        constexpr ::std::ptrdiff_t _4735f6e586347a7e866a708830d437fb26781e62 = 0x968; // float
        constexpr ::std::ptrdiff_t _d462392a2daf13b29b49f5c5c56db2ff619e6193 = 0x96C; // TimeSince
        constexpr ::std::ptrdiff_t _35585d0166d91ed3826475ac3ec4161235951570 = 0x970; // RealTimeSince
        constexpr ::std::ptrdiff_t _3c8c3da71b19be49ec679edf094c0f7ede01ae78 = 0x974; // float
        constexpr ::std::ptrdiff_t _ff3337351a9267284161e4bb492d09d2555fb4c2 = 0x978; // float
        constexpr ::std::ptrdiff_t _9f159bcbd0955be3705d71286d527463485038df = 0x97C; // float
        constexpr ::std::ptrdiff_t _1c7e2e2dfdb3c0872b2e091c6505ae1377703ec1 = 0x980; // %6af134ffbd68e4c9800742bef6bc0040ada4afaa
        constexpr ::std::ptrdiff_t _87a3a440391d58727331ec1f5d1f9b7d51901fd0 = 0x988; // Vector3
        constexpr ::std::ptrdiff_t _01a0f37ec8533629de001099e5b72783d582f7eb = 0x994; // bool
        constexpr ::std::ptrdiff_t _a04535fad60b9bfccf604d69b715231213e9f614 = 0x9A0; // Queue<string>
        constexpr ::std::ptrdiff_t gestureList = 0x9A8; // GestureCollection
        constexpr ::std::ptrdiff_t _a4a88d3163b107567bffa53c106f28cb8aa26c64 = 0x9B0; // TimeUntil
        constexpr ::std::ptrdiff_t _1bd2a6718fba6a19b0b967e5fe21217b565bd884 = 0x9B4; // TimeSince
        constexpr ::std::ptrdiff_t _f5f489cbecd2e88f269bc8e9328ffaebc08d39b6 = 0x9B8; // GestureConfig
        constexpr ::std::ptrdiff_t _b7598feb13bb1a2d5955c5f2f143bc82dfd9348d = 0x9C0; // HeldEntity
        constexpr ::std::ptrdiff_t _348b6770bb19dc208092423980f7289da8150b08 = 0x9C8; // float
        constexpr ::std::ptrdiff_t _1933d41e52bc15cebfaf6ae1dcae2d7c759ba208 = 0x9CC; // float
        constexpr ::std::ptrdiff_t currentTeam = 0x9D0; // ulong
        constexpr ::std::ptrdiff_t _17950e779bcc3c591a9b9b671803bf1204f1975b = 0x9D8; // PlayerTeam
        constexpr ::std::ptrdiff_t _57eded5694959459932c806e804cd9dea0ea429f = 0x9E0; // ListHashSet<ulong>
        constexpr ::std::ptrdiff_t _80c5b553b5da8b6da1562227851aa96228c495c1 = 0x9E8; // float
        constexpr ::std::ptrdiff_t _d1eac569cdf32b1034cc0dc4b473065141f0384d = 0x9F0; // ulong
        constexpr ::std::ptrdiff_t _44bb22b732180b1b549346746eca4003cb7226a2 = 0x9F8; // int
        constexpr ::std::ptrdiff_t _4c567423d258dd4ccab0bbc87170e78121c2200b = 0xA00; // string
        constexpr ::std::ptrdiff_t _3595428f27cf3ad920dbc6c8a2282b2aa389ca03 = 0xA08; // string
        constexpr ::std::ptrdiff_t _3350c3be6e5728f225f4f964d91303eda38169ce = 0xA18; // List<MapNote>
        constexpr ::std::ptrdiff_t _daf5133d6e23c3a540729e2c40b71fbe41643661 = 0xA20; // MapNote
        constexpr ::std::ptrdiff_t _04621a6c839e5fdbd043870aace33ab3519f9fe9 = 0xA28; // bool
        constexpr ::std::ptrdiff_t missions = 0xA30; // List<BaseMission.%d29696efe08d8f881c7852afb25aa9054c1de445>
        constexpr ::std::ptrdiff_t _85b18a52ee6fda797f4521fb81f0b1d90bfa85fc = 0xA38; // int
        constexpr ::std::ptrdiff_t _47206ec716ad0528afe6fcd83c91bc058d194000 = 0xA40; // ModelState
        constexpr ::std::ptrdiff_t _2719bc2445279350c40d5d5c23cef208b2630533 = 0xA48; // %ad5776c9de79bfabb374476a9309ebaa2905d9a6
        constexpr ::std::ptrdiff_t _dc3c5b1d75e1f53ada495fb271e7efcd5cf83ea2 = 0xA58; // float
        constexpr ::std::ptrdiff_t _0d46f5af3d0d7fddd579588749808398521f4bd2 = 0xA5C; // bool
        constexpr ::std::ptrdiff_t PetEntity = 0xA60; // BaseEntity
        constexpr ::std::ptrdiff_t _6e46fd7807c031bdacd214834e4f969afc5f7f40 = 0xA68; // float
        constexpr ::std::ptrdiff_t _e3451ada1ddc14125a017d3664e95fc3216ba98b = 0xA6C; // uint
        constexpr ::std::ptrdiff_t _15879b3688d4902fc2fb17e72dbe2f8a2ebd039c = 0xA70; // NetworkableId
        constexpr ::std::ptrdiff_t _8823ada8ca2f1895b48260b47a119e6b2ce214c6 = 0xA78; // List<MapNote>
        constexpr ::std::ptrdiff_t _21066efc19b3130217e2d2da7f5454a7ad193c19 = 0xA80; // bool
        constexpr ::std::ptrdiff_t _9c4a97dd49d91663bb435ed5876363716cdff50f = 0xA84; // TimeSince
        constexpr ::std::ptrdiff_t _2290917a0435e80c89571b367f436cb43a7a29de = 0xA88; // float
        constexpr ::std::ptrdiff_t _27647fd5b358840b9b49e6ede9c001fb3eb10875 = 0xA90; // BuildingPrivlidge
        constexpr ::std::ptrdiff_t _0ef3973e5dff91486bf72f4715b4f6d8473b124c = 0xA98; // float
        constexpr ::std::ptrdiff_t _bbc8af85a159173c6562e4ea25443ef9e7fea066 = 0xA9C; // bool
        constexpr ::std::ptrdiff_t _6c694eaa5dbaa369c8db922fd5de0cd9f6c3bde1 = 0xAA0; // float
        constexpr ::std::ptrdiff_t _197b6933b0f2f02856ebec35eb7aaccc819beef5 = 0xAA4; // bool
        constexpr ::std::ptrdiff_t _688d1fb481c441da106e23775bc25d7926ecf02d = 0xAA8; // BaseEntity
        constexpr ::std::ptrdiff_t _df5b2169899e496b7741e7f8a76a2ec411199745 = 0xAB0; // float
        constexpr ::std::ptrdiff_t _9af137576fb8e8b0ccf6360b1b401e20d4f1ab08 = 0xAB4; // int
        constexpr ::std::ptrdiff_t _a690f94298aa68aeeea78d4af5a668b78c45d868 = 0xAB8; // TimeSince
        constexpr ::std::ptrdiff_t _e777f0a884e972dcfaeecea8a542ed068947bf05 = 0xABC; // float
        constexpr ::std::ptrdiff_t _804bb8a2890d7f7a20d1d05caf541b1699706f4b = 0xAC0; // float
        constexpr ::std::ptrdiff_t _31308e538a0cedd125ccfb87cfa31bc075ad9e24 = 0xAC8; // Stopwatch
        constexpr ::std::ptrdiff_t _11f2fc96c1914953c990de19307211ae7dab0011 = 0xAD0; // PlayerTick
        constexpr ::std::ptrdiff_t _329a8a98c253ab1276c2664ee01076daee065d8d = 0xAD8; // BasePlayer.TutorialItemAllowance
        constexpr ::std::ptrdiff_t _cd1f6bb794f00d568b2fbebccbfa09b0b945ee4b = 0xADC; // float
        constexpr ::std::ptrdiff_t _28527ca9e0e87c5c9ed2febc05eaa15f4a84b0d0 = 0xAE0; // float
        constexpr ::std::ptrdiff_t _b02bb9c34972bf9d785d34418df290f0b99e8ddd = 0xAE4; // float
        constexpr ::std::ptrdiff_t _7926e1b8141a088dec76f45e58ded8164fd01cfa = 0xAE8; // bool
        constexpr ::std::ptrdiff_t fallDamageEffect = 0xAF0; // GameObjectRef
        constexpr ::std::ptrdiff_t drownEffect = 0xAF8; // GameObjectRef
        constexpr ::std::ptrdiff_t playerFlags = 0xB00; // BasePlayer.PlayerFlags
        constexpr ::std::ptrdiff_t _4137885ff23fde3f0d837e07f4acff6e6e662bd1 = 0xB08; // %07e9ef770185b8ad56f02e2732c8583d0363f11a<PlayerEyes>
        constexpr ::std::ptrdiff_t _bdfbcab4cf0bf4eb14da7e10c52abbb9bb210dcb = 0xB10; // %07e9ef770185b8ad56f02e2732c8583d0363f11a<PlayerInventory>
        constexpr ::std::ptrdiff_t _e28365e8ab967bc238da74ff36aa6a0d4f8a6eff = 0xB18; // PlayerBlueprints
        constexpr ::std::ptrdiff_t _cc3dbf177b6872a76c45445efdae77f846f91420 = 0xB20; // PlayerMetabolism
        constexpr ::std::ptrdiff_t _437b8ec9ee6695c54422534e0e86d35372489fbf = 0xB28; // PlayerModifiers
        constexpr ::std::ptrdiff_t _ee2e13a68c8883031bb2f886ccb1972219a4eeca = 0xB30; // %07e9ef770185b8ad56f02e2732c8583d0363f11a<CapsuleCollider>
        constexpr ::std::ptrdiff_t _b4ad95e73938cf43f742cc7300bca66fd2be9367 = 0xB38; // %e18719ef9df4bbecb1f611364c918c690d954162
        constexpr ::std::ptrdiff_t _c43df4a2c4ad5f85775ababfa246ec73e3c47e7a = 0xB40; // Rigidbody
        constexpr ::std::ptrdiff_t _bc66d9a8e5183bc97b34debfe0c3a76d85831403 = 0xB50; // string
        constexpr ::std::ptrdiff_t _b468cddd8fa156cac7b2569f20e0a01a23024e3a = 0xB58; // int
        constexpr ::std::ptrdiff_t _934b4586ffb4ed8ced34397369b403138f8035ac = 0xB5C; // int
        constexpr ::std::ptrdiff_t _f6b1bf168e8249a3487b88c8a26c8fa1691a1ace = 0xB60; // string
        constexpr ::std::ptrdiff_t _7c02b5d52d1cd06000e867515569a2c0ccc8617b = 0xB68; // string
        constexpr ::std::ptrdiff_t _473bdb19fbf8117e5d62524ecfcaaa49ba9a0a6e = 0xB70; // BasePlayer.CapsuleColliderInfo
        constexpr ::std::ptrdiff_t _fb75b1caff7a639b1cc45bc04a1174efbb13e61a = 0xB84; // BasePlayer.CapsuleColliderInfo
        constexpr ::std::ptrdiff_t _4602a08923e3343c47aaf1061b865b32888b7b1e = 0xB98; // BasePlayer.CapsuleColliderInfo
        constexpr ::std::ptrdiff_t _d313a4b381230753df1e730179b8c9f574c5effa = 0xBAC; // BasePlayer.CapsuleColliderInfo
        constexpr ::std::ptrdiff_t _ed6b36204f406c1962ff3bf1b93a9865a4b705e1 = 0xBC0; // ProtectionProperties
        constexpr ::std::ptrdiff_t _be6b6cbe6630d7d0d0dd0b19562593b57b0ebe02 = 0xBC8; // float
        constexpr ::std::ptrdiff_t _f181a77c6ce95fd300602a6f848617fd7b72db81 = 0xBCC; // float
        constexpr ::std::ptrdiff_t weaponMoveSpeedScale = 0xBD0; // float
        constexpr ::std::ptrdiff_t clothingBlocksAiming = 0xBD4; // bool
        constexpr ::std::ptrdiff_t clothingMoveSpeedReduction = 0xBD8; // float
        constexpr ::std::ptrdiff_t clothingWaterSpeedBonus = 0xBDC; // float
        constexpr ::std::ptrdiff_t clothingAccuracyBonus = 0xBE0; // float
        constexpr ::std::ptrdiff_t equippingBlocked = 0xBE4; // bool
        constexpr ::std::ptrdiff_t eggVision = 0xBE8; // float
        constexpr ::std::ptrdiff_t _ac20f8c0cd6a9e150f5d100286e6938d0460dc30 = 0xBF0; // PhoneController
        constexpr ::std::ptrdiff_t designingAIEntity = 0xBF8; // BaseEntity
    } // namespace BasePlayer
    namespace BaseEntity {
        constexpr ::std::ptrdiff_t _078fc24cd9b43488a28e376c4b8bdd8a2e8916aa = 0x80; // Ragdoll
        constexpr ::std::ptrdiff_t _6ca57d4fb041f852ea3a1143a200e0e61ff754a4 = 0x88; // %0cdfa01e85aa7d3c21ec0cf820144eef8bc54b10
        constexpr ::std::ptrdiff_t _4e42d5fbf2e10ff0a952de9d02993f71087ccc05 = 0x90; // float
        constexpr ::std::ptrdiff_t _ce477e9a2351bae81be7604162749d4d757aa760 = 0x98; // List<%6d8cf3a8addc14103d92a69f88418ace3b5dd02d>
        constexpr ::std::ptrdiff_t bounds = 0xA0; // Bounds
        constexpr ::std::ptrdiff_t impactEffect = 0xB8; // GameObjectRef
        constexpr ::std::ptrdiff_t enableSaving = 0xC0; // bool
        constexpr ::std::ptrdiff_t syncPosition = 0xC1; // bool
        constexpr ::std::ptrdiff_t model = 0xC8; // Model
        constexpr ::std::ptrdiff_t flags = 0xD0; // BaseEntity.Flags
        constexpr ::std::ptrdiff_t _ee2e657c50a196cdecb6eed0e2c1c8162db5fac0 = 0xD4; // uint
        constexpr ::std::ptrdiff_t _20d5914b84708b5cc47a3abd0cab2db1fbec12de = 0xD8; // ulong
        constexpr ::std::ptrdiff_t _4dd68b9f5347735382c53be5cc6b5f808d3a384d = 0xE0; // EntityComponentBase[]
        constexpr ::std::ptrdiff_t HasBrain = 0xE8; // bool
        constexpr ::std::ptrdiff_t _4dfce3f786455069b996724df1432d2044bd4db6 = 0xF0; // string
        constexpr ::std::ptrdiff_t _0a82f65065239ee8eede14359eec0c18ece63bc8 = 0xF8; // ulong
        constexpr ::std::ptrdiff_t _b303b5cf02099499afa05eea9e73b340d9d679b8 = 0x100; // uint
        constexpr ::std::ptrdiff_t _874fcad5c7274b9a326b1650e4f2ee7c8d2cf53a = 0x108; // List<%ee9a54c921734019de972e7b08dc56424ac20ab9>
        constexpr ::std::ptrdiff_t _5626f4980db0b01bc2b9ed6b1367f283b6464b50 = 0x110; // bool
        constexpr ::std::ptrdiff_t _74b7b172749e9f362936c1b84a106849e987ec2b = 0x118; // List<BaseEntity.%2490e77aba3fbde35d09de199bf827a6edf6d6b0>
        constexpr ::std::ptrdiff_t _a09a9af4c633370addf34c08f9ef54d34f81fb6d = 0x120; // Action
        constexpr ::std::ptrdiff_t _290c1f757b77185a37010a9310a643315c0e1f15 = 0x128; // BaseEntity
        constexpr ::std::ptrdiff_t _04e7aa1920f96964340bd34dec3560898915586c = 0x130; // ItemSkin
        constexpr ::std::ptrdiff_t _5bc64985790e32c91f1a6a20e9901e69cc0be9ba = 0x138; // Action
        constexpr ::std::ptrdiff_t _75c68028037d49e89d586847d83979c15c698562 = 0x140; // Action
        constexpr ::std::ptrdiff_t _70215d4188a40d1c7d661a38b440b2ce94ec2aa9 = 0x148; // %ad5776c9de79bfabb374476a9309ebaa2905d9a6[]
        constexpr ::std::ptrdiff_t _0263f8833fd911e7797e1e903838894336463a53 = 0x150; // List<TriggerBase>
        constexpr ::std::ptrdiff_t _51b047524f1797fd08a3da10ac0fc09029803efc = 0x158; // bool
        constexpr ::std::ptrdiff_t _6039aecdfcdb5a523b718b93005c02a063703932 = 0x159; // bool
        constexpr ::std::ptrdiff_t _cb9bc2bc3b2f201fd9f303dec235e25a7aa6f750 = 0x15A; // bool
        constexpr ::std::ptrdiff_t _e452cc207c809d949a37a9912ebd82ff6d1670b9 = 0x160; // %834582bd7133ddba4cd8312810178b26fbbed1f7
        constexpr ::std::ptrdiff_t _ab0376a73755bbdcfdf35b9756273f1c087f83b4 = 0x180; // float
    } // namespace BaseEntity
    namespace BaseCombatEntity {
        constexpr ::std::ptrdiff_t _6fbb8075b49238b757fd2c5d2089e57f0ef0db60 = 0x188; // %6d8cf3a8addc14103d92a69f88418ace3b5dd02d
        constexpr ::std::ptrdiff_t skeletonProperties = 0x200; // SkeletonProperties
        constexpr ::std::ptrdiff_t baseProtection = 0x208; // ProtectionProperties
        constexpr ::std::ptrdiff_t startHealth = 0x210; // float
        constexpr ::std::ptrdiff_t pickup = 0x218; // BaseCombatEntity.Pickup
        constexpr ::std::ptrdiff_t repair = 0x240; // BaseCombatEntity.Repair
        constexpr ::std::ptrdiff_t ShowHealthInfo = 0x270; // bool
        constexpr ::std::ptrdiff_t lifestate = 0x274; // BaseCombatEntity.LifeState
        constexpr ::std::ptrdiff_t sendsHitNotification = 0x278; // bool
        constexpr ::std::ptrdiff_t sendsMeleeHitNotification = 0x279; // bool
        constexpr ::std::ptrdiff_t markAttackerHostile = 0x27A; // bool
        constexpr ::std::ptrdiff_t _2cbd30f1f46e9d49ca1c63424a6ab7bc1192afde = 0x27C; // float
        constexpr ::std::ptrdiff_t _176865a3bb4045c8d8a003dfcb65c82d4da60b0a = 0x280; // float
        constexpr ::std::ptrdiff_t faction = 0x284; // BaseCombatEntity.Faction
        constexpr ::std::ptrdiff_t _859c987dc482c4391fcfa9665f5a74eab88f1b66 = 0x288; // float
        constexpr ::std::ptrdiff_t _1eb988bf70a8a522e4112bd27f592f090406c0ee = 0x28C; // int
    } // namespace BaseCombatEntity
    namespace BuildingPrivlidge {
        constexpr ::std::ptrdiff_t _e3ae128ea543d2c3323b34700f0c394b0ec27384 = 0x4A0; // %6d8cf3a8addc14103d92a69f88418ace3b5dd02d
        constexpr ::std::ptrdiff_t _8f0de6280c5272eeb8ebdf779c359933f914d99e = 0x518; // %6d8cf3a8addc14103d92a69f88418ace3b5dd02d
        constexpr ::std::ptrdiff_t _c72cd28f44034f3bb8215929bac19be709e2a1ec = 0x590; // %6d8cf3a8addc14103d92a69f88418ace3b5dd02d
        constexpr ::std::ptrdiff_t _086eb6793d4ff4cec1838053294e2576aebe6057 = 0x608; // %6d8cf3a8addc14103d92a69f88418ace3b5dd02d
        constexpr ::std::ptrdiff_t _d1a398f7b272372f64f9af91a2302e8dec838578 = 0x680; // %6d8cf3a8addc14103d92a69f88418ace3b5dd02d
        constexpr ::std::ptrdiff_t _bc218baf5f55199316228d6334997d5c8ac5a1bf = 0x6F8; // %6d8cf3a8addc14103d92a69f88418ace3b5dd02d
        constexpr ::std::ptrdiff_t assignDialog = 0x770; // GameObject
        constexpr ::std::ptrdiff_t _df7913c11d2afb84cb8691daa27ddef543dc49f6 = 0x778; // HashSet<PlayerNameID>
        constexpr ::std::ptrdiff_t allowedConstructionItems = 0x780; // List<ItemDefinition>
        constexpr ::std::ptrdiff_t _148e65746b78caa63d8918da87b6f28ff637cf63 = 0x788; // float
        constexpr ::std::ptrdiff_t _ddf2030846e9a8c669bafe554119681e3ddd1afb = 0x78C; // float
        constexpr ::std::ptrdiff_t _37439a13f01cdfdb82edbaf0ef3fb043bf431c50 = 0x790; // float
        constexpr ::std::ptrdiff_t _79aa6c2ac1315ff214786cda35fb23fd86baf2f2 = 0x794; // bool
        constexpr ::std::ptrdiff_t _c5f02c39875ceee7a59060172bef1c7b009daf23 = 0x795; // bool
        constexpr ::std::ptrdiff_t _4d4e3c3413a9149ae61f8c39c98119ecf89a4861 = 0x798; // DateTime
    } // namespace BuildingPrivlidge
    namespace BaseProjectile {
        constexpr ::std::ptrdiff_t NoiseRadius = 0x2A0; // float
        constexpr ::std::ptrdiff_t damageScale = 0x2A4; // float
        constexpr ::std::ptrdiff_t distanceScale = 0x2A8; // float
        constexpr ::std::ptrdiff_t projectileVelocityScale = 0x2AC; // float
        constexpr ::std::ptrdiff_t automatic = 0x2B0; // bool
        constexpr ::std::ptrdiff_t usableByTurret = 0x2B1; // bool
        constexpr ::std::ptrdiff_t turretDamageScale = 0x2B4; // float
        constexpr ::std::ptrdiff_t attackFX = 0x2B8; // GameObjectRef
        constexpr ::std::ptrdiff_t silencedAttack = 0x2C0; // GameObjectRef
        constexpr ::std::ptrdiff_t muzzleBrakeAttack = 0x2C8; // GameObjectRef
        constexpr ::std::ptrdiff_t fireModeSound = 0x2D0; // SoundDefinition
        constexpr ::std::ptrdiff_t MuzzlePoint = 0x2D8; // Transform
        constexpr ::std::ptrdiff_t reloadTime = 0x2E0; // float
        constexpr ::std::ptrdiff_t canUnloadAmmo = 0x2E4; // bool
        constexpr ::std::ptrdiff_t primaryMagazine = 0x2E8; // BaseProjectile.Magazine
        constexpr ::std::ptrdiff_t fractionalReload = 0x2F0; // bool
        constexpr ::std::ptrdiff_t reloadStartDuration = 0x2F4; // float
        constexpr ::std::ptrdiff_t reloadFractionDuration = 0x2F8; // float
        constexpr ::std::ptrdiff_t reloadEndDuration = 0x2FC; // float
        constexpr ::std::ptrdiff_t aimSway = 0x300; // float
        constexpr ::std::ptrdiff_t aimSwaySpeed = 0x304; // float
        constexpr ::std::ptrdiff_t recoil = 0x308; // RecoilProperties
        constexpr ::std::ptrdiff_t aimconeCurve = 0x310; // AnimationCurve
        constexpr ::std::ptrdiff_t aimCone = 0x318; // float
        constexpr ::std::ptrdiff_t hipAimCone = 0x31C; // float
        constexpr ::std::ptrdiff_t aimconePenaltyPerShot = 0x320; // float
        constexpr ::std::ptrdiff_t aimConePenaltyMax = 0x324; // float
        constexpr ::std::ptrdiff_t aimconePenaltyRecoverTime = 0x328; // float
        constexpr ::std::ptrdiff_t aimconePenaltyRecoverDelay = 0x32C; // float
        constexpr ::std::ptrdiff_t stancePenaltyScale = 0x330; // float
        constexpr ::std::ptrdiff_t hasADS = 0x334; // bool
        constexpr ::std::ptrdiff_t noAimingWhileCycling = 0x335; // bool
        constexpr ::std::ptrdiff_t manualCycle = 0x336; // bool
        constexpr ::std::ptrdiff_t _f11454f09c8761a97607a2e1fee8e21054c35283 = 0x337; // bool
        constexpr ::std::ptrdiff_t _b6d634e0ca22e65d4619a9ece01c0b13f417073c = 0x338; // bool
        constexpr ::std::ptrdiff_t _e83312d8a39a7cf96cd318ac0713e7b600e528ee = 0x339; // bool
        constexpr ::std::ptrdiff_t useEmptyAmmoState = 0x33A; // bool
        constexpr ::std::ptrdiff_t isBurstWeapon = 0x33B; // bool
        constexpr ::std::ptrdiff_t canChangeFireModes = 0x33C; // bool
        constexpr ::std::ptrdiff_t defaultOn = 0x33D; // bool
        constexpr ::std::ptrdiff_t internalBurstRecoilScale = 0x340; // float
        constexpr ::std::ptrdiff_t internalBurstFireRateScale = 0x344; // float
        constexpr ::std::ptrdiff_t internalBurstAimConeScale = 0x348; // float
        constexpr ::std::ptrdiff_t resetDuration = 0x34C; // float
        constexpr ::std::ptrdiff_t numShotsFired = 0x350; // int
        constexpr ::std::ptrdiff_t _8a8cce2e73d6f66fee5a050101128d18d7344975 = 0x35C; // float
        constexpr ::std::ptrdiff_t _71b1227ca82ad3ca3d5d9623db5028e2c930119a = 0x360; // float
        constexpr ::std::ptrdiff_t _e3a7160b7b4edd2a5eca6b8092649b72b3c294bc = 0x364; // uint
        constexpr ::std::ptrdiff_t _e1c03aa234e1fa1a518fd2e023fa3dec996ea569 = 0x368; // float
        constexpr ::std::ptrdiff_t _2dfbcb25ac0cd5013ff536cb750a10002a862e15 = 0x36C; // float
        constexpr ::std::ptrdiff_t _370afff4d1e5d81536d1c07c5644c676603aa06f = 0x370; // float
        constexpr ::std::ptrdiff_t _2b063f7e8d23801ae5404ab6314c797462f93420 = 0x374; // float
        constexpr ::std::ptrdiff_t _f3b6550290fc0031e48a89a7e9aba39e39b1dc57 = 0x378; // bool
        constexpr ::std::ptrdiff_t _9232e711bc0ec9c4a7ea8bcd3c585bee9a148adb = 0x37C; // TimeSince
        constexpr ::std::ptrdiff_t _fe66d77d3ca8a95219029c32a1b7d4d50bce3c94 = 0x380; // float
        constexpr ::std::ptrdiff_t _5961a41d114bb1c729a755eb3ac9cdf31568384e = 0x388; // float
        constexpr ::std::ptrdiff_t _eb4f159a412890add0117b33a8dc9e9e72a9a504 = 0x390; // ItemDefinition
        constexpr ::std::ptrdiff_t _0bf080bd3b190df342852977dc5df1c3cd6c94d7 = 0x398; // int
        constexpr ::std::ptrdiff_t _d0cad581438bff0b72d8bb1c8260596d87479ca9 = 0x39C; // int
        constexpr ::std::ptrdiff_t _9eb20a599437dc9fddb7841ed475eda683e4320d = 0x3A0; // int
        constexpr ::std::ptrdiff_t _5ade7821cbf4363a996d67b35aa697e12d7b855f = 0x3A4; // bool
        constexpr ::std::ptrdiff_t _92783f1506bee5585494321b54a21e49a552a61d = 0x3A8; // float
        constexpr ::std::ptrdiff_t _aba01d5a27fdcd938bf3760e8754e464b916253e = 0x3AC; // bool
    } // namespace BaseProjectile
    namespace Magazine {
        constexpr ::std::ptrdiff_t capacity = 0x18; // int
        constexpr ::std::ptrdiff_t contents = 0x1C; // int
        constexpr ::std::ptrdiff_t ammoType = 0x20; // ItemDefinition
        constexpr ::std::ptrdiff_t allowPlayerReloading = 0x28; // bool
        constexpr ::std::ptrdiff_t allowAmmoSwitching = 0x29; // bool
    } // namespace Magazine
    namespace PlayerInventory {
        constexpr ::std::ptrdiff_t _97daee21ba67e117873952f813b4ce64f73b5139 = 0x28; // %e1783dc5b0b97891683b11118d7365b8907d9184
        constexpr ::std::ptrdiff_t _3e94a9eaed37c996dd3f7ed29be3501907edc0f8 = 0x30; // %e1783dc5b0b97891683b11118d7365b8907d9184
        constexpr ::std::ptrdiff_t _d9038987111574d603147d7dcb4857bad2f859fb = 0x38; // %e1783dc5b0b97891683b11118d7365b8907d9184
        constexpr ::std::ptrdiff_t crafting = 0x40; // ItemCrafter
        constexpr ::std::ptrdiff_t loot = 0x48; // PlayerLoot
        constexpr ::std::ptrdiff_t _d6525987a45d62e43221b233a3bc0cb1ac89cb62 = 0x50; // List<ItemIcon>
        constexpr ::std::ptrdiff_t _89360a1fc9bccad6b18a35c57621d7a28c9d8ee6 = 0x58; // PlayerInventory.%1eb5842eb20be11c296ee4bcef4a3de6c7d8f235
        constexpr ::std::ptrdiff_t _244e5129747c5a35a7cc744ca14b604494e4ddcb = 0x68; // List<%1ea346df49d86f99e6b41cb0049aba26f3b54024>
    } // namespace PlayerInventory
    namespace PlayerModel {
        constexpr ::std::ptrdiff_t collision = 0x20; // BoxCollider
        constexpr ::std::ptrdiff_t censorshipCube = 0x28; // GameObject
        constexpr ::std::ptrdiff_t censorshipCubeBreasts = 0x30; // GameObject
        constexpr ::std::ptrdiff_t jawBone = 0x38; // GameObject
        constexpr ::std::ptrdiff_t neckBone = 0x40; // GameObject
        constexpr ::std::ptrdiff_t headBone = 0x48; // GameObject
        constexpr ::std::ptrdiff_t eyeController = 0x50; // EyeController
        constexpr ::std::ptrdiff_t blinkController = 0x58; // EyeBlink
        constexpr ::std::ptrdiff_t SpineBones = 0x60; // Transform[]
        constexpr ::std::ptrdiff_t leftFootBone = 0x68; // Transform
        constexpr ::std::ptrdiff_t rightFootBone = 0x70; // Transform
        constexpr ::std::ptrdiff_t leftHandPropBone = 0x78; // Transform
        constexpr ::std::ptrdiff_t rightHandPropBone = 0x80; // Transform
        constexpr ::std::ptrdiff_t rightHandTarget = 0x88; // Vector3
        constexpr ::std::ptrdiff_t isPreview = 0x94; // bool
        constexpr ::std::ptrdiff_t leftHandTargetPosition = 0x98; // Vector3
        constexpr ::std::ptrdiff_t leftHandTargetRotation = 0xA4; // Quaternion
        constexpr ::std::ptrdiff_t rightHandTargetPosition = 0xB4; // Vector3
        constexpr ::std::ptrdiff_t rightHandTargetRotation = 0xC0; // Quaternion
        constexpr ::std::ptrdiff_t steeringTargetDegrees = 0xD0; // float
        constexpr ::std::ptrdiff_t rightFootTargetPosition = 0xD4; // Vector3
        constexpr ::std::ptrdiff_t rightFootTargetRotation = 0xE0; // Quaternion
        constexpr ::std::ptrdiff_t leftFootTargetPosition = 0xF0; // Vector3
        constexpr ::std::ptrdiff_t leftFootTargetRotation = 0xFC; // Quaternion
        constexpr ::std::ptrdiff_t CinematicAnimationController = 0x110; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t DefaultAvatar = 0x118; // Avatar
        constexpr ::std::ptrdiff_t CinematicAvatar = 0x120; // Avatar
        constexpr ::std::ptrdiff_t DefaultHoldType = 0x128; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t SleepGesture = 0x130; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t CrawlToIncapacitatedGesture = 0x138; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t CrawlToIncapacitatedGestureHandcuff = 0x140; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t StandToIncapacitatedGesture = 0x148; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t _07014b38cbda5ce5538fd1c46a6590da6ada42ad = 0x150; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t MaleSkin = 0x158; // SkinSetCollection
        constexpr ::std::ptrdiff_t FemaleSkin = 0x160; // SkinSetCollection
        constexpr ::std::ptrdiff_t subsurfaceProfile = 0x168; // SubsurfaceProfile
        constexpr ::std::ptrdiff_t voiceVolume = 0x170; // float
        constexpr ::std::ptrdiff_t skinColor = 0x174; // float
        constexpr ::std::ptrdiff_t skinNumber = 0x178; // float
        constexpr ::std::ptrdiff_t meshNumber = 0x17C; // float
        constexpr ::std::ptrdiff_t hairNumber = 0x180; // float
        constexpr ::std::ptrdiff_t skinType = 0x184; // int
        constexpr ::std::ptrdiff_t movementSounds = 0x188; // MovementSounds
        constexpr ::std::ptrdiff_t showSash = 0x190; // bool
        constexpr ::std::ptrdiff_t tempPoseType = 0x194; // int
        constexpr ::std::ptrdiff_t underwearSkin = 0x198; // uint
        constexpr ::std::ptrdiff_t _34a400901fec19fb2ee7e63b5e1b6cc4aafa7dba = 0x1A0; // ulong
        constexpr ::std::ptrdiff_t _88f65c1545e685638f8c0b7fa70aba67197df561 = 0x1A8; // Quaternion
        constexpr ::std::ptrdiff_t _837e18291d32583ede3f6f12085d9c181086ff15 = 0x1B8; // Quaternion
        constexpr ::std::ptrdiff_t _47206ec716ad0528afe6fcd83c91bc058d194000 = 0x1C8; // ModelState
        constexpr ::std::ptrdiff_t _384fce2fe606bf1110444d3e8248926fba98676c = 0x1D0; // Vector3
        constexpr ::std::ptrdiff_t _761f3e639932ba1190b012d1c07b34c4375dab7a = 0x1DC; // Vector3
        constexpr ::std::ptrdiff_t _a3411e40eb4d5382a3db784f530a773aad57e8fd = 0x1E8; // Vector3
        constexpr ::std::ptrdiff_t _59a4a451673a55bb0b6970a5e7535a36025326d3 = 0x1F4; // Vector3
        constexpr ::std::ptrdiff_t _4ebd4f1146841edc0ca45afac82ff8b3515e5f72 = 0x200; // Quaternion
        constexpr ::std::ptrdiff_t _d9d4f50313f3954cda8780597a806ec341e1600f = 0x210; // Quaternion
        constexpr ::std::ptrdiff_t _6f767cb9c9446e55cb51c0845667181038aad5e1 = 0x220; // float
        constexpr ::std::ptrdiff_t _120c41f60d54155c319373187930f46fb2e689f4 = 0x224; // Vector3
        constexpr ::std::ptrdiff_t _c3d54437a2164ffa72c7a68012570c27f46801ec = 0x230; // Vector3
        constexpr ::std::ptrdiff_t _379ec812b47de5e00d481bf1aa6f5ad09c698dca = 0x23C; // bool
        constexpr ::std::ptrdiff_t _c15b9f3d7c01961b4e8017cc1dc82b42ab27394b = 0x23D; // bool
        constexpr ::std::ptrdiff_t _c43ee242fea08116673f3dd21b8f6cefad61508d = 0x240; // uint
        constexpr ::std::ptrdiff_t _d59f5141a11ccad88672b1a2652cc073bf61ee39 = 0x244; // bool
        constexpr ::std::ptrdiff_t _028423b1b004836eec806a6e818a50947abdab6b = 0x248; // PlayerNameTag
        constexpr ::std::ptrdiff_t _77c765333102e7a398b88f8db0f36284bc725ce7 = 0x250; // bool
        constexpr ::std::ptrdiff_t _4172b0e3160f35211125ad35949638fe79725274 = 0x251; // bool
        constexpr ::std::ptrdiff_t _82a1d3a9e7aaa45ca17b9a79a3b0ad98d6472c3d = 0x258; // SoundDefinition
        constexpr ::std::ptrdiff_t _b0971312b34fd079d5e421a87b5f180f1de7e7cb = 0x260; // SoundDefinition
        constexpr ::std::ptrdiff_t _9dabd02506780c9b7d4a1c37d0ccb97648561ba5 = 0x268; // bool
        constexpr ::std::ptrdiff_t _3ec2deb745f39fd6c9dc82f6f40e52e2a494b1db = 0x270; // GestureConfig
        constexpr ::std::ptrdiff_t _fb9721f16971d227310aa490c5edfba304c24f36 = 0x278; // bool
        constexpr ::std::ptrdiff_t _c1988a6964641e40a6ecf1cf47b922cbd44a8866 = 0x280; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t _64c1c1114966d84578a3e0eb8840fd55dfedf419 = 0x288; // SkinnedMultiMesh
        constexpr ::std::ptrdiff_t _eb73ab438b17863ba161a609e2ca1cb54fe6b36e = 0x290; // Animator
        constexpr ::std::ptrdiff_t _54ad226bb01bd54b5d7444139fe4b4d1eeeb855f = 0x298; // LODGroup
        constexpr ::std::ptrdiff_t _d92ae8750f45f54dcd953a366ab8a15ea55ec4b1 = 0x2A0; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t _3ee33371a41463b44aaf476406e3551b2151bae2 = 0x2A8; // float
        constexpr ::std::ptrdiff_t _4c4ff159b977132dfc7c2a5a58730f78f5f072f8 = 0x2AC; // bool
        constexpr ::std::ptrdiff_t _7a63865e9f1de3ed028e56f271d08530760459e1 = 0x2AD; // bool
        constexpr ::std::ptrdiff_t _3dd8e8f0e383eae717ab1ae211a801230c099c84 = 0x2B0; // int
        constexpr ::std::ptrdiff_t _49e583d57f672b3f1031b2e8536502cbd84d711a = 0x2B4; // int
        constexpr ::std::ptrdiff_t _b2c4ad1cb7c72b7e98be236c45e38ea5a1044f55 = 0x2B8; // HeldEntity
        constexpr ::std::ptrdiff_t _1db0154a797829c1128f3421dcbd5172baaff755 = 0x2C0; // bool
        constexpr ::std::ptrdiff_t _507c129e13eb5169a8010e7239fbb630f801a836 = 0x2C4; // float
        constexpr ::std::ptrdiff_t _784f7f21fb7548054b7bf810b0100eed121864cb = 0x2C8; // float
        constexpr ::std::ptrdiff_t _55068d3a3e5dfbf47e7f62831ebfea2836eb1ae8 = 0x2CC; // bool
        constexpr ::std::ptrdiff_t _63146bb2445e31f9c7b4b77fd6d021847aef9f47 = 0x2D0; // Nullable<float>
        constexpr ::std::ptrdiff_t _8323988c32d4dd9ea69c21b654a3dc4c473457c1 = 0x2D8; // List<BlendShapeController>
        constexpr ::std::ptrdiff_t _5823e34a285e84c6c4ac684a178efb545801b5d2 = 0x2E0; // bool
        constexpr ::std::ptrdiff_t _b683d0de3f6ddf0b064b94f7e66fa088d8e2f35b = 0x2E1; // bool
        constexpr ::std::ptrdiff_t _dbcdb92aa6087464c50bd4c2178c4f97ea3ca3e4 = 0x2E2; // bool
        constexpr ::std::ptrdiff_t _af9d71f179d7ac85c58ff754aad504f93870e376 = 0x2E4; // TimeSince
        constexpr ::std::ptrdiff_t _ddd70eb59b1c25e847f636949f34a7b05d36d25f = 0x2E8; // TimeSince
        constexpr ::std::ptrdiff_t _d6292b474b53df2a79b2f4bccfdce625188fde6b = 0x2EC; // Vector3
        constexpr ::std::ptrdiff_t _788e0da1d0f38c6804b221abe2bdafcc772e7d0b = 0x2F8; // Vector3
        constexpr ::std::ptrdiff_t _f6f5b2330c9bda1a8e7d777d3349c952171cf91e = 0x304; // TimeSince
        constexpr ::std::ptrdiff_t _354854eaaa97ce33ccc86d9688eb38791db0ff2a = 0x308; // Vector3
        constexpr ::std::ptrdiff_t _6133fc56e15ab0ecef015dad675d6051c05fa971 = 0x314; // Vector3
        constexpr ::std::ptrdiff_t _2bcac2da950adb005b54f94a512965c1d0266f8e = 0x320; // float
        constexpr ::std::ptrdiff_t _22ba39dcad635b9fdb238afcff2e7e346984f53c = 0x324; // float
        constexpr ::std::ptrdiff_t _9a17b3c1ef57a3b96f3cbe2bb6589c1c8cfd83fe = 0x328; // Vector3
        constexpr ::std::ptrdiff_t _69094745e79de0109fab3d9dbabaed1770b41db0 = 0x334; // bool
        constexpr ::std::ptrdiff_t _3b7a949c3d7d94a0b8d298577605d46162898e60 = 0x338; // float
        constexpr ::std::ptrdiff_t _f4d6fd5887483d45564044e853527403bb09a579 = 0x33C; // float
        constexpr ::std::ptrdiff_t _78df50eef515c1c62166739378de792d8e860e5c = 0x340; // Vector3
        constexpr ::std::ptrdiff_t _bf08191d7ebf7503a575e59dd7f2c7ec6f6051ef = 0x34C; // Vector3
        constexpr ::std::ptrdiff_t _93ac236921149e8025c5312e51d0d0070da24e5d = 0x358; // Vector3
        constexpr ::std::ptrdiff_t _2b51b49b9c71c4e269685acd944d1c9bbd3cc9dc = 0x364; // Vector3
        constexpr ::std::ptrdiff_t _865f583e56008d15aba42d095fefc0d2ca645bd9 = 0x370; // float
        constexpr ::std::ptrdiff_t _845f760566d773c20db522bac47d71fbdf7fb5fb = 0x374; // float
        constexpr ::std::ptrdiff_t Shoulders = 0x378; // Transform[]
        constexpr ::std::ptrdiff_t AdditionalSpineBones = 0x380; // Transform[]
        constexpr ::std::ptrdiff_t _476760310cf4515db87520d717091b4ff7dd4e48 = 0x388; // List<SkinnedMeshRenderer>
        constexpr ::std::ptrdiff_t _1e24e186819ac3c95834a518b2df77d1e3a476ec = 0x390; // List<WearableFadeToggle>
        constexpr ::std::ptrdiff_t _1e3caa1c91ae6dd4884a4b5ad1b1c443827e93f9 = 0x398; // Transform[]
        constexpr ::std::ptrdiff_t _8c2446591334bc1f25eb5bcd958c89e5357d5461 = 0x3A0; // float
        constexpr ::std::ptrdiff_t _50eef9cc5fee734bed60901ee690334d5ebdad0d = 0x3A4; // Nullable<bool>
        constexpr ::std::ptrdiff_t _b8a613bf79b703f71d7f299e711781fb77e4c486 = 0x3A8; // float
    } // namespace PlayerModel
    namespace ModelState {
        constexpr ::std::ptrdiff_t waterLevel = 0x10; // float
        constexpr ::std::ptrdiff_t lookDir = 0x14; // Vector3
        constexpr ::std::ptrdiff_t flags = 0x20; // int
        constexpr ::std::ptrdiff_t poseType = 0x24; // int
        constexpr ::std::ptrdiff_t inheritedVelocity = 0x28; // Vector3
        constexpr ::std::ptrdiff_t ladderType = 0x34; // int
        constexpr ::std::ptrdiff_t guidePosition = 0x38; // Vector3
        constexpr ::std::ptrdiff_t guideRotation = 0x44; // Vector3
        constexpr ::std::ptrdiff_t guidePrefab = 0x50; // uint
        constexpr ::std::ptrdiff_t guideValid = 0x54; // bool
        constexpr ::std::ptrdiff_t guideVersion = 0x58; // int
        constexpr ::std::ptrdiff_t ShouldPool = 0x5C; // bool
    } // namespace ModelState
    namespace Model {
        constexpr ::std::ptrdiff_t collision = 0x20; // SphereCollider
        constexpr ::std::ptrdiff_t rootBone = 0x28; // Transform
        constexpr ::std::ptrdiff_t headBone = 0x30; // Transform
        constexpr ::std::ptrdiff_t eyeBone = 0x38; // Transform
        constexpr ::std::ptrdiff_t animator = 0x40; // Animator
        constexpr ::std::ptrdiff_t skeleton = 0x48; // Skeleton
        constexpr ::std::ptrdiff_t boneTransforms = 0x50; // Transform[]
        constexpr ::std::ptrdiff_t boneNames = 0x58; // string[]
        constexpr ::std::ptrdiff_t _03c807d86c275adfd784997a9dc03eaa0b46df8e = 0x60; // %01ccbe949c82a5d8504764081382be5ef9680645
        constexpr ::std::ptrdiff_t _a20a3cde4bcf40aee639f2bd7b15c5d32382eab0 = 0x68; // int
        constexpr ::std::ptrdiff_t _54ad226bb01bd54b5d7444139fe4b4d1eeeb855f = 0x70; // LODGroup
    } // namespace Model
    namespace RecoilProperties {
        constexpr ::std::ptrdiff_t recoilYawMin = 0x18; // float
        constexpr ::std::ptrdiff_t recoilYawMax = 0x1C; // float
        constexpr ::std::ptrdiff_t recoilPitchMin = 0x20; // float
        constexpr ::std::ptrdiff_t recoilPitchMax = 0x24; // float
        constexpr ::std::ptrdiff_t timeToTakeMin = 0x28; // float
        constexpr ::std::ptrdiff_t timeToTakeMax = 0x2C; // float
        constexpr ::std::ptrdiff_t ADSScale = 0x30; // float
        constexpr ::std::ptrdiff_t movementPenalty = 0x34; // float
        constexpr ::std::ptrdiff_t clampPitch = 0x38; // float
        constexpr ::std::ptrdiff_t pitchCurve = 0x40; // AnimationCurve
        constexpr ::std::ptrdiff_t yawCurve = 0x48; // AnimationCurve
        constexpr ::std::ptrdiff_t useCurves = 0x50; // bool
        constexpr ::std::ptrdiff_t curvesAsScalar = 0x51; // bool
        constexpr ::std::ptrdiff_t shotsUntilMax = 0x54; // int
        constexpr ::std::ptrdiff_t maxRecoilRadius = 0x58; // float
        constexpr ::std::ptrdiff_t overrideAimconeWithCurve = 0x5C; // bool
        constexpr ::std::ptrdiff_t aimconeCurveScale = 0x60; // float
        constexpr ::std::ptrdiff_t aimconeCurve = 0x68; // AnimationCurve
        constexpr ::std::ptrdiff_t aimconeProbabilityCurve = 0x70; // AnimationCurve
        constexpr ::std::ptrdiff_t ammoAimconeScaleMultiProjectile = 0x78; // float
        constexpr ::std::ptrdiff_t ammoAimconeScaleSingleProjectile = 0x7C; // float
        constexpr ::std::ptrdiff_t newRecoilOverride = 0x80; // RecoilProperties
    } // namespace RecoilProperties
    namespace BaseFishingRod {
        constexpr ::std::ptrdiff_t FishingBobberRef = 0x218; // GameObjectRef
        constexpr ::std::ptrdiff_t FishCatchDistance = 0x220; // float
        constexpr ::std::ptrdiff_t ReelLineRenderer = 0x228; // LineRenderer
        constexpr ::std::ptrdiff_t LineRendererWorldStartPos = 0x230; // Transform
        constexpr ::std::ptrdiff_t _a0b7bc84bde3ffd4303fb245f9ef1859fa0e4ae3 = 0x238; // BaseFishingRod.CatchState
        constexpr ::std::ptrdiff_t _e4a827e5efd9c7d063b1a28a7c24fbddedbc100f = 0x23C; // BaseFishingRod.FishState
        constexpr ::std::ptrdiff_t _9bcfcb52bb3b85d28801c1f9154f3e1510111393 = 0x240; // %06f9fd75fd97e27cc12f0bae5286ba90cf209f20<FishingBobber>
        constexpr ::std::ptrdiff_t ConditionLossOnSuccess = 0x250; // float
        constexpr ::std::ptrdiff_t ConditionLossOnFail = 0x254; // float
        constexpr ::std::ptrdiff_t GlobalStrainSpeedMultiplier = 0x258; // float
        constexpr ::std::ptrdiff_t MaxCastDistance = 0x25C; // float
        constexpr ::std::ptrdiff_t ForceFish = 0x260; // ItemModFishable
        constexpr ::std::ptrdiff_t BobberPreview = 0x268; // GameObjectRef
        constexpr ::std::ptrdiff_t onLineSoundDef = 0x270; // SoundDefinition
        constexpr ::std::ptrdiff_t strainSoundDef = 0x278; // SoundDefinition
        constexpr ::std::ptrdiff_t strainGainCurve = 0x280; // AnimationCurve
        constexpr ::std::ptrdiff_t tensionBreakSoundDef = 0x288; // SoundDefinition
        constexpr ::std::ptrdiff_t _47004238e6909a78212ca1c49013ca2100377894 = 0x290; // Vector3[]
        constexpr ::std::ptrdiff_t _7e9a3fa28672365bb59be83a70b5564babbd6904 = 0x298; // Vector3[]
        constexpr ::std::ptrdiff_t _96f670e4c65b19c85be3ed44d28f4d94993cf4e7 = 0x2A0; // float[]
        constexpr ::std::ptrdiff_t _d13a10139d4711c57cca6f179c7a488ab190f85b = 0x2A8; // float
        constexpr ::std::ptrdiff_t _45e35125eeed20756483456426074e402e7729c1 = 0x2AC; // TimeUntil
        constexpr ::std::ptrdiff_t _944a66b50d3c293b3c69241d63c9ddcdd7d59e4f = 0x2B0; // FishingRodViewmodel
        constexpr ::std::ptrdiff_t _b35ee16bacb8e471ee37e5c4dd796d2eb88ce4df = 0x2B8; // BobberPreview
        constexpr ::std::ptrdiff_t _33fdb048eac0150b5e71dd42426eb254e47229af = 0x2C0; // bool
        constexpr ::std::ptrdiff_t _18e0c7ed4a8b670eed91576f0529c917e253ab7f = 0x2C8; // Sound
        constexpr ::std::ptrdiff_t _404cabcd7504922d1df46e4b4c4ba27c2f3c0846 = 0x2D0; // Sound
        constexpr ::std::ptrdiff_t _76479bf87dda7a0d74c751cd0b59f06b37b5d13c = 0x2D8; // SoundModulation.Modulator
        constexpr ::std::ptrdiff_t _597ec6561fd3203e107c09c70698cd535cecf328 = 0x2E0; // TimeUntil
        constexpr ::std::ptrdiff_t _c3754faf044135436e0e35016bb12e8b306e42b7 = 0x2E4; // TimeSince
    } // namespace BaseFishingRod
    namespace FishingBobber {
        constexpr ::std::ptrdiff_t centerOfMass = 0x290; // Transform
        constexpr ::std::ptrdiff_t myRigidBody = 0x298; // Rigidbody
        constexpr ::std::ptrdiff_t lineAttachPoint = 0x2A0; // Transform
        constexpr ::std::ptrdiff_t bobberRoot = 0x2A8; // Transform
        constexpr ::std::ptrdiff_t HorizontalMoveSpeed = 0x2B0; // float
        constexpr ::std::ptrdiff_t PullAwayMoveSpeed = 0x2B4; // float
        constexpr ::std::ptrdiff_t SidewaysInputForce = 0x2B8; // float
        constexpr ::std::ptrdiff_t ReelInMoveSpeed = 0x2BC; // float
        constexpr ::std::ptrdiff_t _502b355b2cbd4ab23010f95984905d14f6ce63f9 = 0x2C0; // float
        constexpr ::std::ptrdiff_t _c39c6e0abd1284a9a44e7832d8ba8a26d0c501f3 = 0x2C4; // Vector3
    } // namespace FishingBobber
    namespace OcclusionCulling {
        constexpr ::std::ptrdiff_t computeShader = 0x20; // ComputeShader
        constexpr ::std::ptrdiff_t usePixelShaderFallback = 0x28; // bool
        constexpr ::std::ptrdiff_t useAsyncReadAPI = 0x29; // bool
        constexpr ::std::ptrdiff_t _86adebcbacaf9fb6b732c2ac61e9acb7de21603d = 0x30; // Camera
        constexpr ::std::ptrdiff_t static__bb5a5f66799b7338334c03c57626baeda67bfb12 = 0x58; // OcclusionCulling.%aeb1a16ab9a8505f509f4eab1be17681bae96f24
        constexpr ::std::ptrdiff_t static__492172fd86ea29e770d288696980041a991e1a9d = 0x60; // OcclusionCulling.%aeb1a16ab9a8505f509f4eab1be17681bae96f24
        constexpr ::std::ptrdiff_t static__2fa90afe5ebd8fcd674ab205ca5ee692be9355ec = 0x68; // OcclusionCulling.%aeb1a16ab9a8505f509f4eab1be17681bae96f24
        constexpr ::std::ptrdiff_t _c043de62a5a635a593eae77ffe833f31e675d930 = 0x38; // Vector4[]
        constexpr ::std::ptrdiff_t _0137b517c0f0f7a25aef77d6b031db95c731b8e0 = 0x40; // string[]
        constexpr ::std::ptrdiff_t _29972fe2753270e622c8ddda4394081011ec39ec = 0x48; // float[]
        constexpr ::std::ptrdiff_t _b58a0e67bcc81dc03900304eef32f80a8dcdcaa1 = 0x50; // Material
        constexpr ::std::ptrdiff_t _f1da4e42061a2c50f7afaa6c6ea09de1be588044 = 0x58; // Material
        constexpr ::std::ptrdiff_t _ddcf5ac5ea003b9606bb7f97484d882a8e28fcbb = 0x60; // Matrix4x4
        constexpr ::std::ptrdiff_t _9c74c2c7a84c2c43b6a0304a1b5ce4a872401c26 = 0xA0; // Matrix4x4
        constexpr ::std::ptrdiff_t _2048044293ebee7895918842e6a303fd9277d47b = 0xE0; // Matrix4x4
        constexpr ::std::ptrdiff_t _16d956a23177203b6dbdae89bfdc8805a5d8d3d5 = 0x120; // Matrix4x4
        constexpr ::std::ptrdiff_t _3deef0bb63eea1b1f1f3efb7fcbb6feb3d1f5ac0 = 0x160; // Matrix4x4
        constexpr ::std::ptrdiff_t _f5bf299001cff9f269df5a331c1410aaaa2d8857 = 0x1A0; // bool
        constexpr ::std::ptrdiff_t static__d5cc1a22bd281b4869e16797a494732ebb1182ff = 0x70; // OcclusionCulling
        constexpr ::std::ptrdiff_t static__1117ffa64b3593f919a0fafc8b63bbde9fcfcc3f = 0x78; // bool
        constexpr ::std::ptrdiff_t static__287c01cd6b341e10dfbd096e86440c442fc38a94 = 0x88; // bool
        constexpr ::std::ptrdiff_t static__ee865875a68867b11a63429241a7168538b774aa = 0x89; // bool
        constexpr ::std::ptrdiff_t static__4337a4f99308c8633956a7efb281d25246d347da = 0x8C; // OcclusionCulling.DebugFilter
        constexpr ::std::ptrdiff_t debugSettings = 0x1A8; // OcclusionCulling.DebugSettings
        constexpr ::std::ptrdiff_t _db2e9ce1a7eb803b504e8ae51bac7144a505ae4b = 0x1B0; // Material
        constexpr ::std::ptrdiff_t _9eb6b8b0c5610c5cf63ad0289eb5035538d614eb = 0x1B8; // Material
        constexpr ::std::ptrdiff_t _baf7767f0e1671cd98574c0d4591bf19be817eef = 0x1C0; // Material
        constexpr ::std::ptrdiff_t _407adb538c8a4dea1e67ccfe95b74d2c8cbe38d2 = 0x1C8; // int
        constexpr ::std::ptrdiff_t _411ab16bde21ff85fba320fd2dbb9c7669ed1cf6 = 0x1CC; // int
        constexpr ::std::ptrdiff_t _0b2e773d66d148e44bf46d7df862adb421937afa = 0x1D0; // int
        constexpr ::std::ptrdiff_t _9095e2c605464d6dae2c67e37c796fb7e07776f5 = 0x1D8; // RenderTexture
        constexpr ::std::ptrdiff_t _9f188ff83f1c9c722713d951900528f496338d07 = 0x1E0; // RenderTexture
        constexpr ::std::ptrdiff_t _4f243c000113d47b960cfa887aed15fac2161d4f = 0x1E8; // RenderTexture[]
    } // namespace OcclusionCulling
    namespace OcclusionCulling.DebugSettings {
        constexpr ::std::ptrdiff_t log = 0x10; // bool
        constexpr ::std::ptrdiff_t showAllVisible = 0x11; // bool
        constexpr ::std::ptrdiff_t showMipChain = 0x12; // bool
        constexpr ::std::ptrdiff_t showMain = 0x13; // bool
        constexpr ::std::ptrdiff_t showMainLod = 0x14; // int
        constexpr ::std::ptrdiff_t showFallback = 0x18; // bool
        constexpr ::std::ptrdiff_t showStats = 0x19; // bool
        constexpr ::std::ptrdiff_t showScreenBounds = 0x1A; // bool
        constexpr ::std::ptrdiff_t showMask = 0x1C; // OcclusionCulling.DebugMask
        constexpr ::std::ptrdiff_t layerFilter = 0x20; // LayerMask
    } // namespace OcclusionCulling.DebugSettings
    namespace PlayerInput {
        constexpr ::std::ptrdiff_t _6b240c66394fb695fe31963b6c498a064ebc968b = 0x28; // %3e44cd04aeab18732987d96a4fb87a7b0badb97f
        constexpr ::std::ptrdiff_t _8f9bd1546f7f9a0a538d8a7526beaa97b17b544b = 0x30; // bool
        constexpr ::std::ptrdiff_t _c691d20c559ab31f6127ac35d0421b78bd2b6a29 = 0x34; // Quaternion
        constexpr ::std::ptrdiff_t _0e94e2314d15c8187d1d4b922e62288c7141a2c6 = 0x44; // Vector3
        constexpr ::std::ptrdiff_t _83be9171da198dd4dfebb86b68fa97d5dda07572 = 0x50; // Vector3
        constexpr ::std::ptrdiff_t _4dc52b3a3faf2ee9f30ef4b984fdb52c185a001b = 0x5C; // bool
        constexpr ::std::ptrdiff_t _0844a23e6d056c50d118241816f451054f4a1837 = 0x60; // float
        constexpr ::std::ptrdiff_t _6ded43aec2b4adf5f9633a1d37c84748e355ac0f = 0x64; // Quaternion
        constexpr ::std::ptrdiff_t _42cc05d781b33d86f1899c4d20dcb787aec1c79b = 0x74; // Vector3
        constexpr ::std::ptrdiff_t _2a1b507ec9790b7309bb69e45faa0a2847784650 = 0x8C; // Vector2
        constexpr ::std::ptrdiff_t _ed37d87062be4dd544c2df4c3aa50215254868fd = 0x94; // float
        constexpr ::std::ptrdiff_t _6b39694a34f8d319789c148ba3bb88387a3f6f7e = 0x98; // int
        constexpr ::std::ptrdiff_t _47ef6f76c0d7f5d340d4ff4a7a0c8e82c26b4f80 = 0x9C; // int
        constexpr ::std::ptrdiff_t _2c3051bc8c217b61a4c03f18a4329adf9317bc7b = 0xA0; // bool
        constexpr ::std::ptrdiff_t _fd85bb4827b40fb0b7d4a69ef1e8e3fe04d6f4c4 = 0xA1; // bool
        constexpr ::std::ptrdiff_t _af4a5617a13656b7a481294a51659d38c8043dde = 0xA2; // bool
        constexpr ::std::ptrdiff_t _89ea650232963234c3d1cea8b228a22fff438eff = 0xA8; // NetworkableId
        constexpr ::std::ptrdiff_t _59ad6258e89eba835a1b78dc9f109fc3a7c7a9e6 = 0xB0; // Vector3
        constexpr ::std::ptrdiff_t _5736d54d3d56d5406ea48daa5e4d8e021aafc7e4 = 0xBC; // Vector3
        constexpr ::std::ptrdiff_t _85766a73097ee5ae56a970cb85b562785ad42e8e = 0xC8; // int
        constexpr ::std::ptrdiff_t _2c00e28ceb4fd5b0ba8f80310c3f8d94b764ebde = 0xCC; // bool
    } // namespace PlayerInput
    namespace ItemDefinition {
        constexpr ::std::ptrdiff_t itemid = 0x20; // int
        constexpr ::std::ptrdiff_t shortname = 0x28; // string
        constexpr ::std::ptrdiff_t displayName = 0x30; // Translate.Phrase
        constexpr ::std::ptrdiff_t displayDescription = 0x38; // Translate.Phrase
        constexpr ::std::ptrdiff_t iconSprite = 0x40; // Sprite
        constexpr ::std::ptrdiff_t category = 0x48; // ItemCategory
        constexpr ::std::ptrdiff_t selectionPanel = 0x4C; // ItemSelectionPanel
        constexpr ::std::ptrdiff_t maxDraggable = 0x50; // int
        constexpr ::std::ptrdiff_t itemType = 0x54; // %e1783dc5b0b97891683b11118d7365b8907d9184.ContentsType
        constexpr ::std::ptrdiff_t amountType = 0x58; // ItemDefinition.AmountType
        constexpr ::std::ptrdiff_t occupySlots = 0x5C; // ItemSlot
        constexpr ::std::ptrdiff_t stackable = 0x60; // int
        constexpr ::std::ptrdiff_t volume = 0x64; // int
        constexpr ::std::ptrdiff_t quickDespawn = 0x68; // bool
        constexpr ::std::ptrdiff_t blockStealingInSafeZone = 0x69; // bool
        constexpr ::std::ptrdiff_t tutorialAllowance = 0x6C; // BasePlayer.TutorialItemAllowance
        constexpr ::std::ptrdiff_t rarity = 0x70; // Rarity
        constexpr ::std::ptrdiff_t despawnRarity = 0x74; // Rarity
        constexpr ::std::ptrdiff_t spawnAsBlueprint = 0x78; // bool
        constexpr ::std::ptrdiff_t inventoryGrabSound = 0x80; // SoundDefinition
        constexpr ::std::ptrdiff_t inventoryDropSound = 0x88; // SoundDefinition
        constexpr ::std::ptrdiff_t physImpactSoundDef = 0x90; // SoundDefinition
        constexpr ::std::ptrdiff_t condition = 0x98; // ItemDefinition.Condition
        constexpr ::std::ptrdiff_t hidden = 0xB0; // bool
        constexpr ::std::ptrdiff_t flags = 0xB4; // ItemDefinition.Flag
        constexpr ::std::ptrdiff_t hideSelectedPanel = 0xB8; // bool
        constexpr ::std::ptrdiff_t steamItem = 0xC0; // SteamInventoryItem
        constexpr ::std::ptrdiff_t steamDlc = 0xC8; // SteamDLCItem
        constexpr ::std::ptrdiff_t Parent = 0xD0; // ItemDefinition
        constexpr ::std::ptrdiff_t worldModelPrefab = 0xD8; // GameObjectRef
        constexpr ::std::ptrdiff_t treatAsComponentForRepairs = 0xE8; // bool
        constexpr ::std::ptrdiff_t AlignWorldModelOnDrop = 0xE9; // bool
        constexpr ::std::ptrdiff_t WorldModelDropOffset = 0xEC; // Vector3
        constexpr ::std::ptrdiff_t isRedirectOf = 0xF8; // ItemDefinition
        constexpr ::std::ptrdiff_t redirectVendingBehaviour = 0x100; // ItemDefinition.RedirectVendingBehaviour
        constexpr ::std::ptrdiff_t _34bf21aa26c0135ca140bccefac39ab9680eb5a8 = 0x108; // ItemMod[]
        constexpr ::std::ptrdiff_t Traits = 0x110; // BaseEntity.TraitFlag
        constexpr ::std::ptrdiff_t _adbabfa07e2843dcd1b6c3ee9f55a61f8af120b0 = 0x120; // IPlayerItemDefinition[]
        constexpr ::std::ptrdiff_t panel = 0x128; // GameObject
        constexpr ::std::ptrdiff_t _a53c1f62cf24c7e50fa35ebac95b5c99374c5703 = 0x130; // ItemModWearable
        constexpr ::std::ptrdiff_t _9fa36b81e4a1cbe048234a968ba6d2df6827c38b = 0x138; // ItemModBurnable
        constexpr ::std::ptrdiff_t _b8dc7972fe0305ce0c9d8f42a3a1f7164ce98a0b = 0x140; // ItemModCookable
        constexpr ::std::ptrdiff_t _dc64b8e3d0c6cd0196ab90b073688fd8c56b2c28 = 0x148; // bool
        constexpr ::std::ptrdiff_t _a4130327b887050244d7657aff4d1d8ad4dd10e0 = 0x149; // bool
        constexpr ::std::ptrdiff_t _9d4b129b2f491b1f4be88292a2d41208707eeeca = 0x14A; // bool
        constexpr ::std::ptrdiff_t _9fd09e71204e24129034b7bc89a9a53bddeb2f11 = 0x150; // ItemDefinition[]
    } // namespace ItemDefinition
    namespace PlayerEyes {
        constexpr ::std::ptrdiff_t thirdPersonSleepingOffset = 0x28; // Vector3
        constexpr ::std::ptrdiff_t defaultLazyAim = 0x38; // LazyAimProperties
        constexpr ::std::ptrdiff_t _f779751325fcc966a38153f5458cbc1998685b4e = 0x4C; // Quaternion
        constexpr ::std::ptrdiff_t _65b8a63de544ea70fdb884842c7c9329e8b3d17c = 0x5C; // Vector3
        constexpr ::std::ptrdiff_t _0a0dede43402c919423812da8a4bd29e266f0b82 = 0x68; // Quaternion
        constexpr ::std::ptrdiff_t _d5421e76635542fbaaa6e53e4c4eab085bff389c = 0x78; // Quaternion
        constexpr ::std::ptrdiff_t _6fc41c284a2666826a412e460f76a87bfb0f11a9 = 0x88; // float
        constexpr ::std::ptrdiff_t _c7db267a1c7b2b9178f1259ecc53ae24c16d2b4b = 0x8C; // bool
    } // namespace PlayerEyes
    namespace Projectile {
        constexpr ::std::ptrdiff_t initialVelocity = 0x20; // Vector3
        constexpr ::std::ptrdiff_t drag = 0x2C; // float
        constexpr ::std::ptrdiff_t gravityModifier = 0x30; // float
        constexpr ::std::ptrdiff_t thickness = 0x34; // float
        constexpr ::std::ptrdiff_t initialDistance = 0x38; // float
        constexpr ::std::ptrdiff_t remainInWorld = 0x3C; // bool
        constexpr ::std::ptrdiff_t stickProbability = 0x40; // float
        constexpr ::std::ptrdiff_t breakProbability = 0x44; // float
        constexpr ::std::ptrdiff_t conditionLoss = 0x48; // float
        constexpr ::std::ptrdiff_t ricochetChance = 0x4C; // float
        constexpr ::std::ptrdiff_t penetrationPower = 0x50; // float
        constexpr ::std::ptrdiff_t waterIntegrityLoss = 0x54; // float
        constexpr ::std::ptrdiff_t damageProperties = 0x58; // DamageProperties
        constexpr ::std::ptrdiff_t damageDistances = 0x60; // MinMax
        constexpr ::std::ptrdiff_t damageMultipliers = 0x68; // MinMax
        constexpr ::std::ptrdiff_t damageTypes = 0x70; // List<DamageTypeEntry>
        constexpr ::std::ptrdiff_t rendererToScale = 0x78; // ScaleRenderer
        constexpr ::std::ptrdiff_t firstPersonRenderer = 0x80; // ScaleRenderer
        constexpr ::std::ptrdiff_t createDecals = 0x88; // bool
        constexpr ::std::ptrdiff_t doDefaultHitEffects = 0x89; // bool
        constexpr ::std::ptrdiff_t flybySound = 0x90; // SoundDefinition
        constexpr ::std::ptrdiff_t flybySoundDistance = 0x98; // float
        constexpr ::std::ptrdiff_t closeFlybySound = 0xA0; // SoundDefinition
        constexpr ::std::ptrdiff_t closeFlybyDistance = 0xA8; // float
        constexpr ::std::ptrdiff_t tumbleSpeed = 0xAC; // float
        constexpr ::std::ptrdiff_t tumbleAxis = 0xB0; // Vector3
        constexpr ::std::ptrdiff_t swimScale = 0xBC; // Vector3
        constexpr ::std::ptrdiff_t swimSpeed = 0xC8; // Vector3
        constexpr ::std::ptrdiff_t _26615490cdaf007adda79ad2cd6809c700f67147 = 0xD8; // BasePlayer
        constexpr ::std::ptrdiff_t _a9a503fb25ccb9d7eb470678e61fbf102bd1ac58 = 0xE0; // AttackEntity
        constexpr ::std::ptrdiff_t _e17080bbd10dcc9ed01df9e3eb408f3bc54a1aab = 0xE8; // Projectile
        constexpr ::std::ptrdiff_t _5b81b959a0debe20b073be08a97cd435c7b9761e = 0xF0; // ItemModProjectile
        constexpr ::std::ptrdiff_t _3cbd8a6e6697c4bdb2fa609c6d65c2feb4ad4b5b = 0xF8; // int
        constexpr ::std::ptrdiff_t _fdbbb67c0da7037f138bda93869c6b309614eb5a = 0xFC; // int
        constexpr ::std::ptrdiff_t _ef08ea85b540865fb919aec8c3f6e3f1c3a9c8cb = 0x100; // bool
        constexpr ::std::ptrdiff_t _69558f7378b59b5dc142bb71dd22bf83708e5ebb = 0x101; // bool
        constexpr ::std::ptrdiff_t _e851ea7cee0c835a84d3f672e0b1a26fc365ec8f = 0x104; // float
        constexpr ::std::ptrdiff_t _b40f17187b520e7e3582e92a73b1e97b6e6db249 = 0x108; // float
        constexpr ::std::ptrdiff_t _79cc8cf074638931bd077a8625d09e6c91aee896 = 0x10C; // Projectile.%a0646cf05275597c804275393414abff57b5f308
        constexpr ::std::ptrdiff_t _4794e47208bb3e751f7378b92a8d13a81f69f21b = 0x11C; // bool
        constexpr ::std::ptrdiff_t _543f54e17cf5cc3039caefd84fbf74b8d6aa843e = 0x11D; // bool
        constexpr ::std::ptrdiff_t _5dce0b7731ba2d302db0311cd25cb08654a5de09 = 0x120; // float
        constexpr ::std::ptrdiff_t _a40c023ad8612f658d4e2797c09af9a8fefa86eb = 0x124; // Vector3
        constexpr ::std::ptrdiff_t _cd4573338ab965e423330efd027cb96f2ca6a907 = 0x130; // Vector3
        constexpr ::std::ptrdiff_t _12d0421687f26784a038549aa736d75555fef84f = 0x13C; // float
        constexpr ::std::ptrdiff_t _9cf59808078a89f2a5ec699d4158c827a2e64c4d = 0x140; // float
        constexpr ::std::ptrdiff_t _471d52fbb446b536b3fbe5da64af0bc952bb9eca = 0x144; // float
        constexpr ::std::ptrdiff_t _c83e498c25bc0b5a58608c911c5eef99e51a6747 = 0x148; // Vector3
        constexpr ::std::ptrdiff_t _a90e7cfacda6b4cc1375545837f154d600ca21e6 = 0x154; // Vector3
        constexpr ::std::ptrdiff_t _ee4010e239655fc407b6543886f534f18fd533f9 = 0x160; // Vector3
        constexpr ::std::ptrdiff_t _b6f0e4a6c8c766bc490bc325ba3b15159bc164e3 = 0x16C; // float
        constexpr ::std::ptrdiff_t _2cc8b31927e8fee7c10da1a0c1aec057e1cfe5d3 = 0x170; // bool
        constexpr ::std::ptrdiff_t _a791948439eb4bb4ec20bb325203ac9dca4745c4 = 0x171; // bool
        constexpr ::std::ptrdiff_t _1dd71bffabe528fb69b33f6e6124c76b8cf6c8be = 0x172; // bool
        constexpr ::std::ptrdiff_t _eeaa689f2a68a004fc9be1c930838b35fa8d62d7 = 0x173; // bool
        constexpr ::std::ptrdiff_t _b5fbb6e7489872dbc9a70e37172ed1b20500b5d6 = 0x174; // bool
        constexpr ::std::ptrdiff_t _7734a677fabc49bb60b4577728b992721bfa5e0f = 0x178; // Plane
        constexpr ::std::ptrdiff_t _7dd829341b6bff87a6d535b22f191e133c5ce798 = 0x188; // Ray
        constexpr ::std::ptrdiff_t _96c2dff4c6c3e3647f14d0885f90ee5f73ba83ba = 0x1A0; // Action
        constexpr ::std::ptrdiff_t _0dc36284dea86f3422c27a4e3562efa381003aab = 0x1A8; // %6af134ffbd68e4c9800742bef6bc0040ada4afaa
        constexpr ::std::ptrdiff_t _7fc2aeb2d7080157c6fb1a0987c73934641d3220 = 0x1B0; // float
    } // namespace Projectile
    namespace ItemModProjectile {
        constexpr ::std::ptrdiff_t projectileObject = 0x20; // GameObjectRef
        constexpr ::std::ptrdiff_t mods = 0x28; // ItemModProjectileMod[]
        constexpr ::std::ptrdiff_t ammoType = 0x30; // AmmoTypes
        constexpr ::std::ptrdiff_t numProjectiles = 0x34; // int
        constexpr ::std::ptrdiff_t projectileSpread = 0x38; // float
        constexpr ::std::ptrdiff_t projectileVelocity = 0x3C; // float
        constexpr ::std::ptrdiff_t projectileVelocitySpread = 0x40; // float
        constexpr ::std::ptrdiff_t useCurve = 0x44; // bool
        constexpr ::std::ptrdiff_t spreadScalar = 0x48; // AnimationCurve
        constexpr ::std::ptrdiff_t attackEffectOverride = 0x50; // GameObjectRef
        constexpr ::std::ptrdiff_t barrelConditionLoss = 0x58; // float
        constexpr ::std::ptrdiff_t category = 0x60; // string
    } // namespace ItemModProjectile
} // namespace blazedumper
