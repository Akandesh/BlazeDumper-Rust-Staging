#pragma once
#include <cstdint>

namespace blazedumper {
    constexpr ::std::ptrdiff_t BaseEntity_TypeInfo = 0x469E2A8;
    constexpr ::std::ptrdiff_t Facepunch_Input_TypeInfo = 0x46D4AE8;
    constexpr ::std::ptrdiff_t MainCamera_TypeInfo = 0x469E008;
    constexpr ::std::ptrdiff_t System_Collections_Generic_List_BaseGameMode_TypeInfo = 0x46AE750;
    constexpr ::std::ptrdiff_t BaseGameMode_TypeInfo = 0x46AC350;
    constexpr ::std::ptrdiff_t TOD_Sky_TypeInfo = 0x46D4570;
    constexpr ::std::ptrdiff_t ConsoleSystem_Index_TypeInfo = 0x468A898;
    constexpr ::std::ptrdiff_t BasePlayer_TypeInfo = 0x469DFE0;
    constexpr ::std::ptrdiff_t OcclusionCulling_TypeInfo = 0x46ABF10;
    constexpr ::std::ptrdiff_t BaseNetworkable_TypeInfo = 0x46AA0C8;
    namespace BasePlayer {
        constexpr ::std::ptrdiff_t _3b8e3f55fc7e7914e99b52c1983ff81cb4e15d5b = 0x290; // %b227a51b55e3df8a75f31698d9cd685534b8421a
        constexpr ::std::ptrdiff_t _59100a9bd28648895c25e297966167ed66888c53 = 0x308; // %b227a51b55e3df8a75f31698d9cd685534b8421a
        constexpr ::std::ptrdiff_t _b1bff2f5f4dc0e02b8e22ed046c0883c1a2f1775 = 0x380; // %b227a51b55e3df8a75f31698d9cd685534b8421a
        constexpr ::std::ptrdiff_t _f2994e322943dc6b2317a35a1514f7fb60dd967c = 0x3F8; // %b227a51b55e3df8a75f31698d9cd685534b8421a
        constexpr ::std::ptrdiff_t _6a4bdd1d38012a1a50e768172138d9990d6cb8d7 = 0x470; // %b227a51b55e3df8a75f31698d9cd685534b8421a
        constexpr ::std::ptrdiff_t _b662321b682fa1cf96722b8ed2d46719e7c31397 = 0x4E8; // %b227a51b55e3df8a75f31698d9cd685534b8421a
        constexpr ::std::ptrdiff_t _c5ed7aadee13d9d08807ab7f118957d1ef2a728f = 0x560; // %b227a51b55e3df8a75f31698d9cd685534b8421a
        constexpr ::std::ptrdiff_t _dfb3095d64a59f32b2e54d0a6e13c45f3daa859c = 0x5D8; // %b227a51b55e3df8a75f31698d9cd685534b8421a
        constexpr ::std::ptrdiff_t _7d2e2a11c7a4789a795b0c79995bc4821792ab4d = 0x650; // %b227a51b55e3df8a75f31698d9cd685534b8421a
        constexpr ::std::ptrdiff_t _d448083ac976536df427faa288f00d48d26e0d86 = 0x6C8; // %b227a51b55e3df8a75f31698d9cd685534b8421a
        constexpr ::std::ptrdiff_t _0bf86658fadbd0eef8dc2a15bb97601ed1f45aed = 0x740; // %b227a51b55e3df8a75f31698d9cd685534b8421a
        constexpr ::std::ptrdiff_t _51941cd3c19d87bec8c185c8d7300c651c9df932 = 0x7B8; // %b227a51b55e3df8a75f31698d9cd685534b8421a
        constexpr ::std::ptrdiff_t _f16b29b136d06faa7067e9dcd536201f0311d59c = 0x830; // %b227a51b55e3df8a75f31698d9cd685534b8421a
        constexpr ::std::ptrdiff_t _55797ad7c144223b1736f8cc199ff2dfaa94895e = 0x8A8; // long
        constexpr ::std::ptrdiff_t _badfeb46510b1b438a6bd383330e4b49e57ea291 = 0x8B0; // PlayerModel
        constexpr ::std::ptrdiff_t _9843f14d8cdb13f46d20f2e6502a352389f2e0ec = 0x8B8; // bool
        constexpr ::std::ptrdiff_t _ecc327f14006dd56356f31407354830007d3efc1 = 0x8B9; // bool
        constexpr ::std::ptrdiff_t _504ccc254646511ad2d3dd8a35763525ba0523b9 = 0x8C0; // PlayerVoiceRecorder
        constexpr ::std::ptrdiff_t _020f2ac88a0a4d6c4f76f172610d49af59d83ed8 = 0x8C8; // PlayerVoiceSpeaker
        constexpr ::std::ptrdiff_t _081e5b7fe7afdc4db5bf809e4d5a1496f85d1ada = 0x8D0; // PlayerInput
        constexpr ::std::ptrdiff_t _4a20ee7cecf94df124d1eb4e8712a8330952417c = 0x8D8; // BaseMovement
        constexpr ::std::ptrdiff_t _f968544c6e25bc8fb1da98a39b1fbfa49b8d59fe = 0x8E0; // BaseCollision
        constexpr ::std::ptrdiff_t _bf52600b8fd57b284550579be0749eabe3d11ee4 = 0x8E8; // int
        constexpr ::std::ptrdiff_t _d94db5aeaa024a0288ff5fafbd4ee4e7ef590a77 = 0x8EC; // int
        constexpr ::std::ptrdiff_t _fa016a7c327b288a843d7e50d5a5d1d58c2510b0 = 0x8F0; // uint
        constexpr ::std::ptrdiff_t _b24c9522cc67403a67eb8fba8e11305cccd852e0 = 0x8F8; // GameObject
        constexpr ::std::ptrdiff_t _d91f667d469fca6832a74b014cf731652c9aef22 = 0x900; // BaseEntity
        constexpr ::std::ptrdiff_t _067f1cd1944d8c3f26b5eacad192875f0ed191df = 0x908; // Collider
        constexpr ::std::ptrdiff_t _cad2930301fdad893f391b8735ab48caa39c4126 = 0x910; // Vector3
        constexpr ::std::ptrdiff_t _75b22c8e3172490de553acc6d184e6f464fcbe94 = 0x91C; // float
        constexpr ::std::ptrdiff_t _bd2c1a5d444619ba72d6ade79a26a9011f50d224 = 0x920; // bool
        constexpr ::std::ptrdiff_t _738ebed678a31d109f51ae08e32b9674f14388ee = 0x921; // bool
        constexpr ::std::ptrdiff_t _5184afc67bcc93a3f4e256f5d0912eb0bfccd501 = 0x922; // bool
        constexpr ::std::ptrdiff_t _c69ebc46c98de78406d6cff1eaeeb1e15c8cdba3 = 0x923; // bool
        constexpr ::std::ptrdiff_t _b1d6114fba9ed235c2290cec324c88a904ba8198 = 0x924; // bool
        constexpr ::std::ptrdiff_t _acd14e29de241f02091ad0d1385c6cb6719f911b = 0x925; // bool
        constexpr ::std::ptrdiff_t _7e8b9a650eeda854c22d1ab5c0717f1818de3013 = 0x928; // uint
        constexpr ::std::ptrdiff_t _b67dd0c1450fc47250338b80f84b41113e36429f = 0x92C; // TimeSince
        constexpr ::std::ptrdiff_t _821f93ff78e318beb829587e10f0f95178bf717d = 0x930; // BasePlayer.CameraMode
        constexpr ::std::ptrdiff_t _01a8aa475f29c97d845666f42f5abcafb5b76d4c = 0x934; // BasePlayer.CameraMode
        constexpr ::std::ptrdiff_t _d7189092bba7338376340bca0fbe9a775294fbd6 = 0x938; // Vector3
        constexpr ::std::ptrdiff_t _895f620520c0ade2dccb54d18ef3de36fb79baa0 = 0x944; // Vector3
        constexpr ::std::ptrdiff_t _38437ebcdb42a05afe989e1ae67adf8786f03f11 = 0x950; // bool
        constexpr ::std::ptrdiff_t GestureViewModel = 0x958; // ViewModel
        constexpr ::std::ptrdiff_t _d0433bb23cfa3876a867bb1c0de1a5234f05ea0a = 0x960; // RespawnInformation
        constexpr ::std::ptrdiff_t _317e7291315460852f0054d9fead399dd370b89a = 0x968; // float
        constexpr ::std::ptrdiff_t _237f68354f269c548d50f2f056deee202a7fc4e9 = 0x96C; // TimeSince
        constexpr ::std::ptrdiff_t _18e0b9176307fb196793efc0723d11e8a2087970 = 0x970; // RealTimeSince
        constexpr ::std::ptrdiff_t _18382ef407c6de2a50d71eed4d5205c4da2ab480 = 0x974; // float
        constexpr ::std::ptrdiff_t _cbd7a0a1e02968cd657b7e50ef372378cc1ec1d0 = 0x978; // float
        constexpr ::std::ptrdiff_t _58f9f59dda8903a046a1924c49a0afc54172c719 = 0x97C; // float
        constexpr ::std::ptrdiff_t _35b75a56ab58076301856a57c1f029898c361cef = 0x980; // %81ae8a405eb5f1c3a9391910cd979e79536f8914
        constexpr ::std::ptrdiff_t _eef13cbdcbddef45738feb9eadf4495b35cb3db7 = 0x988; // Vector3
        constexpr ::std::ptrdiff_t _c8f423a17d1978a19fcb5703e4782b6fdb97dfd3 = 0x994; // bool
        constexpr ::std::ptrdiff_t _c688cb7aed35a02274227e6cb750a26966153771 = 0x9A0; // Queue<string>
        constexpr ::std::ptrdiff_t gestureList = 0x9A8; // GestureCollection
        constexpr ::std::ptrdiff_t _8652d436d8cd1a8bdd6e628e610e631a76b7e168 = 0x9B0; // TimeUntil
        constexpr ::std::ptrdiff_t _201018b3fd310d265a1a0c174a54a88b1b8995e2 = 0x9B4; // TimeSince
        constexpr ::std::ptrdiff_t _f3b7c456bbcd4ef0563d54c0c4f248e31035b051 = 0x9B8; // GestureConfig
        constexpr ::std::ptrdiff_t _3e4498f3f290521a2a8a5e2a2d120157cf520be2 = 0x9C0; // HeldEntity
        constexpr ::std::ptrdiff_t _28585a47e3a9b6db23209e7b11e307a7ea35a1ab = 0x9C8; // float
        constexpr ::std::ptrdiff_t _fe620f1dddb83b5ecc1f8408212ecae3a6c047de = 0x9CC; // float
        constexpr ::std::ptrdiff_t currentTeam = 0x9D0; // ulong
        constexpr ::std::ptrdiff_t _8029f03404f75039b40c603ee0e699e470e5ecaa = 0x9D8; // PlayerTeam
        constexpr ::std::ptrdiff_t _1fccfb3844e4f730346e9d055470846735162213 = 0x9E0; // ListHashSet<ulong>
        constexpr ::std::ptrdiff_t _e2730a7414ffb9de5bc6de6126ac3c022c544242 = 0x9E8; // float
        constexpr ::std::ptrdiff_t _b88b1415eb2b136b3dd54f2d0abe0afac227a4cb = 0x9F0; // ulong
        constexpr ::std::ptrdiff_t _6ccd8ad507ac11239c11ec63d97c5031419ff184 = 0x9F8; // int
        constexpr ::std::ptrdiff_t _f57d45c9fd666088b78eaf3674170e4889f05e1a = 0xA00; // string
        constexpr ::std::ptrdiff_t _666d388cda8a2788ac1401dbbc26f67b51a54055 = 0xA08; // string
        constexpr ::std::ptrdiff_t _7480e92edd4c87f3e86a8aec2f9b6ccdaaf82487 = 0xA18; // List<MapNote>
        constexpr ::std::ptrdiff_t _e6e3293b74dadeac6abc56c0a64af27639a3c403 = 0xA20; // MapNote
        constexpr ::std::ptrdiff_t _f3bd5191297b7b8be2a77ad15bb4bbfe07a7f9c1 = 0xA28; // bool
        constexpr ::std::ptrdiff_t missions = 0xA30; // List<BaseMission.%2255564945773848e42735fefc8b30e66da1cb74>
        constexpr ::std::ptrdiff_t _20087b889fab2cde68ba2c05c8a85eaf3c5e9455 = 0xA38; // int
        constexpr ::std::ptrdiff_t _bcf623969f5176e8ca21394a364fc1cd9d1faa4a = 0xA40; // ModelState
        constexpr ::std::ptrdiff_t _9327eb8f92e0d3fb885f3a7aaa0d00879b2aff25 = 0xA48; // %0a47fe3f21f9dd8572a0b638cffd29ba2048fba0
        constexpr ::std::ptrdiff_t _bc893088b2e82de0d9951ef06aebb453c47c06f5 = 0xA58; // float
        constexpr ::std::ptrdiff_t _5f3a32e50a09d43b6d13664548689e13a678be5c = 0xA5C; // bool
        constexpr ::std::ptrdiff_t PetEntity = 0xA60; // BaseEntity
        constexpr ::std::ptrdiff_t _124c66b2f8344288bf0aa70cb852cc7e5c9429fd = 0xA68; // float
        constexpr ::std::ptrdiff_t _1b3899c3182cf489cac97d0ba1d4cc8f8c2e784e = 0xA6C; // uint
        constexpr ::std::ptrdiff_t _198eedf4c2a26ff5357bda8a353f3be7fd6910b6 = 0xA70; // NetworkableId
        constexpr ::std::ptrdiff_t _2c3f6d8d9436ce6dc69590afb0609ec3b758c62e = 0xA78; // List<MapNote>
        constexpr ::std::ptrdiff_t _a5829bfd03740e87970e3f526ae6046b540dd13d = 0xA80; // bool
        constexpr ::std::ptrdiff_t _6a71460e25218e6f905c25bcc7097f55d72e2da0 = 0xA84; // TimeSince
        constexpr ::std::ptrdiff_t _efc697dc99de8278b5d505218490e4582fef58c2 = 0xA88; // float
        constexpr ::std::ptrdiff_t _0576f25d73c807a5ba17dc23176037a0ddd7f4f3 = 0xA90; // BuildingPrivlidge
        constexpr ::std::ptrdiff_t _0428371a48f64ac30b5a84bf8a71ca12d51169d2 = 0xA98; // float
        constexpr ::std::ptrdiff_t _e35711da4d629b636e454b6528b1578f5c0fdb19 = 0xA9C; // bool
        constexpr ::std::ptrdiff_t _508f54c7144b431a8bd042ce5b22c4fe3c8964e6 = 0xAA0; // float
        constexpr ::std::ptrdiff_t _3652022154358653a8a45b5567f3b7fb4b1cb16f = 0xAA4; // bool
        constexpr ::std::ptrdiff_t _a133632a485f127248c13c815bdde48c40acd144 = 0xAA8; // BaseEntity
        constexpr ::std::ptrdiff_t _ad76235b67638bad15563e8741f2dd0dc8e91fd8 = 0xAB0; // float
        constexpr ::std::ptrdiff_t _82bfcc8eca6620dd6e8e2a04987521712616a63a = 0xAB4; // int
        constexpr ::std::ptrdiff_t _2c3c1f66d78be1daddd79f6ad48bcf0756f26beb = 0xAB8; // TimeSince
        constexpr ::std::ptrdiff_t _5145f5babed456dc35f710c4527b1165c22b11c9 = 0xABC; // float
        constexpr ::std::ptrdiff_t _fa78a88d6dfc2cfc9dfa29281a51548bc3a808eb = 0xAC0; // float
        constexpr ::std::ptrdiff_t _77ad5c4ec628c6d88dc18bb474cb90ae43497a7e = 0xAC8; // Stopwatch
        constexpr ::std::ptrdiff_t _b353c40a93204845821a569f77e0a33c006742c9 = 0xAD0; // PlayerTick
        constexpr ::std::ptrdiff_t _10a5426e6ef1f7dd8b1ee56b082205726952468f = 0xAD8; // BasePlayer.TutorialItemAllowance
        constexpr ::std::ptrdiff_t _3bc0dbc91a2f151f2982664a7f0ad831680deb9b = 0xADC; // float
        constexpr ::std::ptrdiff_t _4147f24effe4ec95584f994aa913d3f5a170b0bb = 0xAE0; // float
        constexpr ::std::ptrdiff_t _0478dd0c00231f65e87a9c86ec2302e105dbcc51 = 0xAE4; // float
        constexpr ::std::ptrdiff_t _a9e8ab08682a25f2657d28ec87846dce18b2ff12 = 0xAE8; // bool
        constexpr ::std::ptrdiff_t fallDamageEffect = 0xAF0; // GameObjectRef
        constexpr ::std::ptrdiff_t drownEffect = 0xAF8; // GameObjectRef
        constexpr ::std::ptrdiff_t playerFlags = 0xB00; // BasePlayer.PlayerFlags
        constexpr ::std::ptrdiff_t _b12749c2c8fbe575f31de028f46381d6c8429d32 = 0xB08; // %6f019ef5b7fdb7442c2dd53a0f65c22f96f27ff8<PlayerEyes>
        constexpr ::std::ptrdiff_t _6bf739922321ebeccb67051e5a34e8d6fdf76058 = 0xB10; // %6f019ef5b7fdb7442c2dd53a0f65c22f96f27ff8<PlayerInventory>
        constexpr ::std::ptrdiff_t _9093cbbf643947d768cb9db2b6551a302926118b = 0xB18; // PlayerBlueprints
        constexpr ::std::ptrdiff_t _035921be1c0e57ed72554af2b0955e37f562b9d3 = 0xB20; // PlayerMetabolism
        constexpr ::std::ptrdiff_t _9a964c7be67bc227940d3a6e4c07a8504964b2e6 = 0xB28; // PlayerModifiers
        constexpr ::std::ptrdiff_t _162f6ed7c259b000ea4acdea600da3468d058795 = 0xB30; // %6f019ef5b7fdb7442c2dd53a0f65c22f96f27ff8<CapsuleCollider>
        constexpr ::std::ptrdiff_t _42334036d9e3d3160437b178072ff5f434393984 = 0xB38; // %e1349ece484b4f352c54a4333426d8fac5cecaeb
        constexpr ::std::ptrdiff_t _e159919c062c261955b5617019e7010f806d57ae = 0xB40; // Rigidbody
        constexpr ::std::ptrdiff_t _d1d83a436e77b26e0319ab187ffcc3e6f87d6a3c = 0xB50; // string
        constexpr ::std::ptrdiff_t _010bf5e7010d0bee14c5531740eb8623654799ef = 0xB58; // int
        constexpr ::std::ptrdiff_t _de69b46c6d407e8181d8c1c0408c8dd82238cb9d = 0xB5C; // int
        constexpr ::std::ptrdiff_t _ef592fb88564da5764cf3c7b081d1a063c68b05b = 0xB60; // string
        constexpr ::std::ptrdiff_t _b8e415f0a3e009ca215ecf6a79cab3d22ebf3785 = 0xB68; // string
        constexpr ::std::ptrdiff_t _993512c1f491035c46b5c15e5ee897d4fe532107 = 0xB70; // BasePlayer.CapsuleColliderInfo
        constexpr ::std::ptrdiff_t _94aee970f0929bfa634dffcad637884e3bc8a338 = 0xB84; // BasePlayer.CapsuleColliderInfo
        constexpr ::std::ptrdiff_t _13f1ca9488b6f8344f9738977e9019045935e7ad = 0xB98; // BasePlayer.CapsuleColliderInfo
        constexpr ::std::ptrdiff_t _35a13c170c226950290b93fc864bcee54a6069ad = 0xBAC; // BasePlayer.CapsuleColliderInfo
        constexpr ::std::ptrdiff_t _eab49b94278aa4932dbce18d7ed6f6988b2ba50e = 0xBC0; // ProtectionProperties
        constexpr ::std::ptrdiff_t _57e0a1e97575a4ddd7348bbad201bdbcbb2e5573 = 0xBC8; // float
        constexpr ::std::ptrdiff_t _99ac43f5952d209039bfefc031c517962a72727f = 0xBCC; // float
        constexpr ::std::ptrdiff_t weaponMoveSpeedScale = 0xBD0; // float
        constexpr ::std::ptrdiff_t clothingBlocksAiming = 0xBD4; // bool
        constexpr ::std::ptrdiff_t clothingMoveSpeedReduction = 0xBD8; // float
        constexpr ::std::ptrdiff_t clothingWaterSpeedBonus = 0xBDC; // float
        constexpr ::std::ptrdiff_t clothingAccuracyBonus = 0xBE0; // float
        constexpr ::std::ptrdiff_t equippingBlocked = 0xBE4; // bool
        constexpr ::std::ptrdiff_t eggVision = 0xBE8; // float
        constexpr ::std::ptrdiff_t _bc1ad6ac145f6219583654918e4435046c1f1eae = 0xBF0; // PhoneController
        constexpr ::std::ptrdiff_t designingAIEntity = 0xBF8; // BaseEntity
    } // namespace BasePlayer
    namespace BaseEntity {
        constexpr ::std::ptrdiff_t _30d8fa202b38c6d146c43c82062f24b544ab0b81 = 0x80; // Ragdoll
        constexpr ::std::ptrdiff_t _c671347a7207555fb500f1039953d73d0a9a425f = 0x88; // %7e4904d7f3893b16960af16416e2330d69636219
        constexpr ::std::ptrdiff_t _2b44ba06615bdd9115d1c5ff563a51357f96f993 = 0x90; // float
        constexpr ::std::ptrdiff_t _78ac9e563593596ec5f93461a57be03fb1f8ffd1 = 0x98; // List<%b227a51b55e3df8a75f31698d9cd685534b8421a>
        constexpr ::std::ptrdiff_t bounds = 0xA0; // Bounds
        constexpr ::std::ptrdiff_t impactEffect = 0xB8; // GameObjectRef
        constexpr ::std::ptrdiff_t enableSaving = 0xC0; // bool
        constexpr ::std::ptrdiff_t syncPosition = 0xC1; // bool
        constexpr ::std::ptrdiff_t model = 0xC8; // Model
        constexpr ::std::ptrdiff_t flags = 0xD0; // BaseEntity.Flags
        constexpr ::std::ptrdiff_t _ab2bc91bbebdd0c72fb79bb880b7c603e7e64634 = 0xD4; // uint
        constexpr ::std::ptrdiff_t _90bee6714aeef7868e215e3c4c840df1ed2e45aa = 0xD8; // ulong
        constexpr ::std::ptrdiff_t _ef84c179c57734253fb861e56c3ba82305f8fe9e = 0xE0; // EntityComponentBase[]
        constexpr ::std::ptrdiff_t HasBrain = 0xE8; // bool
        constexpr ::std::ptrdiff_t _6b7fd4e3aee9d931b6a05f28c3bc637407bebaa0 = 0xF0; // string
        constexpr ::std::ptrdiff_t _78834ed8bf625bb712ef47a6b14de88d138e2ec7 = 0xF8; // ulong
        constexpr ::std::ptrdiff_t _ded01cf7d02e40f485e65d0a17e4c4645ec5701b = 0x100; // uint
        constexpr ::std::ptrdiff_t _f247ddb67074eaf16e9a8c380e869c64c9475e92 = 0x108; // List<%44332f178268e7fb56bc13223be4e7d8649ce412>
        constexpr ::std::ptrdiff_t _13293a64c7d996a755bab42f605337e535b66eb4 = 0x110; // bool
        constexpr ::std::ptrdiff_t _207a9678e4641bda173321626a31d684dffce76d = 0x118; // List<BaseEntity.%bae4dc60bc6c872362f05d59740de70b2f950292>
        constexpr ::std::ptrdiff_t _3e81f730670585857089f2178b17df1140fb4edc = 0x120; // Action
        constexpr ::std::ptrdiff_t _27a6c215befc70a35a19c2cd7ee238056f437b18 = 0x128; // BaseEntity
        constexpr ::std::ptrdiff_t _26fc3afd03409522340b6b465938cf5acefad0e1 = 0x130; // ItemSkin
        constexpr ::std::ptrdiff_t _3d176a5886d4a8f4e4f01db6acbd02aa4bfa8d59 = 0x138; // Action
        constexpr ::std::ptrdiff_t _6781014597fac38ddb9ad0cd868dd08636c0648a = 0x140; // Action
        constexpr ::std::ptrdiff_t _2508fd5ff170afac09bf4f0d59b012e206cd7ff6 = 0x148; // %0a47fe3f21f9dd8572a0b638cffd29ba2048fba0[]
        constexpr ::std::ptrdiff_t _7fdc9049a99291570fcf646632d63613315e77c7 = 0x150; // List<TriggerBase>
        constexpr ::std::ptrdiff_t _b3e9ad29baf11d0eb77b1fecf4cd0b178ff79035 = 0x158; // bool
        constexpr ::std::ptrdiff_t _c82efa028196e364954d8598c78efda476d592cc = 0x159; // bool
        constexpr ::std::ptrdiff_t _7e0a7c0cd8d65e9b0f29e7865ac7f4773177dc3e = 0x15A; // bool
        constexpr ::std::ptrdiff_t _3ce02f03b00c3ea8eb419ec996cf126526a16b76 = 0x160; // %6675749f04c0f05f235db4c299acedc4d1ecde73
        constexpr ::std::ptrdiff_t _e715697d8f4dd732767e4096ad80e540b08ee559 = 0x180; // float
    } // namespace BaseEntity
    namespace BaseCombatEntity {
        constexpr ::std::ptrdiff_t _316c89630d0fa210b42a3a62872c95b015c2deeb = 0x188; // %b227a51b55e3df8a75f31698d9cd685534b8421a
        constexpr ::std::ptrdiff_t skeletonProperties = 0x200; // SkeletonProperties
        constexpr ::std::ptrdiff_t baseProtection = 0x208; // ProtectionProperties
        constexpr ::std::ptrdiff_t startHealth = 0x210; // float
        constexpr ::std::ptrdiff_t pickup = 0x218; // BaseCombatEntity.Pickup
        constexpr ::std::ptrdiff_t repair = 0x240; // BaseCombatEntity.Repair
        constexpr ::std::ptrdiff_t ShowHealthInfo = 0x270; // bool
        constexpr ::std::ptrdiff_t lifestate = 0x274; // BaseCombatEntity.LifeState
        constexpr ::std::ptrdiff_t sendsHitNotification = 0x278; // bool
        constexpr ::std::ptrdiff_t sendsMeleeHitNotification = 0x279; // bool
        constexpr ::std::ptrdiff_t markAttackerHostile = 0x27A; // bool
        constexpr ::std::ptrdiff_t _589f3a6d931e200b5ce114a49a657b40f4bb932a = 0x27C; // float
        constexpr ::std::ptrdiff_t _1d62c4eaf8c2be9aabcf4979201df62acf63f298 = 0x280; // float
        constexpr ::std::ptrdiff_t faction = 0x284; // BaseCombatEntity.Faction
        constexpr ::std::ptrdiff_t _9b93bf72194b3b30eacb70ceefcc3c203dfab902 = 0x288; // float
        constexpr ::std::ptrdiff_t _918c626b61db772b6b086e3937396ef66679656b = 0x28C; // int
    } // namespace BaseCombatEntity
    namespace BuildingPrivlidge {
        constexpr ::std::ptrdiff_t _658c4194226e7a8d5932f26434c21fb23e21325c = 0x4A0; // %b227a51b55e3df8a75f31698d9cd685534b8421a
        constexpr ::std::ptrdiff_t _76e21b6b7f8aba5182a2dbf6029b3240b63d2bde = 0x518; // %b227a51b55e3df8a75f31698d9cd685534b8421a
        constexpr ::std::ptrdiff_t _181e0c8581392f0c9ff93782c95d74f6828007ef = 0x590; // %b227a51b55e3df8a75f31698d9cd685534b8421a
        constexpr ::std::ptrdiff_t _3b19b1af96fa8efa7a1ab2f6c32c52148f216e32 = 0x608; // %b227a51b55e3df8a75f31698d9cd685534b8421a
        constexpr ::std::ptrdiff_t _8931b26079cb1b548452a369dbd7de3766cd82d2 = 0x680; // %b227a51b55e3df8a75f31698d9cd685534b8421a
        constexpr ::std::ptrdiff_t _58f491eb4957f7b8e6fd678951328a6f860009c5 = 0x6F8; // %b227a51b55e3df8a75f31698d9cd685534b8421a
        constexpr ::std::ptrdiff_t assignDialog = 0x770; // GameObject
        constexpr ::std::ptrdiff_t _44a92b5e043edbcaab8189f7c2025a0ccadbba68 = 0x778; // HashSet<PlayerNameID>
        constexpr ::std::ptrdiff_t allowedConstructionItems = 0x780; // List<ItemDefinition>
        constexpr ::std::ptrdiff_t _fd819f90ba425250b334871efb2fd71d2393f9b1 = 0x788; // float
        constexpr ::std::ptrdiff_t _7b3f1011eb0185f17d33761cba62a959d28eef0d = 0x78C; // float
        constexpr ::std::ptrdiff_t _146f55f1be1a4370c398b0250df6ea113337e270 = 0x790; // float
        constexpr ::std::ptrdiff_t _e4d6b26901a8b6edf219347dde368e964b081752 = 0x794; // bool
        constexpr ::std::ptrdiff_t _75e5592a5fe391df8e1b85835e2b554a4ddc3829 = 0x795; // bool
        constexpr ::std::ptrdiff_t _af755e50c2add0ada81efca7b922c48f7a49ea03 = 0x798; // DateTime
    } // namespace BuildingPrivlidge
    namespace BaseProjectile {
        constexpr ::std::ptrdiff_t NoiseRadius = 0x2A0; // float
        constexpr ::std::ptrdiff_t damageScale = 0x2A4; // float
        constexpr ::std::ptrdiff_t distanceScale = 0x2A8; // float
        constexpr ::std::ptrdiff_t projectileVelocityScale = 0x2AC; // float
        constexpr ::std::ptrdiff_t automatic = 0x2B0; // bool
        constexpr ::std::ptrdiff_t usableByTurret = 0x2B1; // bool
        constexpr ::std::ptrdiff_t turretDamageScale = 0x2B4; // float
        constexpr ::std::ptrdiff_t attackFX = 0x2B8; // GameObjectRef
        constexpr ::std::ptrdiff_t silencedAttack = 0x2C0; // GameObjectRef
        constexpr ::std::ptrdiff_t muzzleBrakeAttack = 0x2C8; // GameObjectRef
        constexpr ::std::ptrdiff_t fireModeSound = 0x2D0; // SoundDefinition
        constexpr ::std::ptrdiff_t MuzzlePoint = 0x2D8; // Transform
        constexpr ::std::ptrdiff_t reloadTime = 0x2E0; // float
        constexpr ::std::ptrdiff_t canUnloadAmmo = 0x2E4; // bool
        constexpr ::std::ptrdiff_t primaryMagazine = 0x2E8; // BaseProjectile.Magazine
        constexpr ::std::ptrdiff_t fractionalReload = 0x2F0; // bool
        constexpr ::std::ptrdiff_t reloadStartDuration = 0x2F4; // float
        constexpr ::std::ptrdiff_t reloadFractionDuration = 0x2F8; // float
        constexpr ::std::ptrdiff_t reloadEndDuration = 0x2FC; // float
        constexpr ::std::ptrdiff_t aimSway = 0x300; // float
        constexpr ::std::ptrdiff_t aimSwaySpeed = 0x304; // float
        constexpr ::std::ptrdiff_t recoil = 0x308; // RecoilProperties
        constexpr ::std::ptrdiff_t aimconeCurve = 0x310; // AnimationCurve
        constexpr ::std::ptrdiff_t aimCone = 0x318; // float
        constexpr ::std::ptrdiff_t hipAimCone = 0x31C; // float
        constexpr ::std::ptrdiff_t aimconePenaltyPerShot = 0x320; // float
        constexpr ::std::ptrdiff_t aimConePenaltyMax = 0x324; // float
        constexpr ::std::ptrdiff_t aimconePenaltyRecoverTime = 0x328; // float
        constexpr ::std::ptrdiff_t aimconePenaltyRecoverDelay = 0x32C; // float
        constexpr ::std::ptrdiff_t stancePenaltyScale = 0x330; // float
        constexpr ::std::ptrdiff_t hasADS = 0x334; // bool
        constexpr ::std::ptrdiff_t noAimingWhileCycling = 0x335; // bool
        constexpr ::std::ptrdiff_t manualCycle = 0x336; // bool
        constexpr ::std::ptrdiff_t _51a1fd4af2b1b09ec7ba56f872bc404536e63903 = 0x337; // bool
        constexpr ::std::ptrdiff_t _5a29aa9a82bea63bd36ec1a4fa1db85305bbb398 = 0x338; // bool
        constexpr ::std::ptrdiff_t _b8b097124e1462973e686d412a440247263e5a29 = 0x339; // bool
        constexpr ::std::ptrdiff_t useEmptyAmmoState = 0x33A; // bool
        constexpr ::std::ptrdiff_t isBurstWeapon = 0x33B; // bool
        constexpr ::std::ptrdiff_t canChangeFireModes = 0x33C; // bool
        constexpr ::std::ptrdiff_t defaultOn = 0x33D; // bool
        constexpr ::std::ptrdiff_t internalBurstRecoilScale = 0x340; // float
        constexpr ::std::ptrdiff_t internalBurstFireRateScale = 0x344; // float
        constexpr ::std::ptrdiff_t internalBurstAimConeScale = 0x348; // float
        constexpr ::std::ptrdiff_t resetDuration = 0x34C; // float
        constexpr ::std::ptrdiff_t numShotsFired = 0x350; // int
        constexpr ::std::ptrdiff_t _e65c32ae28a76ed73c17e0b152a863b8172af768 = 0x35C; // float
        constexpr ::std::ptrdiff_t _f87502cc03a7f874046f921a62804ba834befdcb = 0x360; // float
        constexpr ::std::ptrdiff_t _c4e1e993b0bf604512d574a6af56d08071eeef12 = 0x364; // uint
        constexpr ::std::ptrdiff_t _fd9c9ea07d76caa99c75e1536679fc6254f24488 = 0x368; // float
        constexpr ::std::ptrdiff_t _d8c7378d7b3b8de07b25f7ceb2ca9563a8f321fa = 0x36C; // float
        constexpr ::std::ptrdiff_t _6ea87ac1ec07fd25435e900548b9c989a9ef6033 = 0x370; // float
        constexpr ::std::ptrdiff_t _18b417e6162bf270014af12365bbd3eadd060f0e = 0x374; // float
        constexpr ::std::ptrdiff_t _a395019784a6d9b07a1b61a55d9cf836d579c836 = 0x378; // bool
        constexpr ::std::ptrdiff_t _b8bb48a4dd55c853c367e8338f14caf1a9ef99c1 = 0x37C; // TimeSince
        constexpr ::std::ptrdiff_t _fc0cd4d56430107dd5431716012e98585f2a542e = 0x380; // float
        constexpr ::std::ptrdiff_t _aed6394d515a651b81af50a9ae0d4c5f537bdd24 = 0x388; // float
        constexpr ::std::ptrdiff_t _741bb7f3d073c29837da22f0090f2d6bfe81ec90 = 0x390; // ItemDefinition
        constexpr ::std::ptrdiff_t _cc3aeede50079451aee1f10641a8165d2e94e93b = 0x398; // int
        constexpr ::std::ptrdiff_t _e1f7f59c8f76d798f6ccb35d607341456c275557 = 0x39C; // int
        constexpr ::std::ptrdiff_t _02ea06ef87214270669f0a041b66328f84284e7d = 0x3A0; // int
        constexpr ::std::ptrdiff_t _e1f7afe44306db7c2cd563f3a772ddc2010025db = 0x3A4; // bool
        constexpr ::std::ptrdiff_t _e15d566b18993bbab08cd8988ef5c34351a4fbfb = 0x3A8; // float
        constexpr ::std::ptrdiff_t _de9cbfeaa469f3978dc0fd2a4b92ff5c2c3555f1 = 0x3AC; // bool
    } // namespace BaseProjectile
    namespace Magazine {
        constexpr ::std::ptrdiff_t capacity = 0x18; // int
        constexpr ::std::ptrdiff_t contents = 0x1C; // int
        constexpr ::std::ptrdiff_t ammoType = 0x20; // ItemDefinition
        constexpr ::std::ptrdiff_t allowPlayerReloading = 0x28; // bool
        constexpr ::std::ptrdiff_t allowAmmoSwitching = 0x29; // bool
    } // namespace Magazine
    namespace PlayerInventory {
        constexpr ::std::ptrdiff_t _aa0acef7aa13c54a54927102fa073a07f6f5def4 = 0x28; // %3dd474af39c51738fc617d642fbb95d04da13612
        constexpr ::std::ptrdiff_t _72b2175148189e3d764654335810fe8328f3c087 = 0x30; // %3dd474af39c51738fc617d642fbb95d04da13612
        constexpr ::std::ptrdiff_t _7b241e9dc8dc7ff9325a671174c4cbc868f09682 = 0x38; // %3dd474af39c51738fc617d642fbb95d04da13612
        constexpr ::std::ptrdiff_t crafting = 0x40; // ItemCrafter
        constexpr ::std::ptrdiff_t loot = 0x48; // PlayerLoot
        constexpr ::std::ptrdiff_t _3197a401720c8fb111de84fc8b804b8c578fe820 = 0x50; // List<ItemIcon>
        constexpr ::std::ptrdiff_t _9582d3661606a5ecd593f59dd27fb180e8922b09 = 0x58; // PlayerInventory.%09b14d5499edacec623ad91c10f808ecf33a7e20
        constexpr ::std::ptrdiff_t _2cbaf47674082d40b0ad06ce1036e1be5b1341d3 = 0x68; // List<%f8d47c61227d7cc853b6d2cf9b1ea8449adaeb8b>
    } // namespace PlayerInventory
    namespace PlayerModel {
        constexpr ::std::ptrdiff_t collision = 0x20; // BoxCollider
        constexpr ::std::ptrdiff_t censorshipCube = 0x28; // GameObject
        constexpr ::std::ptrdiff_t censorshipCubeBreasts = 0x30; // GameObject
        constexpr ::std::ptrdiff_t jawBone = 0x38; // GameObject
        constexpr ::std::ptrdiff_t neckBone = 0x40; // GameObject
        constexpr ::std::ptrdiff_t headBone = 0x48; // GameObject
        constexpr ::std::ptrdiff_t eyeController = 0x50; // EyeController
        constexpr ::std::ptrdiff_t blinkController = 0x58; // EyeBlink
        constexpr ::std::ptrdiff_t SpineBones = 0x60; // Transform[]
        constexpr ::std::ptrdiff_t leftFootBone = 0x68; // Transform
        constexpr ::std::ptrdiff_t rightFootBone = 0x70; // Transform
        constexpr ::std::ptrdiff_t leftHandPropBone = 0x78; // Transform
        constexpr ::std::ptrdiff_t rightHandPropBone = 0x80; // Transform
        constexpr ::std::ptrdiff_t rightHandTarget = 0x88; // Vector3
        constexpr ::std::ptrdiff_t isPreview = 0x94; // bool
        constexpr ::std::ptrdiff_t leftHandTargetPosition = 0x98; // Vector3
        constexpr ::std::ptrdiff_t leftHandTargetRotation = 0xA4; // Quaternion
        constexpr ::std::ptrdiff_t rightHandTargetPosition = 0xB4; // Vector3
        constexpr ::std::ptrdiff_t rightHandTargetRotation = 0xC0; // Quaternion
        constexpr ::std::ptrdiff_t steeringTargetDegrees = 0xD0; // float
        constexpr ::std::ptrdiff_t rightFootTargetPosition = 0xD4; // Vector3
        constexpr ::std::ptrdiff_t rightFootTargetRotation = 0xE0; // Quaternion
        constexpr ::std::ptrdiff_t leftFootTargetPosition = 0xF0; // Vector3
        constexpr ::std::ptrdiff_t leftFootTargetRotation = 0xFC; // Quaternion
        constexpr ::std::ptrdiff_t CinematicAnimationController = 0x110; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t DefaultAvatar = 0x118; // Avatar
        constexpr ::std::ptrdiff_t CinematicAvatar = 0x120; // Avatar
        constexpr ::std::ptrdiff_t DefaultHoldType = 0x128; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t SleepGesture = 0x130; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t CrawlToIncapacitatedGesture = 0x138; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t CrawlToIncapacitatedGestureHandcuff = 0x140; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t StandToIncapacitatedGesture = 0x148; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t _07b126cfbf3553b699cde2e1f24cdf120723eb17 = 0x150; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t MaleSkin = 0x158; // SkinSetCollection
        constexpr ::std::ptrdiff_t FemaleSkin = 0x160; // SkinSetCollection
        constexpr ::std::ptrdiff_t subsurfaceProfile = 0x168; // SubsurfaceProfile
        constexpr ::std::ptrdiff_t voiceVolume = 0x170; // float
        constexpr ::std::ptrdiff_t skinColor = 0x174; // float
        constexpr ::std::ptrdiff_t skinNumber = 0x178; // float
        constexpr ::std::ptrdiff_t meshNumber = 0x17C; // float
        constexpr ::std::ptrdiff_t hairNumber = 0x180; // float
        constexpr ::std::ptrdiff_t skinType = 0x184; // int
        constexpr ::std::ptrdiff_t movementSounds = 0x188; // MovementSounds
        constexpr ::std::ptrdiff_t showSash = 0x190; // bool
        constexpr ::std::ptrdiff_t tempPoseType = 0x194; // int
        constexpr ::std::ptrdiff_t underwearSkin = 0x198; // uint
        constexpr ::std::ptrdiff_t _c17ee5ea35c8742cd9bb88970388cdf674646480 = 0x1A0; // ulong
        constexpr ::std::ptrdiff_t _b280255088854bd7a805f28d065c3060dc0b019b = 0x1A8; // Quaternion
        constexpr ::std::ptrdiff_t _7b4edd620ed53915dad017dce3b05b33acdf87a0 = 0x1B8; // Quaternion
        constexpr ::std::ptrdiff_t _bcf623969f5176e8ca21394a364fc1cd9d1faa4a = 0x1C8; // ModelState
        constexpr ::std::ptrdiff_t _df02293d317d153c5cd8411e9482fb7cabeaf98e = 0x1D0; // Vector3
        constexpr ::std::ptrdiff_t _46b2ecba8f462b3e30be18aa48b3c934023ad0d1 = 0x1DC; // Vector3
        constexpr ::std::ptrdiff_t _bcafb05a94a82acbcc5572a1eed745647846fcba = 0x1E8; // Vector3
        constexpr ::std::ptrdiff_t _c0a9544190496bc4ed29d61476f47cff2b6c2f44 = 0x1F4; // Vector3
        constexpr ::std::ptrdiff_t _742537eb8312d7b0c8ac8184e52ae3b7c4f7d20c = 0x200; // Quaternion
        constexpr ::std::ptrdiff_t _1bfc6ac500da2b371233cd0a8bc325dfe071cc74 = 0x210; // Quaternion
        constexpr ::std::ptrdiff_t _b374568fc044f559e3af1ea285fe9b7450394dec = 0x220; // float
        constexpr ::std::ptrdiff_t _73ce9ce640ae2754d69203da8e16afffe3cc9a10 = 0x224; // Vector3
        constexpr ::std::ptrdiff_t _a94385b2faa5a38d058e57871f1c14a34d3f6fff = 0x230; // Vector3
        constexpr ::std::ptrdiff_t _d4c41fc8bd993c59823e703c20d22291b2380d75 = 0x23C; // bool
        constexpr ::std::ptrdiff_t _7558d4cf4e9067e3697a9b74573a26c744c45a7d = 0x23D; // bool
        constexpr ::std::ptrdiff_t _af6477ed223ef5750978cd8a35037960c2c86670 = 0x240; // uint
        constexpr ::std::ptrdiff_t _9f48dd208ea12a3481e4e4cc9da6aa21cf143646 = 0x244; // bool
        constexpr ::std::ptrdiff_t _dd6c72d9ca8a43e9bc4c262f967a0158a87c8875 = 0x248; // PlayerNameTag
        constexpr ::std::ptrdiff_t _579df9e8cee4df6fc986ceb9b47da98c42a69f9d = 0x250; // bool
        constexpr ::std::ptrdiff_t _323cecdea83db367480be13a4f69690c3abfcd57 = 0x251; // bool
        constexpr ::std::ptrdiff_t _e648079351b4affdfdd072bd6a2c04fac9ceb9f9 = 0x258; // SoundDefinition
        constexpr ::std::ptrdiff_t _2607f643290cb6c72c99a5ceb6d2ade5282df3c5 = 0x260; // SoundDefinition
        constexpr ::std::ptrdiff_t _1f3f9fa68b4364482cabe9a3094969068fa36b55 = 0x268; // bool
        constexpr ::std::ptrdiff_t _4e09362efd6b4d868d95e0b920cbd8243eec1b87 = 0x270; // GestureConfig
        constexpr ::std::ptrdiff_t _e80769da84398d6284ddb59f1e03a940e63c1b05 = 0x278; // bool
        constexpr ::std::ptrdiff_t _9e385c26ca11b56d47c8af91c36efa5845198fd5 = 0x280; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t _ce0408d9ef4720b7acc2e8415e79bb61950eab7b = 0x288; // SkinnedMultiMesh
        constexpr ::std::ptrdiff_t _d5f57f2ffc7a51457796e140901cf37e0ececca6 = 0x290; // Animator
        constexpr ::std::ptrdiff_t _db811f568acf9785cda9c05b820ecd7dfa548b5e = 0x298; // LODGroup
        constexpr ::std::ptrdiff_t _778423bb9b1e8b36661f3aa20a9e2132481c9c77 = 0x2A0; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t _0ca7b80d9e51e7c7a7f7e954616b8332eebde002 = 0x2A8; // float
        constexpr ::std::ptrdiff_t _eb8fe8336a430c579a48ff9063afcfa4270c6173 = 0x2AC; // bool
        constexpr ::std::ptrdiff_t _4a743e3aa35c0144047d690095a4349a0439d4c8 = 0x2AD; // bool
        constexpr ::std::ptrdiff_t _fd0a8fa23091fa8cdcbd21eb064fa429456a4935 = 0x2B0; // int
        constexpr ::std::ptrdiff_t _e479101aa7dbef0369259587a506aed2a97142d9 = 0x2B4; // int
        constexpr ::std::ptrdiff_t _540bd306c9f159388e538ce7f3ca33722f164831 = 0x2B8; // HeldEntity
        constexpr ::std::ptrdiff_t _d7bec0d00f3babf8273291d127068ddbb549aee3 = 0x2C0; // bool
        constexpr ::std::ptrdiff_t _64248e53ade1c80796d05797460779a329dcca58 = 0x2C4; // float
        constexpr ::std::ptrdiff_t _cefee0121c960553f11ac865d39c876df37615c3 = 0x2C8; // float
        constexpr ::std::ptrdiff_t _4d81544c591a445e257f9a4b9599d1606328fe8b = 0x2CC; // bool
        constexpr ::std::ptrdiff_t _7de30eee431edf6ea470d89299a2527f9adc87b2 = 0x2D0; // Nullable<float>
        constexpr ::std::ptrdiff_t _6da69c110967a84cb5eb15463ca20bd2d6c7aa06 = 0x2D8; // List<BlendShapeController>
        constexpr ::std::ptrdiff_t _b9c9225fdabbaba224e9fd867c91e70a5a70e8e7 = 0x2E0; // bool
        constexpr ::std::ptrdiff_t _5f3bdf7ff2a9647a13271742d1320c31396ab04a = 0x2E1; // bool
        constexpr ::std::ptrdiff_t _61762253e18a2a84cd58d5df4600b427165dc395 = 0x2E2; // bool
        constexpr ::std::ptrdiff_t _37ed14ceb9e8ba56af146cf1673179cd07ce5434 = 0x2E4; // TimeSince
        constexpr ::std::ptrdiff_t _d300a5041c9aa9fcbd6de806c85194e9b8157ff2 = 0x2E8; // TimeSince
        constexpr ::std::ptrdiff_t _7747357f63892a95933a43a71cd66fdda8627192 = 0x2EC; // Vector3
        constexpr ::std::ptrdiff_t _2376050d8445b92a7343df6822184bad67fc89fb = 0x2F8; // Vector3
        constexpr ::std::ptrdiff_t _764f9b17dd05a34a1eb0b9b94b776f985590880d = 0x304; // TimeSince
        constexpr ::std::ptrdiff_t _e58051d5ca45006d69fe12995850264781f5f2f9 = 0x308; // Vector3
        constexpr ::std::ptrdiff_t _33120ce782190dfbc3a05d71e97af8daf8752256 = 0x314; // Vector3
        constexpr ::std::ptrdiff_t _8e4fed32574257792a51e4420c6ee7afe7de0faf = 0x320; // float
        constexpr ::std::ptrdiff_t _4af747072ed9da1c731ffcaf79efd32eb32e4832 = 0x324; // float
        constexpr ::std::ptrdiff_t _a8c889c4d654f006098d79e5ca40cbc9f1947780 = 0x328; // Vector3
        constexpr ::std::ptrdiff_t _e4b07b17a09790da078ecdef3cfedc6dbef63254 = 0x334; // bool
        constexpr ::std::ptrdiff_t _a9d2db71fe0a3c6bf8a5c6e59f78f34fc07b89eb = 0x338; // float
        constexpr ::std::ptrdiff_t _32d7237033925052e9ef3bda4f82bb2269f4b928 = 0x33C; // float
        constexpr ::std::ptrdiff_t _e48b2d418fe09941f364e942448419dd44731415 = 0x340; // Vector3
        constexpr ::std::ptrdiff_t _c1f42d7c64216b50f4e86ebfb00dd7b923dfd025 = 0x34C; // Vector3
        constexpr ::std::ptrdiff_t _46f7bebf105590d94de91eedca17df7cf5e91819 = 0x358; // Vector3
        constexpr ::std::ptrdiff_t _923f683e33b3158b35be97ed0c896294b5fc3abf = 0x364; // Vector3
        constexpr ::std::ptrdiff_t _802502e59a91b6b86e97fb2957eef9df639cf122 = 0x370; // float
        constexpr ::std::ptrdiff_t _7ef829f87cb69ac9a82db84b414f1ac35a0c5e80 = 0x374; // float
        constexpr ::std::ptrdiff_t Shoulders = 0x378; // Transform[]
        constexpr ::std::ptrdiff_t AdditionalSpineBones = 0x380; // Transform[]
        constexpr ::std::ptrdiff_t _fc47fccbd1df025f3df0c7e1b1772b0edc48db20 = 0x388; // List<SkinnedMeshRenderer>
        constexpr ::std::ptrdiff_t _1920017f0eba2747e573068d2b38d888ea550374 = 0x390; // List<WearableFadeToggle>
        constexpr ::std::ptrdiff_t _72cbf07be3cf2454e9da22efb9ff36b31165d440 = 0x398; // Transform[]
        constexpr ::std::ptrdiff_t _2ab595158b6e3cab50f145d4c3d9f97e1a104ef0 = 0x3A0; // float
        constexpr ::std::ptrdiff_t _944deb9fa08ce98dac2fd9e383c9d32128ace54f = 0x3A4; // Nullable<bool>
        constexpr ::std::ptrdiff_t _553b543136c039d8a2940714b1d853cbb41ae750 = 0x3A8; // float
    } // namespace PlayerModel
    namespace ModelState {
        constexpr ::std::ptrdiff_t waterLevel = 0x10; // float
        constexpr ::std::ptrdiff_t lookDir = 0x14; // Vector3
        constexpr ::std::ptrdiff_t flags = 0x20; // int
        constexpr ::std::ptrdiff_t poseType = 0x24; // int
        constexpr ::std::ptrdiff_t inheritedVelocity = 0x28; // Vector3
        constexpr ::std::ptrdiff_t ladderType = 0x34; // int
        constexpr ::std::ptrdiff_t guidePosition = 0x38; // Vector3
        constexpr ::std::ptrdiff_t guideRotation = 0x44; // Vector3
        constexpr ::std::ptrdiff_t guidePrefab = 0x50; // uint
        constexpr ::std::ptrdiff_t guideValid = 0x54; // bool
        constexpr ::std::ptrdiff_t guideVersion = 0x58; // int
        constexpr ::std::ptrdiff_t ShouldPool = 0x5C; // bool
    } // namespace ModelState
    namespace Model {
        constexpr ::std::ptrdiff_t collision = 0x20; // SphereCollider
        constexpr ::std::ptrdiff_t rootBone = 0x28; // Transform
        constexpr ::std::ptrdiff_t headBone = 0x30; // Transform
        constexpr ::std::ptrdiff_t eyeBone = 0x38; // Transform
        constexpr ::std::ptrdiff_t animator = 0x40; // Animator
        constexpr ::std::ptrdiff_t skeleton = 0x48; // Skeleton
        constexpr ::std::ptrdiff_t boneTransforms = 0x50; // Transform[]
        constexpr ::std::ptrdiff_t boneNames = 0x58; // string[]
        constexpr ::std::ptrdiff_t _1fb5c91dac7b6a2b5222e3bed55e48b3406e643e = 0x60; // %5c53726b21c1b3f4c997161bb49273ce027ca81a
        constexpr ::std::ptrdiff_t _e8b1e42a2960e94b66ffbea9c76638cf1a06310a = 0x68; // int
        constexpr ::std::ptrdiff_t _db811f568acf9785cda9c05b820ecd7dfa548b5e = 0x70; // LODGroup
    } // namespace Model
    namespace RecoilProperties {
        constexpr ::std::ptrdiff_t recoilYawMin = 0x18; // float
        constexpr ::std::ptrdiff_t recoilYawMax = 0x1C; // float
        constexpr ::std::ptrdiff_t recoilPitchMin = 0x20; // float
        constexpr ::std::ptrdiff_t recoilPitchMax = 0x24; // float
        constexpr ::std::ptrdiff_t timeToTakeMin = 0x28; // float
        constexpr ::std::ptrdiff_t timeToTakeMax = 0x2C; // float
        constexpr ::std::ptrdiff_t ADSScale = 0x30; // float
        constexpr ::std::ptrdiff_t movementPenalty = 0x34; // float
        constexpr ::std::ptrdiff_t clampPitch = 0x38; // float
        constexpr ::std::ptrdiff_t pitchCurve = 0x40; // AnimationCurve
        constexpr ::std::ptrdiff_t yawCurve = 0x48; // AnimationCurve
        constexpr ::std::ptrdiff_t useCurves = 0x50; // bool
        constexpr ::std::ptrdiff_t curvesAsScalar = 0x51; // bool
        constexpr ::std::ptrdiff_t shotsUntilMax = 0x54; // int
        constexpr ::std::ptrdiff_t maxRecoilRadius = 0x58; // float
        constexpr ::std::ptrdiff_t overrideAimconeWithCurve = 0x5C; // bool
        constexpr ::std::ptrdiff_t aimconeCurveScale = 0x60; // float
        constexpr ::std::ptrdiff_t aimconeCurve = 0x68; // AnimationCurve
        constexpr ::std::ptrdiff_t aimconeProbabilityCurve = 0x70; // AnimationCurve
        constexpr ::std::ptrdiff_t ammoAimconeScaleMultiProjectile = 0x78; // float
        constexpr ::std::ptrdiff_t ammoAimconeScaleSingleProjectile = 0x7C; // float
        constexpr ::std::ptrdiff_t newRecoilOverride = 0x80; // RecoilProperties
    } // namespace RecoilProperties
    namespace BaseFishingRod {
        constexpr ::std::ptrdiff_t FishingBobberRef = 0x218; // GameObjectRef
        constexpr ::std::ptrdiff_t FishCatchDistance = 0x220; // float
        constexpr ::std::ptrdiff_t ReelLineRenderer = 0x228; // LineRenderer
        constexpr ::std::ptrdiff_t LineRendererWorldStartPos = 0x230; // Transform
        constexpr ::std::ptrdiff_t _37bd89f58cc0155202d868dfcba0342aa45623d3 = 0x238; // BaseFishingRod.CatchState
        constexpr ::std::ptrdiff_t _5a4aad65851a7d0a8ae1ab395494033761e5c480 = 0x23C; // BaseFishingRod.FishState
        constexpr ::std::ptrdiff_t _08d3934b7e319fd9117870236455cec024e6ecb1 = 0x240; // %0a26d86763b93db27b7673d96b25c8496f156495<FishingBobber>
        constexpr ::std::ptrdiff_t ConditionLossOnSuccess = 0x250; // float
        constexpr ::std::ptrdiff_t ConditionLossOnFail = 0x254; // float
        constexpr ::std::ptrdiff_t GlobalStrainSpeedMultiplier = 0x258; // float
        constexpr ::std::ptrdiff_t MaxCastDistance = 0x25C; // float
        constexpr ::std::ptrdiff_t ForceFish = 0x260; // ItemModFishable
        constexpr ::std::ptrdiff_t BobberPreview = 0x268; // GameObjectRef
        constexpr ::std::ptrdiff_t onLineSoundDef = 0x270; // SoundDefinition
        constexpr ::std::ptrdiff_t strainSoundDef = 0x278; // SoundDefinition
        constexpr ::std::ptrdiff_t strainGainCurve = 0x280; // AnimationCurve
        constexpr ::std::ptrdiff_t tensionBreakSoundDef = 0x288; // SoundDefinition
        constexpr ::std::ptrdiff_t _0755859698e89c1528f0bfb53ac8b035aff87a74 = 0x290; // Vector3[]
        constexpr ::std::ptrdiff_t _0b0312b5a5268163cdb1337ad37eaa8027931789 = 0x298; // Vector3[]
        constexpr ::std::ptrdiff_t _95dd03f889bfe2be605b3bd842829a48a28a60eb = 0x2A0; // float[]
        constexpr ::std::ptrdiff_t _a199f629c05e379ac52efc6478ba1824c1a77c4e = 0x2A8; // float
        constexpr ::std::ptrdiff_t _d6444f8c770a1f66b0022bae29e62f2fd55bcf71 = 0x2AC; // TimeUntil
        constexpr ::std::ptrdiff_t _079d52b862509494cbb153dcbc616f521c635e93 = 0x2B0; // FishingRodViewmodel
        constexpr ::std::ptrdiff_t _e8e37e8f41745787271872a98a8c8883bbea2e5a = 0x2B8; // BobberPreview
        constexpr ::std::ptrdiff_t _5e925d043797207c9c8a0c42f3b608fb10bbf772 = 0x2C0; // bool
        constexpr ::std::ptrdiff_t _e5c51deead32e64673f6bc1f359e4807e62ff12f = 0x2C8; // Sound
        constexpr ::std::ptrdiff_t _4860b98f51578060e31a87d2b131df148a8e5076 = 0x2D0; // Sound
        constexpr ::std::ptrdiff_t _e26444ad352d75527215b353638cb857bd5dbdff = 0x2D8; // SoundModulation.Modulator
        constexpr ::std::ptrdiff_t _6761dd51d88c331282576bf8156a28137e8823e4 = 0x2E0; // TimeUntil
        constexpr ::std::ptrdiff_t _f47887cdcd5427069a9f168ea126c78583afd600 = 0x2E4; // TimeSince
    } // namespace BaseFishingRod
    namespace FishingBobber {
        constexpr ::std::ptrdiff_t centerOfMass = 0x290; // Transform
        constexpr ::std::ptrdiff_t myRigidBody = 0x298; // Rigidbody
        constexpr ::std::ptrdiff_t lineAttachPoint = 0x2A0; // Transform
        constexpr ::std::ptrdiff_t bobberRoot = 0x2A8; // Transform
        constexpr ::std::ptrdiff_t HorizontalMoveSpeed = 0x2B0; // float
        constexpr ::std::ptrdiff_t PullAwayMoveSpeed = 0x2B4; // float
        constexpr ::std::ptrdiff_t SidewaysInputForce = 0x2B8; // float
        constexpr ::std::ptrdiff_t ReelInMoveSpeed = 0x2BC; // float
        constexpr ::std::ptrdiff_t _bcf8d3418bc4d75f9fe0450af50f9bf44dd81c6c = 0x2C0; // float
        constexpr ::std::ptrdiff_t _75a6d77b3a2906f470c36e51b0e31cbf65e3e5fb = 0x2C4; // Vector3
    } // namespace FishingBobber
    namespace OcclusionCulling {
        constexpr ::std::ptrdiff_t computeShader = 0x20; // ComputeShader
        constexpr ::std::ptrdiff_t usePixelShaderFallback = 0x28; // bool
        constexpr ::std::ptrdiff_t useAsyncReadAPI = 0x29; // bool
        constexpr ::std::ptrdiff_t _aef174bf62ea44eb39afa6b578b1119d9ae8041e = 0x30; // Camera
        constexpr ::std::ptrdiff_t static__4290284fc6e8dd14c3e6821fdaba69c099b13126 = 0x58; // OcclusionCulling.%8022c3f9e69bf495ef7a428adb6420139df89639
        constexpr ::std::ptrdiff_t static__ee848e7852b87f7e5e924184951ac6b1bf2e7924 = 0x60; // OcclusionCulling.%8022c3f9e69bf495ef7a428adb6420139df89639
        constexpr ::std::ptrdiff_t static__fc3bf0da8e64e434a21f5bd0b4baf34835dbc0e9 = 0x68; // OcclusionCulling.%8022c3f9e69bf495ef7a428adb6420139df89639
        constexpr ::std::ptrdiff_t _44679d367b33b3df1e29fe3a021476e03ba894b6 = 0x38; // Vector4[]
        constexpr ::std::ptrdiff_t _ffc278faec2924fd5b4f09610f8bbe715eab9cb5 = 0x40; // string[]
        constexpr ::std::ptrdiff_t _f78c6ba66423023318a1f3fa11ee5e81464dd4ca = 0x48; // float[]
        constexpr ::std::ptrdiff_t _2a0617a3f0c8fa9ee34e5ac1a246483a9b8bb32c = 0x50; // Material
        constexpr ::std::ptrdiff_t _b3a249d526ddeda1d7d5f9c3c69c883f887e605f = 0x58; // Material
        constexpr ::std::ptrdiff_t _e2897e8e2b5950ed9a816ecd6179fa9dfa9c9920 = 0x60; // Matrix4x4
        constexpr ::std::ptrdiff_t _d3828b50ccbd8b888078ae8508fec54bae125af8 = 0xA0; // Matrix4x4
        constexpr ::std::ptrdiff_t _c95b8e9ad7d20794cf75771ec8bb70885aa4acad = 0xE0; // Matrix4x4
        constexpr ::std::ptrdiff_t _481f03867cb6fd8ad2ae5648800cb86e348c8c86 = 0x120; // Matrix4x4
        constexpr ::std::ptrdiff_t _d711de38d8ae0de45dfc13d419c5a265456530af = 0x160; // Matrix4x4
        constexpr ::std::ptrdiff_t _09d5dd1f9464d96431b69b002338fae99144e219 = 0x1A0; // bool
        constexpr ::std::ptrdiff_t static__46642ede8ba5342d4c705126d0ed0c13fa53dc6b = 0x70; // OcclusionCulling
        constexpr ::std::ptrdiff_t static__58d439f13ce8f95011575c6632d5eb7b0d316d61 = 0x78; // bool
        constexpr ::std::ptrdiff_t static__6b16b590665a0f812046ef9cbae6d30f7ca056e8 = 0x88; // bool
        constexpr ::std::ptrdiff_t static__e7a3b114aafbcb76bdc699fbd14dfd2158e682ad = 0x89; // bool
        constexpr ::std::ptrdiff_t static__bf7d52a1f83413c628549314d4dfec605eb7f660 = 0x8C; // OcclusionCulling.DebugFilter
        constexpr ::std::ptrdiff_t debugSettings = 0x1A8; // OcclusionCulling.DebugSettings
        constexpr ::std::ptrdiff_t _af1da40c832e25b43f716ab7756d06ed9da5c433 = 0x1B0; // Material
        constexpr ::std::ptrdiff_t _a375dee8424b4b9b9d11f923f47d10257a510166 = 0x1B8; // Material
        constexpr ::std::ptrdiff_t _5bc97ba6599f2cb6dd86b73369e3e34d7859ec52 = 0x1C0; // Material
        constexpr ::std::ptrdiff_t _1514ae46474db8d6cbede8f33b4b6fa0f953c8bc = 0x1C8; // int
        constexpr ::std::ptrdiff_t _63c3e696814a3d90851d379cb44ab2ddbf64f07a = 0x1CC; // int
        constexpr ::std::ptrdiff_t _c80add539727b2a19bf1d727b906539771f27211 = 0x1D0; // int
        constexpr ::std::ptrdiff_t _efdb46f3906eb14a71fe61383086d0ac8ae4df21 = 0x1D8; // RenderTexture
        constexpr ::std::ptrdiff_t _29ee30340dba00b7994a505dd47471f3709727a8 = 0x1E0; // RenderTexture
        constexpr ::std::ptrdiff_t _68ffb8df146313577edaf25e04b4a55dcd6b0eb1 = 0x1E8; // RenderTexture[]
    } // namespace OcclusionCulling
    namespace OcclusionCulling.DebugSettings {
        constexpr ::std::ptrdiff_t log = 0x10; // bool
        constexpr ::std::ptrdiff_t showAllVisible = 0x11; // bool
        constexpr ::std::ptrdiff_t showMipChain = 0x12; // bool
        constexpr ::std::ptrdiff_t showMain = 0x13; // bool
        constexpr ::std::ptrdiff_t showMainLod = 0x14; // int
        constexpr ::std::ptrdiff_t showFallback = 0x18; // bool
        constexpr ::std::ptrdiff_t showStats = 0x19; // bool
        constexpr ::std::ptrdiff_t showScreenBounds = 0x1A; // bool
        constexpr ::std::ptrdiff_t showMask = 0x1C; // OcclusionCulling.DebugMask
        constexpr ::std::ptrdiff_t layerFilter = 0x20; // LayerMask
    } // namespace OcclusionCulling.DebugSettings
    namespace PlayerInput {
        constexpr ::std::ptrdiff_t _7f99e0112f6ed6eef2f4a0c3866053579062f187 = 0x28; // %6fec8c23ae31c5e40a14508b37357fbcc12830d0
        constexpr ::std::ptrdiff_t _24b8ed4cd88b1c45a11848c230009a5ebc68fc5f = 0x30; // bool
        constexpr ::std::ptrdiff_t _8fb99948c2d47600682794e5db66ffae018e0b92 = 0x34; // Quaternion
        constexpr ::std::ptrdiff_t _7dbb258a52982fb6939048148468ab05401034f1 = 0x44; // Vector3
        constexpr ::std::ptrdiff_t _4f89c6012f8d7db1d9a8c7405ef5dd383bd7fc6e = 0x50; // Vector3
        constexpr ::std::ptrdiff_t _10b05f1120c02e3706278da693c63a947bd99cbe = 0x5C; // bool
        constexpr ::std::ptrdiff_t _e0a5157d260f6515380c76dbb740eeb246d0497e = 0x60; // float
        constexpr ::std::ptrdiff_t _c55723cde397256ce4ec1d5dd62465bf95637ee9 = 0x64; // Quaternion
        constexpr ::std::ptrdiff_t _b1f87d9d4a21b4931b5a6434939269635c63598f = 0x74; // Vector3
        constexpr ::std::ptrdiff_t _44c33450a1cdee6ba96a0f456895d6efe027b813 = 0x8C; // Vector2
        constexpr ::std::ptrdiff_t _fdd679347dffba40f898269ce74f688addaa7f81 = 0x94; // float
        constexpr ::std::ptrdiff_t _67e3fe5f62828bbe6c67e102d60a4711e6350de2 = 0x98; // int
        constexpr ::std::ptrdiff_t _daa13dc0a81b5bff6d385346a88e1769089c65a7 = 0x9C; // int
        constexpr ::std::ptrdiff_t _cb570c76ee92c879fe3af114b3a57b7fbdff83a8 = 0xA0; // bool
        constexpr ::std::ptrdiff_t _1b6bcce684035291fc4bb650b4fe41e8b8210f72 = 0xA1; // bool
        constexpr ::std::ptrdiff_t _e34cbb839383844247970d5e41b9cd1b1b36f5cd = 0xA2; // bool
        constexpr ::std::ptrdiff_t _c37a5b813ddfd239094bdbb61e949a6b3f10c505 = 0xA8; // NetworkableId
        constexpr ::std::ptrdiff_t _80f9397e8142a02c34d43f5066a105609449818c = 0xB0; // Vector3
        constexpr ::std::ptrdiff_t _ab0e756ea95629e2beb5142f8cb85c1471480cb8 = 0xBC; // Vector3
        constexpr ::std::ptrdiff_t _835f1b5ca469fed18048b49c30ad9b348ec4b9dc = 0xC8; // int
        constexpr ::std::ptrdiff_t _10ec5d33ba68b2f2c6856482648e659b7d696b3f = 0xCC; // bool
    } // namespace PlayerInput
    namespace ItemDefinition {
        constexpr ::std::ptrdiff_t itemid = 0x20; // int
        constexpr ::std::ptrdiff_t shortname = 0x28; // string
        constexpr ::std::ptrdiff_t displayName = 0x30; // Translate.Phrase
        constexpr ::std::ptrdiff_t displayDescription = 0x38; // Translate.Phrase
        constexpr ::std::ptrdiff_t iconSprite = 0x40; // Sprite
        constexpr ::std::ptrdiff_t category = 0x48; // ItemCategory
        constexpr ::std::ptrdiff_t selectionPanel = 0x4C; // ItemSelectionPanel
        constexpr ::std::ptrdiff_t maxDraggable = 0x50; // int
        constexpr ::std::ptrdiff_t itemType = 0x54; // %3dd474af39c51738fc617d642fbb95d04da13612.ContentsType
        constexpr ::std::ptrdiff_t amountType = 0x58; // ItemDefinition.AmountType
        constexpr ::std::ptrdiff_t occupySlots = 0x5C; // ItemSlot
        constexpr ::std::ptrdiff_t stackable = 0x60; // int
        constexpr ::std::ptrdiff_t volume = 0x64; // int
        constexpr ::std::ptrdiff_t quickDespawn = 0x68; // bool
        constexpr ::std::ptrdiff_t blockStealingInSafeZone = 0x69; // bool
        constexpr ::std::ptrdiff_t tutorialAllowance = 0x6C; // BasePlayer.TutorialItemAllowance
        constexpr ::std::ptrdiff_t rarity = 0x70; // Rarity
        constexpr ::std::ptrdiff_t despawnRarity = 0x74; // Rarity
        constexpr ::std::ptrdiff_t spawnAsBlueprint = 0x78; // bool
        constexpr ::std::ptrdiff_t inventoryGrabSound = 0x80; // SoundDefinition
        constexpr ::std::ptrdiff_t inventoryDropSound = 0x88; // SoundDefinition
        constexpr ::std::ptrdiff_t physImpactSoundDef = 0x90; // SoundDefinition
        constexpr ::std::ptrdiff_t condition = 0x98; // ItemDefinition.Condition
        constexpr ::std::ptrdiff_t hidden = 0xB0; // bool
        constexpr ::std::ptrdiff_t flags = 0xB4; // ItemDefinition.Flag
        constexpr ::std::ptrdiff_t hideSelectedPanel = 0xB8; // bool
        constexpr ::std::ptrdiff_t steamItem = 0xC0; // SteamInventoryItem
        constexpr ::std::ptrdiff_t steamDlc = 0xC8; // SteamDLCItem
        constexpr ::std::ptrdiff_t Parent = 0xD0; // ItemDefinition
        constexpr ::std::ptrdiff_t worldModelPrefab = 0xD8; // GameObjectRef
        constexpr ::std::ptrdiff_t treatAsComponentForRepairs = 0xE8; // bool
        constexpr ::std::ptrdiff_t AlignWorldModelOnDrop = 0xE9; // bool
        constexpr ::std::ptrdiff_t WorldModelDropOffset = 0xEC; // Vector3
        constexpr ::std::ptrdiff_t isRedirectOf = 0xF8; // ItemDefinition
        constexpr ::std::ptrdiff_t redirectVendingBehaviour = 0x100; // ItemDefinition.RedirectVendingBehaviour
        constexpr ::std::ptrdiff_t _8c6d7914aaaa9839c34738e3eecf742dee52b142 = 0x108; // ItemMod[]
        constexpr ::std::ptrdiff_t Traits = 0x110; // BaseEntity.TraitFlag
        constexpr ::std::ptrdiff_t _15563d0bc763b5d6706e2d8966bd9fdc4b39e79e = 0x120; // IPlayerItemDefinition[]
        constexpr ::std::ptrdiff_t panel = 0x128; // GameObject
        constexpr ::std::ptrdiff_t _b3efcc10830a6f25605da19f67dc0b6b0dad679b = 0x130; // ItemModWearable
        constexpr ::std::ptrdiff_t _f27fd5229b215694ea58711c74775821bc01af2d = 0x138; // ItemModBurnable
        constexpr ::std::ptrdiff_t _59f1875fd9c8092d0ab7cd6e8a37d8c8d0f9ffca = 0x140; // ItemModCookable
        constexpr ::std::ptrdiff_t _bc3e8c6f26baba207f15b0bd85a109b6b43c0b3e = 0x148; // bool
        constexpr ::std::ptrdiff_t _7a9f8e10bbf50accf1899ad173b8ddef0eed3136 = 0x149; // bool
        constexpr ::std::ptrdiff_t _1b011fae00e001e3e954f2fe4d2f950d8e22c266 = 0x14A; // bool
        constexpr ::std::ptrdiff_t _222bf9288012b8025eb4c776778367d35fe863d1 = 0x150; // ItemDefinition[]
    } // namespace ItemDefinition
    namespace PlayerEyes {
        constexpr ::std::ptrdiff_t thirdPersonSleepingOffset = 0x28; // Vector3
        constexpr ::std::ptrdiff_t defaultLazyAim = 0x38; // LazyAimProperties
        constexpr ::std::ptrdiff_t _4b24a7a71a0c56645c90481aa971d409d7f57e41 = 0x4C; // Quaternion
        constexpr ::std::ptrdiff_t _28c25ac8d81ea81798bdac8945b2badc28ccb959 = 0x5C; // Vector3
        constexpr ::std::ptrdiff_t _6593d2a10643bbad003ee096cc986c5f99555f06 = 0x68; // Quaternion
        constexpr ::std::ptrdiff_t _f7429c8ce35a504bed3a1218958a926c90fb2a0b = 0x78; // Quaternion
        constexpr ::std::ptrdiff_t _78c38dbb378b9a68f8ae1994f1a3bdf1d20a6a38 = 0x88; // float
        constexpr ::std::ptrdiff_t _6773a0c47b60906c6b6df1a1bdd8f768e2021f95 = 0x8C; // bool
    } // namespace PlayerEyes
    namespace Projectile {
        constexpr ::std::ptrdiff_t initialVelocity = 0x20; // Vector3
        constexpr ::std::ptrdiff_t drag = 0x2C; // float
        constexpr ::std::ptrdiff_t gravityModifier = 0x30; // float
        constexpr ::std::ptrdiff_t thickness = 0x34; // float
        constexpr ::std::ptrdiff_t initialDistance = 0x38; // float
        constexpr ::std::ptrdiff_t remainInWorld = 0x3C; // bool
        constexpr ::std::ptrdiff_t stickProbability = 0x40; // float
        constexpr ::std::ptrdiff_t breakProbability = 0x44; // float
        constexpr ::std::ptrdiff_t conditionLoss = 0x48; // float
        constexpr ::std::ptrdiff_t ricochetChance = 0x4C; // float
        constexpr ::std::ptrdiff_t penetrationPower = 0x50; // float
        constexpr ::std::ptrdiff_t waterIntegrityLoss = 0x54; // float
        constexpr ::std::ptrdiff_t damageProperties = 0x58; // DamageProperties
        constexpr ::std::ptrdiff_t damageDistances = 0x60; // MinMax
        constexpr ::std::ptrdiff_t damageMultipliers = 0x68; // MinMax
        constexpr ::std::ptrdiff_t damageTypes = 0x70; // List<DamageTypeEntry>
        constexpr ::std::ptrdiff_t rendererToScale = 0x78; // ScaleRenderer
        constexpr ::std::ptrdiff_t firstPersonRenderer = 0x80; // ScaleRenderer
        constexpr ::std::ptrdiff_t createDecals = 0x88; // bool
        constexpr ::std::ptrdiff_t doDefaultHitEffects = 0x89; // bool
        constexpr ::std::ptrdiff_t flybySound = 0x90; // SoundDefinition
        constexpr ::std::ptrdiff_t flybySoundDistance = 0x98; // float
        constexpr ::std::ptrdiff_t closeFlybySound = 0xA0; // SoundDefinition
        constexpr ::std::ptrdiff_t closeFlybyDistance = 0xA8; // float
        constexpr ::std::ptrdiff_t tumbleSpeed = 0xAC; // float
        constexpr ::std::ptrdiff_t tumbleAxis = 0xB0; // Vector3
        constexpr ::std::ptrdiff_t swimScale = 0xBC; // Vector3
        constexpr ::std::ptrdiff_t swimSpeed = 0xC8; // Vector3
        constexpr ::std::ptrdiff_t _1eda29c2de607992e09747cebf2fd9fc8ce74b60 = 0xD8; // BasePlayer
        constexpr ::std::ptrdiff_t _de0c8f041bc88a503f418e04d9cb069f0940d746 = 0xE0; // AttackEntity
        constexpr ::std::ptrdiff_t _d11b1148ffff6f565fe32ac6c5f8948d60750cef = 0xE8; // Projectile
        constexpr ::std::ptrdiff_t _e895c472da811a9084ae79669c19fb92b772ef73 = 0xF0; // ItemModProjectile
        constexpr ::std::ptrdiff_t _5496623e4c98a2d6803f4d6582d7788ebbf7ac51 = 0xF8; // int
        constexpr ::std::ptrdiff_t _20670f88f31a3e914277bc4a42d6f1c9afa11f84 = 0xFC; // int
        constexpr ::std::ptrdiff_t _db10d2f8024420258352638681500b752447c5ea = 0x100; // bool
        constexpr ::std::ptrdiff_t _11e43a0fa71b1172e29753571526747996773827 = 0x101; // bool
        constexpr ::std::ptrdiff_t _ce68c6616cadaef73b7ebcc3cd2ecf301703b4ca = 0x104; // float
        constexpr ::std::ptrdiff_t _a7270c78d40f552d336368e29d2a57b522231773 = 0x108; // float
        constexpr ::std::ptrdiff_t _4cc2e7bd9413b61f812608e01ec45c40a5ea1916 = 0x10C; // Projectile.%db9276046b27b856581640bdd1adf6775f086172
        constexpr ::std::ptrdiff_t _7419be98aa301e2364c09b70fa2a57961c31b5f4 = 0x11C; // bool
        constexpr ::std::ptrdiff_t _79d3b8cd742a243cc5ead27633e657c7e2d8e360 = 0x11D; // bool
        constexpr ::std::ptrdiff_t _ff622c0537c2ca9849183fe1dca22f94836a2b87 = 0x120; // float
        constexpr ::std::ptrdiff_t _833e2e6571b8d6b4e93316f65aa2a14e05949698 = 0x124; // Vector3
        constexpr ::std::ptrdiff_t _2bc572089342346808f17b42a488c95825bc140e = 0x130; // Vector3
        constexpr ::std::ptrdiff_t _92df1d4c69fdd9c4ceb067183be900b9f7fb7444 = 0x13C; // float
        constexpr ::std::ptrdiff_t _5b184290571e0fb3c4e1562397ae3f46c162bee2 = 0x140; // float
        constexpr ::std::ptrdiff_t _e00ef537b581ff428e8bdb5c0e89c6e659ed316c = 0x144; // float
        constexpr ::std::ptrdiff_t _0586876fa849cb00318c12d10b4c064d8b6f1b92 = 0x148; // Vector3
        constexpr ::std::ptrdiff_t _e266ad615f3f1c43a311d81ab2bbed458cb5c907 = 0x154; // Vector3
        constexpr ::std::ptrdiff_t _e584a402fefbb4e6791ef64de3f6224a825a5e4e = 0x160; // Vector3
        constexpr ::std::ptrdiff_t _58828f0425b8b19ee70d64eaa46741f1b63b798a = 0x16C; // float
        constexpr ::std::ptrdiff_t _a7e114acde66f7600622914b50954446f74d3b0e = 0x170; // bool
        constexpr ::std::ptrdiff_t _e9dffc5407c794b26dd7ecc0c77a3f0d23a0d33c = 0x171; // bool
        constexpr ::std::ptrdiff_t _8d5da11bc8d3311f7d8759b2882736d3ab8e5835 = 0x172; // bool
        constexpr ::std::ptrdiff_t _ef1e80e442a8ce6f5166a499b00e7e77022a4bb4 = 0x173; // bool
        constexpr ::std::ptrdiff_t _4f15e0d7bfd4377ed60b9d57b69bb3be0b94be7b = 0x174; // bool
        constexpr ::std::ptrdiff_t _4defd2ea9c7b34b466080e0606fa1eec303c6e2e = 0x178; // Plane
        constexpr ::std::ptrdiff_t _79f375c0dbb9a4ab79cdd3231117c36804bcc951 = 0x188; // Ray
        constexpr ::std::ptrdiff_t _daa37a191608fb523911e1591245fab464aaf65b = 0x1A0; // Action
        constexpr ::std::ptrdiff_t _691fa89f8e408ef7e1bb61e7c6644ff2ac0a8b58 = 0x1A8; // %81ae8a405eb5f1c3a9391910cd979e79536f8914
        constexpr ::std::ptrdiff_t _ec1365dfffeaf2914ab73d3c1166e20d0c1f4392 = 0x1B0; // float
    } // namespace Projectile
    namespace ItemModProjectile {
        constexpr ::std::ptrdiff_t projectileObject = 0x20; // GameObjectRef
        constexpr ::std::ptrdiff_t mods = 0x28; // ItemModProjectileMod[]
        constexpr ::std::ptrdiff_t ammoType = 0x30; // AmmoTypes
        constexpr ::std::ptrdiff_t numProjectiles = 0x34; // int
        constexpr ::std::ptrdiff_t projectileSpread = 0x38; // float
        constexpr ::std::ptrdiff_t projectileVelocity = 0x3C; // float
        constexpr ::std::ptrdiff_t projectileVelocitySpread = 0x40; // float
        constexpr ::std::ptrdiff_t useCurve = 0x44; // bool
        constexpr ::std::ptrdiff_t spreadScalar = 0x48; // AnimationCurve
        constexpr ::std::ptrdiff_t attackEffectOverride = 0x50; // GameObjectRef
        constexpr ::std::ptrdiff_t barrelConditionLoss = 0x58; // float
        constexpr ::std::ptrdiff_t category = 0x60; // string
    } // namespace ItemModProjectile
} // namespace blazedumper
