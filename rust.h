#pragma once
#include <cstdint>

namespace blazedumper {
    constexpr ::std::ptrdiff_t BaseEntity_TypeInfo = 0x3C98670;
    constexpr ::std::ptrdiff_t Facepunch_Input_TypeInfo = 0x3C63740;
    constexpr ::std::ptrdiff_t MainCamera_TypeInfo = 0x3C7A7E8;
    constexpr ::std::ptrdiff_t System_Collections_Generic_List_BaseGameMode_TypeInfo = 0x3CB5120;
    constexpr ::std::ptrdiff_t BaseGameMode_TypeInfo = 0x3C988D8;
    constexpr ::std::ptrdiff_t TOD_Sky_TypeInfo = 0x3C471C8;
    constexpr ::std::ptrdiff_t ConsoleSystem_Index_TypeInfo = 0x3C8B5F8;
    constexpr ::std::ptrdiff_t BasePlayer_TypeInfo = 0x3C99590;
    constexpr ::std::ptrdiff_t OcclusionCulling_TypeInfo = 0x3C8DB98;
    constexpr ::std::ptrdiff_t BaseNetworkable_TypeInfo = 0x3C99260;
    namespace BasePlayer {
        constexpr ::std::ptrdiff_t _0e9ffe87f47783be869a74a4b0b41931c224be53 = 0x290; // %39cc38a4d1a6c57d173d5734239e2f25eb5ffb1a
        constexpr ::std::ptrdiff_t _c18101a2829731a28dd4271e98e29fd8f516fb6d = 0x308; // %39cc38a4d1a6c57d173d5734239e2f25eb5ffb1a
        constexpr ::std::ptrdiff_t _aa2ccf9f0c2b609433645436bf6259edb8db8c88 = 0x380; // %39cc38a4d1a6c57d173d5734239e2f25eb5ffb1a
        constexpr ::std::ptrdiff_t _49c94e0903a7950459c4768de84efe3942ac923a = 0x3F8; // %39cc38a4d1a6c57d173d5734239e2f25eb5ffb1a
        constexpr ::std::ptrdiff_t _6fec06276198fcbb8e58c39e2069347120d1f831 = 0x470; // %39cc38a4d1a6c57d173d5734239e2f25eb5ffb1a
        constexpr ::std::ptrdiff_t _ee3faa3eb6ba26c9466e7a90afd1dfbb4e377c89 = 0x4E8; // %39cc38a4d1a6c57d173d5734239e2f25eb5ffb1a
        constexpr ::std::ptrdiff_t _726da61c4e4edc08ad140f7d409413a3ce20e8fb = 0x560; // %39cc38a4d1a6c57d173d5734239e2f25eb5ffb1a
        constexpr ::std::ptrdiff_t _c890b3fae482ac37e1ce91893be75f614f6ac9e6 = 0x5D8; // %39cc38a4d1a6c57d173d5734239e2f25eb5ffb1a
        constexpr ::std::ptrdiff_t _0643387cf6c410dd36d413f8c9590bd874265f1b = 0x650; // %39cc38a4d1a6c57d173d5734239e2f25eb5ffb1a
        constexpr ::std::ptrdiff_t _8065cec86323fc37760e65325f0e311740430ba1 = 0x6C8; // %39cc38a4d1a6c57d173d5734239e2f25eb5ffb1a
        constexpr ::std::ptrdiff_t _8755d3b208a7c242eeff9ea75779f112f634f46e = 0x740; // %39cc38a4d1a6c57d173d5734239e2f25eb5ffb1a
        constexpr ::std::ptrdiff_t _852eb1ffe32d692fb29b2ef3e3bf13648ec3f1c1 = 0x7B8; // %39cc38a4d1a6c57d173d5734239e2f25eb5ffb1a
        constexpr ::std::ptrdiff_t _e71d478e8e53cfc2a75140860a56666d40dc8933 = 0x830; // %39cc38a4d1a6c57d173d5734239e2f25eb5ffb1a
        constexpr ::std::ptrdiff_t _5c38a31751d73a7afc941d46b00da45a36a12f33 = 0x8A8; // long
        constexpr ::std::ptrdiff_t _f0e8519974f35021077e205c72286f844a1889bd = 0x8B0; // PlayerModel
        constexpr ::std::ptrdiff_t _b5136ac7249d53b5543cd260ced0f505fb970ad2 = 0x8B8; // bool
        constexpr ::std::ptrdiff_t _8622feb40739b94355f495631dd3a86dfcfba680 = 0x8B9; // bool
        constexpr ::std::ptrdiff_t _ac0cf082392d2fe8060d47923a3b91d34a77f64a = 0x8C0; // PlayerVoiceRecorder
        constexpr ::std::ptrdiff_t _e61eb10d4503cb82c36771ae620098c5972ef4e8 = 0x8C8; // PlayerVoiceSpeaker
        constexpr ::std::ptrdiff_t _84168fbd45da2393ca3662b4f24f3d7a6c612f5c = 0x8D0; // PlayerInput
        constexpr ::std::ptrdiff_t _6b9782b733c689bcf42505f969cfff338f41d0d2 = 0x8D8; // BaseMovement
        constexpr ::std::ptrdiff_t _cae22e6ef840422f52ce27beb1f349c99c6401e9 = 0x8E0; // BaseCollision
        constexpr ::std::ptrdiff_t _0e0f46c6409e98b74f984e70cf6433f22720c97c = 0x8E8; // int
        constexpr ::std::ptrdiff_t _c6da14fa5a5fecf2289b7b87a3c8ce63e4c1d731 = 0x8EC; // int
        constexpr ::std::ptrdiff_t _1d29d8946baefc0ac7b595c8b0063db5a4698c6a = 0x8F0; // uint
        constexpr ::std::ptrdiff_t _4496c358d3fe9e57aac077b85b69169d1efde039 = 0x8F8; // GameObject
        constexpr ::std::ptrdiff_t _2831ceac68d27bbca6b407951ce0434a2a985d0c = 0x900; // BaseEntity
        constexpr ::std::ptrdiff_t _8a22be0a850b96aae3b0a4b6900399d497810971 = 0x908; // Collider
        constexpr ::std::ptrdiff_t _745099cd8c189354f3b064139745462cd10b3e37 = 0x910; // Vector3
        constexpr ::std::ptrdiff_t _2924169ce3592f7efa143246823b70cf7e9b6ba9 = 0x91C; // float
        constexpr ::std::ptrdiff_t _a3270870295adf833e762117415af0ee88b92d8a = 0x920; // bool
        constexpr ::std::ptrdiff_t _cf0a1fd23430a41d910ba990dcf62addf30e6e3f = 0x921; // bool
        constexpr ::std::ptrdiff_t _9e48bab8d15dd10596aa2d3009669cb84c3bd9f7 = 0x922; // bool
        constexpr ::std::ptrdiff_t _0e2babfe8862763ffd69cc98a72a366bc293c7ae = 0x923; // bool
        constexpr ::std::ptrdiff_t _9080ea68024e0ae8eeae92dc8b9b128fee304469 = 0x924; // bool
        constexpr ::std::ptrdiff_t _96992a58945a4e0c63c617aac4937b2d57daf7be = 0x925; // bool
        constexpr ::std::ptrdiff_t _da33ec216686e88dab16805b097732a599fc3d90 = 0x928; // uint
        constexpr ::std::ptrdiff_t _d3c2f522242ab613947c55872d219788c48c356a = 0x92C; // TimeSince
        constexpr ::std::ptrdiff_t _c24cbe59f7c071e13d92ae7fd3a01f3e99f6ffed = 0x930; // BasePlayer.CameraMode
        constexpr ::std::ptrdiff_t _f0b26b8d70110a0b046cba960bfc2df0a713b6a9 = 0x934; // BasePlayer.CameraMode
        constexpr ::std::ptrdiff_t _a65fc7837c0e2a340c8f91cdd274d7929df49490 = 0x938; // Vector3
        constexpr ::std::ptrdiff_t _af5e25970e0895a656d4b97fb0a39dd312d9a2a1 = 0x944; // Vector3
        constexpr ::std::ptrdiff_t _35f9caa8895aa5e664f35d5ea7f5ca9c43cd929b = 0x950; // bool
        constexpr ::std::ptrdiff_t GestureViewModel = 0x958; // ViewModel
        constexpr ::std::ptrdiff_t _645bd4c2d2cc50124890262de13924b1beb3c95d = 0x960; // RespawnInformation
        constexpr ::std::ptrdiff_t _06142282e56b5d9a6d91eb406bb5d178a7428803 = 0x968; // float
        constexpr ::std::ptrdiff_t _5d353eae4623f4e358c4d22eed323a3969bca17a = 0x96C; // TimeSince
        constexpr ::std::ptrdiff_t _58bb86a5d4fcba43200b06e0c037546aa74a0937 = 0x970; // RealTimeSince
        constexpr ::std::ptrdiff_t _78493223fa77a77e213edb96fd4eb1245f6f2bff = 0x974; // float
        constexpr ::std::ptrdiff_t _1c23a29dea66a0550d31e7f067de947a9cfe603e = 0x978; // float
        constexpr ::std::ptrdiff_t _aeb880db7186565ed04fb4c728a361fbb84e2420 = 0x97C; // float
        constexpr ::std::ptrdiff_t _cd55b73e05ea6fbb1cfb044d89ce9250be714023 = 0x980; // %4a2c4ec6279948bccd8638f1be8f7881be5d131a
        constexpr ::std::ptrdiff_t _871da4b8742f2d864a74f5c177ae404e01c9c56f = 0x988; // Vector3
        constexpr ::std::ptrdiff_t _ec8c4e77f686263a3e0005393d0e6a3aa3a7ceec = 0x994; // bool
        constexpr ::std::ptrdiff_t _baca792757ec9e9299d83ac0cdb575489e2c9569 = 0x9A0; // Queue<string>
        constexpr ::std::ptrdiff_t gestureList = 0x9A8; // GestureCollection
        constexpr ::std::ptrdiff_t _4c0fb165a7ddb0e2f42e51d50437a0828a0bf295 = 0x9B0; // TimeUntil
        constexpr ::std::ptrdiff_t _e113d9b16ed5639591357b44e98a671f3bb56589 = 0x9B4; // TimeSince
        constexpr ::std::ptrdiff_t _d71d6221929ec04014feab986c435addb92eafdd = 0x9B8; // GestureConfig
        constexpr ::std::ptrdiff_t _888253631b16d227245e97126f6081a07ba883a3 = 0x9C0; // HeldEntity
        constexpr ::std::ptrdiff_t _9ac0c0ea5cb324a68a09b18f02148628737f608e = 0x9C8; // float
        constexpr ::std::ptrdiff_t _29cb2599912ea7b78b10214ef4f2c9815b7835f6 = 0x9CC; // float
        constexpr ::std::ptrdiff_t currentTeam = 0x9D0; // ulong
        constexpr ::std::ptrdiff_t _815b02360e3ebbce8c7e0c29225f0fdbf613b7d2 = 0x9D8; // PlayerTeam
        constexpr ::std::ptrdiff_t _4d32fff1fc4f5ef35ad302b95de549910c4aef61 = 0x9E0; // ListHashSet<ulong>
        constexpr ::std::ptrdiff_t _2e3e97f45bcf313979a6823a8fe51d86de73d530 = 0x9E8; // float
        constexpr ::std::ptrdiff_t _7913850d126c083b7e58b30296c44ba4700e3ed8 = 0x9F0; // ulong
        constexpr ::std::ptrdiff_t _a89ee8ae54a759accf025b4c22e34581ace9a836 = 0x9F8; // int
        constexpr ::std::ptrdiff_t _095af46f0b734ebf6492f3aec2eb10673748202e = 0xA00; // string
        constexpr ::std::ptrdiff_t _cbd603d06e26ab1d665c9d7080f6b894e1ba15b2 = 0xA08; // string
        constexpr ::std::ptrdiff_t _c6c45c110cf53f36230337874eaa7f9791caab21 = 0xA18; // List<MapNote>
        constexpr ::std::ptrdiff_t _a98bbbd1b28a9b6bc33e059dfd3c2995d9bf776e = 0xA20; // MapNote
        constexpr ::std::ptrdiff_t _4833f6bdcb57f6d3a07e734fcb4f20403b0795ca = 0xA28; // bool
        constexpr ::std::ptrdiff_t missions = 0xA30; // List<BaseMission.%72d3370e1a81749292c1d75104195e7e3d013182>
        constexpr ::std::ptrdiff_t _ca9e45c2591de70d0b9b21fab563757d370107eb = 0xA38; // int
        constexpr ::std::ptrdiff_t _7b66a66ad71bc22d1f62793e8ae2c95381fd18f8 = 0xA40; // ModelState
        constexpr ::std::ptrdiff_t _e8f7a95daf997b39b0ac6717711ef5b59b0801ff = 0xA48; // %d2674a9f41d265275034faa20aefc00d085e5548
        constexpr ::std::ptrdiff_t _a38730cc94e7a8177a36c1161ac4eaaa10d035a2 = 0xA58; // float
        constexpr ::std::ptrdiff_t _9d0a0530f6e357110773689b7a053f99cec676e4 = 0xA5C; // bool
        constexpr ::std::ptrdiff_t PetEntity = 0xA60; // BaseEntity
        constexpr ::std::ptrdiff_t _b7f9e0c340a13db8a0154f5139be32742541baf7 = 0xA68; // float
        constexpr ::std::ptrdiff_t _217b7fedea9bb34507aea79e1fca161431330ecb = 0xA6C; // uint
        constexpr ::std::ptrdiff_t _01701a4e1cd1f6aad45021715e8782f17f288e87 = 0xA70; // NetworkableId
        constexpr ::std::ptrdiff_t _b36cfd642676e027f1929d48097c66481dd74338 = 0xA78; // List<MapNote>
        constexpr ::std::ptrdiff_t _a2ffaf6aefe134bf52a1cbe490540defcf0af35b = 0xA80; // bool
        constexpr ::std::ptrdiff_t _add0d3550b7e2f18238904caadf0c04d1658ac0c = 0xA84; // TimeSince
        constexpr ::std::ptrdiff_t _233d2f6130da142807bcff81daf8408e6ac65036 = 0xA88; // float
        constexpr ::std::ptrdiff_t _aafc9ac15865213cca79d73752adb2dd5b0a2e4e = 0xA90; // BuildingPrivlidge
        constexpr ::std::ptrdiff_t _7eecea6e84ba1fdc2a4213c74db36f6bbafb15d0 = 0xA98; // float
        constexpr ::std::ptrdiff_t _40b7495219bae42a3b8cb95eeefad9b9ce4be92e = 0xA9C; // bool
        constexpr ::std::ptrdiff_t _d3b2430c5cf239408a8a8011a0585f07be407f99 = 0xAA0; // float
        constexpr ::std::ptrdiff_t _5bd01731afe57970da207d9fc74a17ec9313e277 = 0xAA4; // bool
        constexpr ::std::ptrdiff_t _17a28e34eabbd6d3c7f8805a73928661930d399b = 0xAA8; // BaseEntity
        constexpr ::std::ptrdiff_t _ffead05140dda4b629faaa3d5b3a365a35965a08 = 0xAB0; // float
        constexpr ::std::ptrdiff_t _7cb81196aa7b279e28dd67dfbc344b55c5a71a73 = 0xAB4; // int
        constexpr ::std::ptrdiff_t _ba9b1636896dd64c4e59b3a243b3e17e7fa5e160 = 0xAB8; // TimeSince
        constexpr ::std::ptrdiff_t _a318d6fb9d40a0250f7aa72a920f8addfbd1a843 = 0xABC; // float
        constexpr ::std::ptrdiff_t _8ecef852a2db2c30866a722830ec25df86da8014 = 0xAC0; // float
        constexpr ::std::ptrdiff_t _412783d19c8000d0553ef4770b02cdc19dd93b53 = 0xAC8; // Stopwatch
        constexpr ::std::ptrdiff_t _480b5205dba6c6e6483fa05a83c3fe6fa5df5944 = 0xAD0; // PlayerTick
        constexpr ::std::ptrdiff_t _f487dfe9fe9e0b361912248bec98fd4d6cb97212 = 0xAD8; // BasePlayer.TutorialItemAllowance
        constexpr ::std::ptrdiff_t _261ff0d3363635a8a573f4be740c3f398b475187 = 0xADC; // float
        constexpr ::std::ptrdiff_t _c67e674ec9e94635c77745050719a024cbab4a6b = 0xAE0; // float
        constexpr ::std::ptrdiff_t _a4d1e06ef054137d67bba9198b5da28834cd5096 = 0xAE4; // float
        constexpr ::std::ptrdiff_t _39051991bb41e72975096689174bd5e93c874a75 = 0xAE8; // bool
        constexpr ::std::ptrdiff_t fallDamageEffect = 0xAF0; // GameObjectRef
        constexpr ::std::ptrdiff_t drownEffect = 0xAF8; // GameObjectRef
        constexpr ::std::ptrdiff_t playerFlags = 0xB00; // BasePlayer.PlayerFlags
        constexpr ::std::ptrdiff_t _866fdf84c97d86fb33691ee69e6a30118ad034e2 = 0xB08; // %8e44ae8fd00cfce8856b0d1590026628bcb430d9<PlayerEyes>
        constexpr ::std::ptrdiff_t _fa93f1c40ee3eedf721b4ef7bff0e0a7454da3d6 = 0xB10; // %8e44ae8fd00cfce8856b0d1590026628bcb430d9<PlayerInventory>
        constexpr ::std::ptrdiff_t _35c4d8c3f1c240fcb3bd80e4171a768e1ff0a48b = 0xB18; // PlayerBlueprints
        constexpr ::std::ptrdiff_t _f53f0828872e9017ad76d880e40b5ad57e5716a8 = 0xB20; // PlayerMetabolism
        constexpr ::std::ptrdiff_t _320e7c4508b0ed2c526849b39561901d01d1ef26 = 0xB28; // PlayerModifiers
        constexpr ::std::ptrdiff_t _6a337d8a2c55f751b1888730ec06a01ce0e4d00e = 0xB30; // %8e44ae8fd00cfce8856b0d1590026628bcb430d9<CapsuleCollider>
        constexpr ::std::ptrdiff_t _c91bf0d9b2e29c6ed913205f3b0b334a8037ca98 = 0xB38; // %6371c59e4f45de92fb965003f8da991beaa336ef
        constexpr ::std::ptrdiff_t _688f15c9badf6e2a5a387661cdf942c5f9e5ea89 = 0xB40; // Rigidbody
        constexpr ::std::ptrdiff_t _16852cddead3e3b61eef01234c1d10753f60ff4a = 0xB50; // string
        constexpr ::std::ptrdiff_t _352ddf9b500eeb693c1f6529787e3c6347e2dfb4 = 0xB58; // int
        constexpr ::std::ptrdiff_t _1a9afdacda88ed7e7fbff03bb05a29d145a6923d = 0xB5C; // int
        constexpr ::std::ptrdiff_t _02418d8b36f85b9abe51a5a6eec26b1813b00466 = 0xB60; // string
        constexpr ::std::ptrdiff_t _51940e53b2b792676844ee695a4ee9a8db9f9f48 = 0xB68; // string
        constexpr ::std::ptrdiff_t _43073b682aab85f23231f5303de7fc973d1efeba = 0xB70; // BasePlayer.CapsuleColliderInfo
        constexpr ::std::ptrdiff_t _c138b06b9d3b7b744f7b89a1b5d0089f6708fa57 = 0xB84; // BasePlayer.CapsuleColliderInfo
        constexpr ::std::ptrdiff_t _c6879bf18818e56d2136c61a1512459ab291d932 = 0xB98; // BasePlayer.CapsuleColliderInfo
        constexpr ::std::ptrdiff_t _259b5966dd549f195b266e531c0357ea5ac798a1 = 0xBAC; // BasePlayer.CapsuleColliderInfo
        constexpr ::std::ptrdiff_t _618491572ae4d89d224f089f66f9f0a59b2a66df = 0xBC0; // ProtectionProperties
        constexpr ::std::ptrdiff_t _d1513b451ed465953ba758cfe53b035813bd96cb = 0xBC8; // float
        constexpr ::std::ptrdiff_t _01e6f1814670fe163f0b78766d18b4cc03d3e841 = 0xBCC; // float
        constexpr ::std::ptrdiff_t weaponMoveSpeedScale = 0xBD0; // float
        constexpr ::std::ptrdiff_t clothingBlocksAiming = 0xBD4; // bool
        constexpr ::std::ptrdiff_t clothingMoveSpeedReduction = 0xBD8; // float
        constexpr ::std::ptrdiff_t clothingWaterSpeedBonus = 0xBDC; // float
        constexpr ::std::ptrdiff_t clothingAccuracyBonus = 0xBE0; // float
        constexpr ::std::ptrdiff_t equippingBlocked = 0xBE4; // bool
        constexpr ::std::ptrdiff_t eggVision = 0xBE8; // float
        constexpr ::std::ptrdiff_t _165bf03de41b6e25d7d443454748d1aa33aa765a = 0xBF0; // PhoneController
        constexpr ::std::ptrdiff_t designingAIEntity = 0xBF8; // BaseEntity
    } // namespace BasePlayer
    namespace BaseEntity {
        constexpr ::std::ptrdiff_t _7c2c1050d999fbd8ef092f2c498fc891b54b8706 = 0x80; // Ragdoll
        constexpr ::std::ptrdiff_t _408891fc70311f644ab8348b78c7c10c43e0abd0 = 0x88; // %91ba30e7c8870759da7ea368cfc7962216b2c645
        constexpr ::std::ptrdiff_t _ee12fb51453a4ccb25eb2903ff839ec6588d31d9 = 0x90; // float
        constexpr ::std::ptrdiff_t _debe46441e9cc0906ca83199cda2b259a53c51cf = 0x98; // List<%39cc38a4d1a6c57d173d5734239e2f25eb5ffb1a>
        constexpr ::std::ptrdiff_t bounds = 0xA0; // Bounds
        constexpr ::std::ptrdiff_t impactEffect = 0xB8; // GameObjectRef
        constexpr ::std::ptrdiff_t enableSaving = 0xC0; // bool
        constexpr ::std::ptrdiff_t syncPosition = 0xC1; // bool
        constexpr ::std::ptrdiff_t model = 0xC8; // Model
        constexpr ::std::ptrdiff_t flags = 0xD0; // BaseEntity.Flags
        constexpr ::std::ptrdiff_t _c3a96964a466e77529e015ad37bb52356a30ece9 = 0xD4; // uint
        constexpr ::std::ptrdiff_t _2415bfd4cbe8c1b4ab8c81255067130bd6867d17 = 0xD8; // ulong
        constexpr ::std::ptrdiff_t _e410461fb7a6a49d4538d6fc8d950709f3a72c89 = 0xE0; // EntityComponentBase[]
        constexpr ::std::ptrdiff_t HasBrain = 0xE8; // bool
        constexpr ::std::ptrdiff_t _afb3ab0acba4c563b36474b68e29d1cb1be2e951 = 0xF0; // string
        constexpr ::std::ptrdiff_t _a8ade4683dd7f1adbef87a43cc897da7d494ef0c = 0xF8; // ulong
        constexpr ::std::ptrdiff_t _6d4d7f19e83d657a877036b0cccd2b0b1e22e702 = 0x100; // uint
        constexpr ::std::ptrdiff_t _6b155094af31083abf82c004f7e311485ae3d715 = 0x108; // List<%8c0c2c5b9db00ee1299af951fee3e7e629ec5dd4>
        constexpr ::std::ptrdiff_t _09af5bfc1216b48402ac987e43f417bfe74ff61f = 0x110; // bool
        constexpr ::std::ptrdiff_t _d480a72e38fa3bcae89878b884114df30dc315d7 = 0x118; // List<BaseEntity.%47c75efb38c1806dba5395b3b816ff7fb864acb8>
        constexpr ::std::ptrdiff_t _f2989a7f1b28e53e2507f47ffde5d0765dd4ae9e = 0x120; // Action
        constexpr ::std::ptrdiff_t _df24c6a748d716bbf60c68477e2b6641483cd9dd = 0x128; // BaseEntity
        constexpr ::std::ptrdiff_t _343abe020b5510a31f5edf006e582156c0d2fa02 = 0x130; // ItemSkin
        constexpr ::std::ptrdiff_t _3f25ecb9c2faacb3c9c0aa4cff16c311dfc83547 = 0x138; // Action
        constexpr ::std::ptrdiff_t _d2e09739dac29f7e9ef7e1ac3f38da70f80846df = 0x140; // Action
        constexpr ::std::ptrdiff_t _8837cd205a2c95c6d59f32338349fc01369635f3 = 0x148; // %d2674a9f41d265275034faa20aefc00d085e5548[]
        constexpr ::std::ptrdiff_t _c952b3e2af12493a2d49afd68714ce524753bcd5 = 0x150; // List<TriggerBase>
        constexpr ::std::ptrdiff_t _993be2f7ea97056bae579a944d0e07ef6385549f = 0x158; // bool
        constexpr ::std::ptrdiff_t _d2335ea7d9d41c231abd9a4798bb5b392e96c202 = 0x159; // bool
        constexpr ::std::ptrdiff_t _202e5085d66e9b21c95bb6278abc63fcfa97d622 = 0x15A; // bool
        constexpr ::std::ptrdiff_t _d174bef25b400e842e66e9b0a4253ad149011482 = 0x160; // %9f0392014fc619228c0cf5303eaea306341dd3cf
        constexpr ::std::ptrdiff_t _2fde949c2b627a182abbaafdab020b65ebe74635 = 0x180; // float
    } // namespace BaseEntity
    namespace BaseCombatEntity {
        constexpr ::std::ptrdiff_t _5cf59c6ca097a2a8b7ddb595952d07a67cf5ee76 = 0x188; // %39cc38a4d1a6c57d173d5734239e2f25eb5ffb1a
        constexpr ::std::ptrdiff_t skeletonProperties = 0x200; // SkeletonProperties
        constexpr ::std::ptrdiff_t baseProtection = 0x208; // ProtectionProperties
        constexpr ::std::ptrdiff_t startHealth = 0x210; // float
        constexpr ::std::ptrdiff_t pickup = 0x218; // BaseCombatEntity.Pickup
        constexpr ::std::ptrdiff_t repair = 0x240; // BaseCombatEntity.Repair
        constexpr ::std::ptrdiff_t ShowHealthInfo = 0x270; // bool
        constexpr ::std::ptrdiff_t lifestate = 0x274; // BaseCombatEntity.LifeState
        constexpr ::std::ptrdiff_t sendsHitNotification = 0x278; // bool
        constexpr ::std::ptrdiff_t sendsMeleeHitNotification = 0x279; // bool
        constexpr ::std::ptrdiff_t markAttackerHostile = 0x27A; // bool
        constexpr ::std::ptrdiff_t _2d5c521a821aa18398ffb1cf526d09f08e5dbc97 = 0x27C; // float
        constexpr ::std::ptrdiff_t _3dfe7608792ef0d829a7074b6156d9858504bc23 = 0x280; // float
        constexpr ::std::ptrdiff_t faction = 0x284; // BaseCombatEntity.Faction
        constexpr ::std::ptrdiff_t _c70fe06baa93f7dce317ec07b03d2b5464def648 = 0x288; // float
        constexpr ::std::ptrdiff_t _2f204079a80c8cabb771fcada94a3ff6ad7955ab = 0x28C; // int
    } // namespace BaseCombatEntity
    namespace BuildingPrivlidge {
        constexpr ::std::ptrdiff_t _44c8e6b5c7329942ea543e78d9958c0e2f9620bf = 0x4A0; // %39cc38a4d1a6c57d173d5734239e2f25eb5ffb1a
        constexpr ::std::ptrdiff_t _d6ed8d97b46ce650e8a8694211cd7019d17e73bd = 0x518; // %39cc38a4d1a6c57d173d5734239e2f25eb5ffb1a
        constexpr ::std::ptrdiff_t _43df54a8546f7b19b350d11ae0eded201241b65c = 0x590; // %39cc38a4d1a6c57d173d5734239e2f25eb5ffb1a
        constexpr ::std::ptrdiff_t _40248554115608367c6ef15f8a2c1c03741c0891 = 0x608; // %39cc38a4d1a6c57d173d5734239e2f25eb5ffb1a
        constexpr ::std::ptrdiff_t _52159add1c496e7e8d0ec346f2aa314d23d4ac26 = 0x680; // %39cc38a4d1a6c57d173d5734239e2f25eb5ffb1a
        constexpr ::std::ptrdiff_t _a2e9eda638592f17937c8e9554a635e71389a4fa = 0x6F8; // %39cc38a4d1a6c57d173d5734239e2f25eb5ffb1a
        constexpr ::std::ptrdiff_t assignDialog = 0x770; // GameObject
        constexpr ::std::ptrdiff_t _0c3106528c0cc2b54f4024dc9f9f2c05e449d732 = 0x778; // HashSet<PlayerNameID>
        constexpr ::std::ptrdiff_t allowedConstructionItems = 0x780; // List<ItemDefinition>
        constexpr ::std::ptrdiff_t _612e0f0b3e100bb61ed1a4ab4875a74a0bb1524c = 0x788; // float
        constexpr ::std::ptrdiff_t _615e47fa8897f9b00083f189cd267b586186efa4 = 0x78C; // float
        constexpr ::std::ptrdiff_t _06d947f82e1ef73ea9a9f621dab64416414e9417 = 0x790; // float
        constexpr ::std::ptrdiff_t _e7464c605800e98f8d4c3bdaaf721135e6e2304f = 0x794; // bool
        constexpr ::std::ptrdiff_t _0dfa8e9a2bc2368c345aa591164329d3bf0ddc0c = 0x795; // bool
        constexpr ::std::ptrdiff_t _7529dac2002eb0264fab60517aedd6dccacfa38d = 0x798; // DateTime
    } // namespace BuildingPrivlidge
    namespace BaseProjectile {
        constexpr ::std::ptrdiff_t NoiseRadius = 0x2A0; // float
        constexpr ::std::ptrdiff_t damageScale = 0x2A4; // float
        constexpr ::std::ptrdiff_t distanceScale = 0x2A8; // float
        constexpr ::std::ptrdiff_t projectileVelocityScale = 0x2AC; // float
        constexpr ::std::ptrdiff_t automatic = 0x2B0; // bool
        constexpr ::std::ptrdiff_t usableByTurret = 0x2B1; // bool
        constexpr ::std::ptrdiff_t turretDamageScale = 0x2B4; // float
        constexpr ::std::ptrdiff_t attackFX = 0x2B8; // GameObjectRef
        constexpr ::std::ptrdiff_t silencedAttack = 0x2C0; // GameObjectRef
        constexpr ::std::ptrdiff_t muzzleBrakeAttack = 0x2C8; // GameObjectRef
        constexpr ::std::ptrdiff_t fireModeSound = 0x2D0; // SoundDefinition
        constexpr ::std::ptrdiff_t MuzzlePoint = 0x2D8; // Transform
        constexpr ::std::ptrdiff_t reloadTime = 0x2E0; // float
        constexpr ::std::ptrdiff_t canUnloadAmmo = 0x2E4; // bool
        constexpr ::std::ptrdiff_t primaryMagazine = 0x2E8; // BaseProjectile.Magazine
        constexpr ::std::ptrdiff_t fractionalReload = 0x2F0; // bool
        constexpr ::std::ptrdiff_t reloadStartDuration = 0x2F4; // float
        constexpr ::std::ptrdiff_t reloadFractionDuration = 0x2F8; // float
        constexpr ::std::ptrdiff_t reloadEndDuration = 0x2FC; // float
        constexpr ::std::ptrdiff_t aimSway = 0x300; // float
        constexpr ::std::ptrdiff_t aimSwaySpeed = 0x304; // float
        constexpr ::std::ptrdiff_t recoil = 0x308; // RecoilProperties
        constexpr ::std::ptrdiff_t aimconeCurve = 0x310; // AnimationCurve
        constexpr ::std::ptrdiff_t aimCone = 0x318; // float
        constexpr ::std::ptrdiff_t hipAimCone = 0x31C; // float
        constexpr ::std::ptrdiff_t aimconePenaltyPerShot = 0x320; // float
        constexpr ::std::ptrdiff_t aimConePenaltyMax = 0x324; // float
        constexpr ::std::ptrdiff_t aimconePenaltyRecoverTime = 0x328; // float
        constexpr ::std::ptrdiff_t aimconePenaltyRecoverDelay = 0x32C; // float
        constexpr ::std::ptrdiff_t stancePenaltyScale = 0x330; // float
        constexpr ::std::ptrdiff_t hasADS = 0x334; // bool
        constexpr ::std::ptrdiff_t noAimingWhileCycling = 0x335; // bool
        constexpr ::std::ptrdiff_t manualCycle = 0x336; // bool
        constexpr ::std::ptrdiff_t _bf0528617bfd910256d0c4ef9a65a9e6afc92329 = 0x337; // bool
        constexpr ::std::ptrdiff_t _16e2fb6a67271f4123cca8bb794566b458b02fa6 = 0x338; // bool
        constexpr ::std::ptrdiff_t _012bddc460d13ae663ab4a0afd3c398d2cde2695 = 0x339; // bool
        constexpr ::std::ptrdiff_t useEmptyAmmoState = 0x33A; // bool
        constexpr ::std::ptrdiff_t isBurstWeapon = 0x33B; // bool
        constexpr ::std::ptrdiff_t canChangeFireModes = 0x33C; // bool
        constexpr ::std::ptrdiff_t defaultOn = 0x33D; // bool
        constexpr ::std::ptrdiff_t internalBurstRecoilScale = 0x340; // float
        constexpr ::std::ptrdiff_t internalBurstFireRateScale = 0x344; // float
        constexpr ::std::ptrdiff_t internalBurstAimConeScale = 0x348; // float
        constexpr ::std::ptrdiff_t resetDuration = 0x34C; // float
        constexpr ::std::ptrdiff_t numShotsFired = 0x350; // int
        constexpr ::std::ptrdiff_t _6ed6ffed47424a51ec9903c58ed8cf113e7b52dc = 0x35C; // float
        constexpr ::std::ptrdiff_t _1a0851354487c058118071e30ea86e3e7232405e = 0x360; // float
        constexpr ::std::ptrdiff_t _16fb602103455f0f64b7fd3fae633b673885d0b0 = 0x364; // uint
        constexpr ::std::ptrdiff_t _a0d67cb4e59bfe5416d18e17356c8afd82a87b77 = 0x368; // float
        constexpr ::std::ptrdiff_t _cac2cc5f9d93b440f3295514bb8cb7b6665b894a = 0x36C; // float
        constexpr ::std::ptrdiff_t _7b8b40f9632640b786b086f3ed93741aedeb474d = 0x370; // float
        constexpr ::std::ptrdiff_t _f7f08a2f988ac6ec597adf9383bc6223cb540485 = 0x374; // float
        constexpr ::std::ptrdiff_t _65ff1decad9531028dbfe4a0633ae065e2febfed = 0x378; // bool
        constexpr ::std::ptrdiff_t _0b2f3f178effa644ee9fd7a93becd65b235ac4a4 = 0x37C; // TimeSince
        constexpr ::std::ptrdiff_t _25aff2842eee5f002f2c25ad8ab036b890f8d3f9 = 0x380; // float
        constexpr ::std::ptrdiff_t _9047b826469b09ba8c5365dd77b3b6bcf942cc5c = 0x388; // float
        constexpr ::std::ptrdiff_t _ba7e425a059aa5c8f63f31efc4bbe88998499c59 = 0x390; // ItemDefinition
        constexpr ::std::ptrdiff_t _15c6e19fd53eab7d7221df97a3a92ad229e2b777 = 0x398; // int
        constexpr ::std::ptrdiff_t _32bc8b94c8b50487a823dad6019df808527a137d = 0x39C; // int
        constexpr ::std::ptrdiff_t _a37cf8ba05c21af584cb2575c8b4e18b66498c64 = 0x3A0; // int
        constexpr ::std::ptrdiff_t _4b03972a47ef6dd6fb193bbb8f221ac2cd456cf7 = 0x3A4; // bool
        constexpr ::std::ptrdiff_t _5f6ba7f06bf42135085c7690c2ca323da145e2ee = 0x3A8; // float
        constexpr ::std::ptrdiff_t _2cd8c0add178fecf9f717d80a1ca01aaf7246422 = 0x3AC; // bool
    } // namespace BaseProjectile
    namespace Magazine {
        constexpr ::std::ptrdiff_t capacity = 0x18; // int
        constexpr ::std::ptrdiff_t contents = 0x1C; // int
        constexpr ::std::ptrdiff_t ammoType = 0x20; // ItemDefinition
        constexpr ::std::ptrdiff_t allowPlayerReloading = 0x28; // bool
        constexpr ::std::ptrdiff_t allowAmmoSwitching = 0x29; // bool
    } // namespace Magazine
    namespace PlayerInventory {
        constexpr ::std::ptrdiff_t _0ddc739c489476589ca892fe67750523cc4e7563 = 0x28; // %dc26f59a0666e3f6bd00d71ae0b604e312a9f5fd
        constexpr ::std::ptrdiff_t _e75bf13b8571d7a159b568facef91c7066c88f62 = 0x30; // %dc26f59a0666e3f6bd00d71ae0b604e312a9f5fd
        constexpr ::std::ptrdiff_t _5625076f9b132ccfdb2c28d5f0c8df6382a11547 = 0x38; // %dc26f59a0666e3f6bd00d71ae0b604e312a9f5fd
        constexpr ::std::ptrdiff_t crafting = 0x40; // ItemCrafter
        constexpr ::std::ptrdiff_t loot = 0x48; // PlayerLoot
        constexpr ::std::ptrdiff_t _457c74578ed42c37f63966c54921ec1674d86058 = 0x50; // List<ItemIcon>
        constexpr ::std::ptrdiff_t _327dc3fdcd0ae45f99acaa7014a739ab1131862d = 0x58; // PlayerInventory.%b64f66e6178b15449dec2ca5528988d15afb65b0
        constexpr ::std::ptrdiff_t _23d293600326cb60e1002011a9ab5117af63524b = 0x68; // List<%a6cada778fb8ac23348888413b288716aa8659b8>
    } // namespace PlayerInventory
    namespace PlayerModel {
        constexpr ::std::ptrdiff_t collision = 0x20; // BoxCollider
        constexpr ::std::ptrdiff_t censorshipCube = 0x28; // GameObject
        constexpr ::std::ptrdiff_t censorshipCubeBreasts = 0x30; // GameObject
        constexpr ::std::ptrdiff_t jawBone = 0x38; // GameObject
        constexpr ::std::ptrdiff_t neckBone = 0x40; // GameObject
        constexpr ::std::ptrdiff_t headBone = 0x48; // GameObject
        constexpr ::std::ptrdiff_t eyeController = 0x50; // EyeController
        constexpr ::std::ptrdiff_t blinkController = 0x58; // EyeBlink
        constexpr ::std::ptrdiff_t SpineBones = 0x60; // Transform[]
        constexpr ::std::ptrdiff_t leftFootBone = 0x68; // Transform
        constexpr ::std::ptrdiff_t rightFootBone = 0x70; // Transform
        constexpr ::std::ptrdiff_t leftHandPropBone = 0x78; // Transform
        constexpr ::std::ptrdiff_t rightHandPropBone = 0x80; // Transform
        constexpr ::std::ptrdiff_t rightHandTarget = 0x88; // Vector3
        constexpr ::std::ptrdiff_t isPreview = 0x94; // bool
        constexpr ::std::ptrdiff_t leftHandTargetPosition = 0x98; // Vector3
        constexpr ::std::ptrdiff_t leftHandTargetRotation = 0xA4; // Quaternion
        constexpr ::std::ptrdiff_t rightHandTargetPosition = 0xB4; // Vector3
        constexpr ::std::ptrdiff_t rightHandTargetRotation = 0xC0; // Quaternion
        constexpr ::std::ptrdiff_t steeringTargetDegrees = 0xD0; // float
        constexpr ::std::ptrdiff_t rightFootTargetPosition = 0xD4; // Vector3
        constexpr ::std::ptrdiff_t rightFootTargetRotation = 0xE0; // Quaternion
        constexpr ::std::ptrdiff_t leftFootTargetPosition = 0xF0; // Vector3
        constexpr ::std::ptrdiff_t leftFootTargetRotation = 0xFC; // Quaternion
        constexpr ::std::ptrdiff_t CinematicAnimationController = 0x110; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t DefaultAvatar = 0x118; // Avatar
        constexpr ::std::ptrdiff_t CinematicAvatar = 0x120; // Avatar
        constexpr ::std::ptrdiff_t DefaultHoldType = 0x128; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t SleepGesture = 0x130; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t CrawlToIncapacitatedGesture = 0x138; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t CrawlToIncapacitatedGestureHandcuff = 0x140; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t StandToIncapacitatedGesture = 0x148; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t _3d9a905fc25f57e35de38a50790af209cc1e6d34 = 0x150; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t MaleSkin = 0x158; // SkinSetCollection
        constexpr ::std::ptrdiff_t FemaleSkin = 0x160; // SkinSetCollection
        constexpr ::std::ptrdiff_t subsurfaceProfile = 0x168; // SubsurfaceProfile
        constexpr ::std::ptrdiff_t voiceVolume = 0x170; // float
        constexpr ::std::ptrdiff_t skinColor = 0x174; // float
        constexpr ::std::ptrdiff_t skinNumber = 0x178; // float
        constexpr ::std::ptrdiff_t meshNumber = 0x17C; // float
        constexpr ::std::ptrdiff_t hairNumber = 0x180; // float
        constexpr ::std::ptrdiff_t skinType = 0x184; // int
        constexpr ::std::ptrdiff_t movementSounds = 0x188; // MovementSounds
        constexpr ::std::ptrdiff_t showSash = 0x190; // bool
        constexpr ::std::ptrdiff_t tempPoseType = 0x194; // int
        constexpr ::std::ptrdiff_t underwearSkin = 0x198; // uint
        constexpr ::std::ptrdiff_t _e8f18ad70ab0ff0bd465a503e4b04b407fb27e8d = 0x1A0; // ulong
        constexpr ::std::ptrdiff_t _c7903643ca34d8de43fbbc01d11d9dd06a79c9ad = 0x1A8; // Quaternion
        constexpr ::std::ptrdiff_t _0140ae2c14abee30038b573e5a6051f32e772bd9 = 0x1B8; // Quaternion
        constexpr ::std::ptrdiff_t _7b66a66ad71bc22d1f62793e8ae2c95381fd18f8 = 0x1C8; // ModelState
        constexpr ::std::ptrdiff_t _5c28318d1d78c7411af17a5af1859bf5d833d352 = 0x1D0; // Vector3
        constexpr ::std::ptrdiff_t _b82db473707c53dea4bf55ed21c96311044b3e86 = 0x1DC; // Vector3
        constexpr ::std::ptrdiff_t _c83131b44bfe192df922c036b2850f27bba76fd2 = 0x1E8; // Vector3
        constexpr ::std::ptrdiff_t _d123158df0d1c61bc203441f4d30a1d4d87be5cc = 0x1F4; // Vector3
        constexpr ::std::ptrdiff_t _836dc76c66fd84cda8c5cee1fa1a8988b2056c45 = 0x200; // Quaternion
        constexpr ::std::ptrdiff_t _5d9a4a9ae596d72ec4a7d2f13123c0fc6c1365b1 = 0x210; // Quaternion
        constexpr ::std::ptrdiff_t _baae44b100dda407a45d5d72a8aa4a36d4aabcb0 = 0x220; // float
        constexpr ::std::ptrdiff_t _3cfec266ff1ba3d33bd3c8a0833001cc1090b2d3 = 0x224; // Vector3
        constexpr ::std::ptrdiff_t _19bae13e9b7e716a75344ff4ea1c5777a0361c6b = 0x230; // Vector3
        constexpr ::std::ptrdiff_t _0e48f785b3b1e2f737a5e0095b8e969bdf4ec5f5 = 0x23C; // bool
        constexpr ::std::ptrdiff_t _f52757137cafbbc7623deeb8e9d231a6759b2e58 = 0x23D; // bool
        constexpr ::std::ptrdiff_t _42cc6dda97440fffcb7f3dc244ae8a6738e97d68 = 0x240; // uint
        constexpr ::std::ptrdiff_t _9279f5f00b79f8a8e18078d6ad8f9f4773139e11 = 0x244; // bool
        constexpr ::std::ptrdiff_t _ef8e73f4e177d8785fcf134a4421de5f9805d6ce = 0x248; // PlayerNameTag
        constexpr ::std::ptrdiff_t _389385aa62eac77f590472e350aea09d87165536 = 0x250; // bool
        constexpr ::std::ptrdiff_t _b603547fa1861348e86bb79ae391ca0ec721acee = 0x251; // bool
        constexpr ::std::ptrdiff_t _8045738f7d4970df9610ed2a1c05328f1bf70804 = 0x258; // SoundDefinition
        constexpr ::std::ptrdiff_t _2a54f64afc46d61176a99077a4db9d54cbd2ecb2 = 0x260; // SoundDefinition
        constexpr ::std::ptrdiff_t _6df5cf14b131cf0aba27160375767a2b578e6e08 = 0x268; // bool
        constexpr ::std::ptrdiff_t _6e2acb698f3bbf36a63b0169c844dd2b748c712b = 0x270; // GestureConfig
        constexpr ::std::ptrdiff_t _cccd1247fd9c075f5b1cc8d093182adbf818c785 = 0x278; // bool
        constexpr ::std::ptrdiff_t _5e9a87540fb7ec4bca8092d4ffefdc892f795fef = 0x280; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t _2ba4a8d666c3ce9f6b75743494346f8b4738fc31 = 0x288; // SkinnedMultiMesh
        constexpr ::std::ptrdiff_t _7c4fb6250e32f31ab2c1be3095169105d54332a9 = 0x290; // Animator
        constexpr ::std::ptrdiff_t _92f774115b633d02e0d8313e3f7ef72024bdb68d = 0x298; // LODGroup
        constexpr ::std::ptrdiff_t _0deb6b123e84389f6abb2679669ae83f6548daf9 = 0x2A0; // RuntimeAnimatorController
        constexpr ::std::ptrdiff_t _91eee7f4754a77682261a87cd9bcae9973d499e4 = 0x2A8; // float
        constexpr ::std::ptrdiff_t _dfb3ab15eea3aeea768410e828bdb4b80a9a18e3 = 0x2AC; // bool
        constexpr ::std::ptrdiff_t _b76984754a4252718461e467ff28536caf8efee0 = 0x2AD; // bool
        constexpr ::std::ptrdiff_t _fd9f7d8b92149f8060eacc990690b78871b141b1 = 0x2B0; // int
        constexpr ::std::ptrdiff_t _18e4b7e4b83acbc7e42cadabf77e862049ce4910 = 0x2B4; // int
        constexpr ::std::ptrdiff_t _b4385d31e8a1710997a64c0a2efac6495d781918 = 0x2B8; // HeldEntity
        constexpr ::std::ptrdiff_t _04a34319bd491cbf19d73673987ff8924f4e7659 = 0x2C0; // bool
        constexpr ::std::ptrdiff_t _95dd2973c2acfb090eea4c6f64f147d9d04b4beb = 0x2C4; // float
        constexpr ::std::ptrdiff_t _67a8b83495c92b7b41e27d7c51c860ccc0c78693 = 0x2C8; // float
        constexpr ::std::ptrdiff_t _d22a8cad654c5b551cba469379e889d92f50f851 = 0x2CC; // bool
        constexpr ::std::ptrdiff_t _a7e6273f92b15b7e21233db50cccf3dbd0613c06 = 0x2D0; // Nullable<float>
        constexpr ::std::ptrdiff_t _884ae2b3b7eeaf5070cbba22dc4b2f05cf2e10c6 = 0x2D8; // List<BlendShapeController>
        constexpr ::std::ptrdiff_t _4818d0b7f39d28f8a658b636fddb559bedc47899 = 0x2E0; // bool
        constexpr ::std::ptrdiff_t _132d15c7cd2eec99aee5f8fb91870956a0363510 = 0x2E1; // bool
        constexpr ::std::ptrdiff_t _1775116d0975f6fc06c3a141697497393f0e363a = 0x2E2; // bool
        constexpr ::std::ptrdiff_t _690f4ddc71032d4fa00b48f1273884f950087519 = 0x2E4; // TimeSince
        constexpr ::std::ptrdiff_t _96a31af2c738afba426928fe49357bb88a0fde18 = 0x2E8; // TimeSince
        constexpr ::std::ptrdiff_t _14bc09d02ab1da5bec887ecd6d41c2266648ac85 = 0x2EC; // Vector3
        constexpr ::std::ptrdiff_t _43c5a2876829e35790ba123a639dcbe386120839 = 0x2F8; // Vector3
        constexpr ::std::ptrdiff_t _05749104047d17de66efe387296608d0ab9496e5 = 0x304; // TimeSince
        constexpr ::std::ptrdiff_t _0c3c4827019d518797a3a24ac8535c6131f853c9 = 0x308; // Vector3
        constexpr ::std::ptrdiff_t _874f72d3f0b7d5b11f7672f48b6a2a94904b5792 = 0x314; // Vector3
        constexpr ::std::ptrdiff_t _b16e29481d56e186444182e9dae304f67c2a16b9 = 0x320; // float
        constexpr ::std::ptrdiff_t _cd8b6b6bc8d2c93f4005d1c2bc4e41f1968eef6b = 0x324; // float
        constexpr ::std::ptrdiff_t _0bed6a295204428eae098ac3e3fde5c65073c12a = 0x328; // Vector3
        constexpr ::std::ptrdiff_t _2d5abf05af524fa45bf5d2fa4e50ea3124a62f2c = 0x334; // bool
        constexpr ::std::ptrdiff_t _c277cfe1394d0c414282c7c805fffefeb2a7a494 = 0x338; // float
        constexpr ::std::ptrdiff_t _e3071d8314121693090e86e813ab13b6daa90baa = 0x33C; // float
        constexpr ::std::ptrdiff_t _8106ccf9afd5e220ea656267aa22212d2527fca0 = 0x340; // Vector3
        constexpr ::std::ptrdiff_t _9824ab890ac5e08cf4f37b4137477886fd523312 = 0x34C; // Vector3
        constexpr ::std::ptrdiff_t _4be3b1f0a0a4f7507ba6085387255273c23add8b = 0x358; // Vector3
        constexpr ::std::ptrdiff_t _84e4f1ff8e298041f3ec19ac1e1916853f6af011 = 0x364; // Vector3
        constexpr ::std::ptrdiff_t _97670fc80b82c1859eec6c15a96375b4d64cd468 = 0x370; // float
        constexpr ::std::ptrdiff_t _9b7ff2c224869920f29c82263fb15b4c2f701248 = 0x374; // float
        constexpr ::std::ptrdiff_t Shoulders = 0x378; // Transform[]
        constexpr ::std::ptrdiff_t AdditionalSpineBones = 0x380; // Transform[]
        constexpr ::std::ptrdiff_t _c3cc209c1dd9362474af6f41a88f0bc1837e03f7 = 0x388; // List<SkinnedMeshRenderer>
        constexpr ::std::ptrdiff_t _562d9cee19e0696399c477e1fdd29d6c1cc88aed = 0x390; // List<WearableFadeToggle>
        constexpr ::std::ptrdiff_t _e89e865dbdee64bfda9087cd565ab4d7bb31df6b = 0x398; // Transform[]
        constexpr ::std::ptrdiff_t _2a533512d1359a28fb19d79e23e19c553090aec3 = 0x3A0; // float
        constexpr ::std::ptrdiff_t _430745fd0ab1d014785fe3ca56a0e5126f8e0f6a = 0x3A4; // Nullable<bool>
        constexpr ::std::ptrdiff_t _dff44a6391a49c6556c3b1cbf10f4ce9a447ba20 = 0x3A8; // float
    } // namespace PlayerModel
    namespace ModelState {
        constexpr ::std::ptrdiff_t waterLevel = 0x10; // float
        constexpr ::std::ptrdiff_t lookDir = 0x14; // Vector3
        constexpr ::std::ptrdiff_t flags = 0x20; // int
        constexpr ::std::ptrdiff_t poseType = 0x24; // int
        constexpr ::std::ptrdiff_t inheritedVelocity = 0x28; // Vector3
        constexpr ::std::ptrdiff_t ladderType = 0x34; // int
        constexpr ::std::ptrdiff_t guidePosition = 0x38; // Vector3
        constexpr ::std::ptrdiff_t guideRotation = 0x44; // Vector3
        constexpr ::std::ptrdiff_t guidePrefab = 0x50; // uint
        constexpr ::std::ptrdiff_t guideValid = 0x54; // bool
        constexpr ::std::ptrdiff_t guideVersion = 0x58; // int
        constexpr ::std::ptrdiff_t ShouldPool = 0x5C; // bool
    } // namespace ModelState
    namespace Model {
        constexpr ::std::ptrdiff_t collision = 0x20; // SphereCollider
        constexpr ::std::ptrdiff_t rootBone = 0x28; // Transform
        constexpr ::std::ptrdiff_t headBone = 0x30; // Transform
        constexpr ::std::ptrdiff_t eyeBone = 0x38; // Transform
        constexpr ::std::ptrdiff_t animator = 0x40; // Animator
        constexpr ::std::ptrdiff_t skeleton = 0x48; // Skeleton
        constexpr ::std::ptrdiff_t boneTransforms = 0x50; // Transform[]
        constexpr ::std::ptrdiff_t boneNames = 0x58; // string[]
        constexpr ::std::ptrdiff_t _9f456a6cfcf669593d59b2c914909cf4b2507e7e = 0x60; // %19a6851eb09f29dcff5d446207ee37b296a9e51a
        constexpr ::std::ptrdiff_t _3848c24893b3280c312228d756f7e1a66d6a63a8 = 0x68; // int
        constexpr ::std::ptrdiff_t _92f774115b633d02e0d8313e3f7ef72024bdb68d = 0x70; // LODGroup
    } // namespace Model
    namespace RecoilProperties {
        constexpr ::std::ptrdiff_t recoilYawMin = 0x18; // float
        constexpr ::std::ptrdiff_t recoilYawMax = 0x1C; // float
        constexpr ::std::ptrdiff_t recoilPitchMin = 0x20; // float
        constexpr ::std::ptrdiff_t recoilPitchMax = 0x24; // float
        constexpr ::std::ptrdiff_t timeToTakeMin = 0x28; // float
        constexpr ::std::ptrdiff_t timeToTakeMax = 0x2C; // float
        constexpr ::std::ptrdiff_t ADSScale = 0x30; // float
        constexpr ::std::ptrdiff_t movementPenalty = 0x34; // float
        constexpr ::std::ptrdiff_t clampPitch = 0x38; // float
        constexpr ::std::ptrdiff_t pitchCurve = 0x40; // AnimationCurve
        constexpr ::std::ptrdiff_t yawCurve = 0x48; // AnimationCurve
        constexpr ::std::ptrdiff_t useCurves = 0x50; // bool
        constexpr ::std::ptrdiff_t curvesAsScalar = 0x51; // bool
        constexpr ::std::ptrdiff_t shotsUntilMax = 0x54; // int
        constexpr ::std::ptrdiff_t maxRecoilRadius = 0x58; // float
        constexpr ::std::ptrdiff_t overrideAimconeWithCurve = 0x5C; // bool
        constexpr ::std::ptrdiff_t aimconeCurveScale = 0x60; // float
        constexpr ::std::ptrdiff_t aimconeCurve = 0x68; // AnimationCurve
        constexpr ::std::ptrdiff_t aimconeProbabilityCurve = 0x70; // AnimationCurve
        constexpr ::std::ptrdiff_t ammoAimconeScaleMultiProjectile = 0x78; // float
        constexpr ::std::ptrdiff_t ammoAimconeScaleSingleProjectile = 0x7C; // float
        constexpr ::std::ptrdiff_t newRecoilOverride = 0x80; // RecoilProperties
    } // namespace RecoilProperties
    namespace BaseFishingRod {
        constexpr ::std::ptrdiff_t FishingBobberRef = 0x218; // GameObjectRef
        constexpr ::std::ptrdiff_t FishCatchDistance = 0x220; // float
        constexpr ::std::ptrdiff_t ReelLineRenderer = 0x228; // LineRenderer
        constexpr ::std::ptrdiff_t LineRendererWorldStartPos = 0x230; // Transform
        constexpr ::std::ptrdiff_t _f2d08e0abb26f62f0ad48db9471077a6ebd5da65 = 0x238; // BaseFishingRod.CatchState
        constexpr ::std::ptrdiff_t _3540fd8715077e1a8f45baec5b4840c6593678d7 = 0x23C; // BaseFishingRod.FishState
        constexpr ::std::ptrdiff_t _800ca1968e5f3c13c13ec4d2e143d242b994fd54 = 0x240; // %724e40913c8e85538d86b9fb1760c96dbbaf2afb<FishingBobber>
        constexpr ::std::ptrdiff_t ConditionLossOnSuccess = 0x250; // float
        constexpr ::std::ptrdiff_t ConditionLossOnFail = 0x254; // float
        constexpr ::std::ptrdiff_t GlobalStrainSpeedMultiplier = 0x258; // float
        constexpr ::std::ptrdiff_t MaxCastDistance = 0x25C; // float
        constexpr ::std::ptrdiff_t ForceFish = 0x260; // ItemModFishable
        constexpr ::std::ptrdiff_t BobberPreview = 0x268; // GameObjectRef
        constexpr ::std::ptrdiff_t onLineSoundDef = 0x270; // SoundDefinition
        constexpr ::std::ptrdiff_t strainSoundDef = 0x278; // SoundDefinition
        constexpr ::std::ptrdiff_t strainGainCurve = 0x280; // AnimationCurve
        constexpr ::std::ptrdiff_t tensionBreakSoundDef = 0x288; // SoundDefinition
        constexpr ::std::ptrdiff_t _8544bfa5ed681c84e5ff76ed6103b8723f7043c8 = 0x290; // Vector3[]
        constexpr ::std::ptrdiff_t _13ad5bf38b24636ea682761f20723768d3e85f2f = 0x298; // Vector3[]
        constexpr ::std::ptrdiff_t _9d1c7aaf4b9dc97d659439a9690d03eecd1a0975 = 0x2A0; // float[]
        constexpr ::std::ptrdiff_t _74bba1bab57e43b95caa7ed48c9806030fa0186d = 0x2A8; // float
        constexpr ::std::ptrdiff_t _d361081b58f608076045731a2a69e828f4909b99 = 0x2AC; // TimeUntil
        constexpr ::std::ptrdiff_t _52236bb41ee141130d0648bde7ae6e668ae7d278 = 0x2B0; // FishingRodViewmodel
        constexpr ::std::ptrdiff_t _a9e404a37e0294dcee48b2f368ee67162a3766cb = 0x2B8; // BobberPreview
        constexpr ::std::ptrdiff_t _386400f4358cfd6514ea46af263360dfd3206e8c = 0x2C0; // bool
        constexpr ::std::ptrdiff_t _f1a791b2ca6880861d8e6b07eade74e7197097bd = 0x2C8; // Sound
        constexpr ::std::ptrdiff_t _4880ac15d846c74559aa21a913cde544eb0b7c73 = 0x2D0; // Sound
        constexpr ::std::ptrdiff_t _3f385e29b9477e85b6bb4e81e06294a0f57dba62 = 0x2D8; // SoundModulation.Modulator
        constexpr ::std::ptrdiff_t _16943e97cd6d5df09d07a9ce4684ed899611d1aa = 0x2E0; // TimeUntil
        constexpr ::std::ptrdiff_t _6ccebe9a6937b9927ff9e2e3fa7df393fa9269de = 0x2E4; // TimeSince
    } // namespace BaseFishingRod
    namespace FishingBobber {
        constexpr ::std::ptrdiff_t centerOfMass = 0x290; // Transform
        constexpr ::std::ptrdiff_t myRigidBody = 0x298; // Rigidbody
        constexpr ::std::ptrdiff_t lineAttachPoint = 0x2A0; // Transform
        constexpr ::std::ptrdiff_t bobberRoot = 0x2A8; // Transform
        constexpr ::std::ptrdiff_t HorizontalMoveSpeed = 0x2B0; // float
        constexpr ::std::ptrdiff_t PullAwayMoveSpeed = 0x2B4; // float
        constexpr ::std::ptrdiff_t SidewaysInputForce = 0x2B8; // float
        constexpr ::std::ptrdiff_t ReelInMoveSpeed = 0x2BC; // float
        constexpr ::std::ptrdiff_t _6435d8f75a33439f2cdaf23ba4f22ba628c7d7ac = 0x2C0; // float
        constexpr ::std::ptrdiff_t _4047130826f0ec8b4a44cb37994d3f914759abf4 = 0x2C4; // Vector3
    } // namespace FishingBobber
    namespace OcclusionCulling {
        constexpr ::std::ptrdiff_t computeShader = 0x20; // ComputeShader
        constexpr ::std::ptrdiff_t usePixelShaderFallback = 0x28; // bool
        constexpr ::std::ptrdiff_t useAsyncReadAPI = 0x29; // bool
        constexpr ::std::ptrdiff_t _a3f55350f8ac8e92b4cf7ba4ea081ebfc27b5180 = 0x30; // Camera
        constexpr ::std::ptrdiff_t static__1e2e20b6bae8188ab33e2b7fe8ce36e0401b89a6 = 0x58; // OcclusionCulling.%f1333dd7917bd06fee52707e5773ef301979f0eb
        constexpr ::std::ptrdiff_t static__e0a6918a4f682b5382cf6d4e96b90cd3e4ee8f55 = 0x60; // OcclusionCulling.%f1333dd7917bd06fee52707e5773ef301979f0eb
        constexpr ::std::ptrdiff_t static__e14a984f8720d6e5731997913b1567242e98ffd6 = 0x68; // OcclusionCulling.%f1333dd7917bd06fee52707e5773ef301979f0eb
        constexpr ::std::ptrdiff_t _4e0ad5b4830257c03f4512849e93fd54a3aeac2f = 0x38; // Vector4[]
        constexpr ::std::ptrdiff_t _3e0449fa211159fd81de17624be4a672407b66a7 = 0x40; // string[]
        constexpr ::std::ptrdiff_t _e2555aebec5cf76eed434286e6e1f9cfcf3c32a0 = 0x48; // float[]
        constexpr ::std::ptrdiff_t _65d8ac2c5cfb5ec7c00680187a4fb34c12d784a2 = 0x50; // Material
        constexpr ::std::ptrdiff_t _6be59117c6f7f7902185bb7faca258a1f6105336 = 0x58; // Material
        constexpr ::std::ptrdiff_t _998be9511269266816b199f05c9897d53a906aad = 0x60; // Matrix4x4
        constexpr ::std::ptrdiff_t _740f8fd489359997b66b71a3945b8bb73842c05a = 0xA0; // Matrix4x4
        constexpr ::std::ptrdiff_t _c1cc595717a0c0c8b8d51691908a0c2a8f684a96 = 0xE0; // Matrix4x4
        constexpr ::std::ptrdiff_t _36b5316a5d0d30bbfdb6304539652e0568a46ebf = 0x120; // Matrix4x4
        constexpr ::std::ptrdiff_t _a2269c8ad263270123cc4b8b189ec55d387f8275 = 0x160; // Matrix4x4
        constexpr ::std::ptrdiff_t _151d55bd5858c0af418b9aa15cad28b5762e5cce = 0x1A0; // bool
        constexpr ::std::ptrdiff_t static__2b4692b2f4e724645fae5ba8f65dbc204fe1a5b5 = 0x70; // OcclusionCulling
        constexpr ::std::ptrdiff_t static__be2582401f4836e92d566f96863cea606c0d7da6 = 0x78; // bool
        constexpr ::std::ptrdiff_t static__007b2164533934255ad6600ca944c1517930551e = 0x88; // bool
        constexpr ::std::ptrdiff_t static__3f8daa660f960b797a60f2e570fde055a11d7744 = 0x89; // bool
        constexpr ::std::ptrdiff_t static__14bb6ee262215b1bb6201dd732b0ec74ebffffab = 0x8C; // OcclusionCulling.DebugFilter
        constexpr ::std::ptrdiff_t debugSettings = 0x1A8; // OcclusionCulling.DebugSettings
        constexpr ::std::ptrdiff_t _727ffa5cf99c0ab3436b5268b4132f1a36fa22f0 = 0x1B0; // Material
        constexpr ::std::ptrdiff_t _0be32289d90780146c5dd3ee30799305230171c0 = 0x1B8; // Material
        constexpr ::std::ptrdiff_t _26a1a3d31846b281a79cc045a598ecc9b9312732 = 0x1C0; // Material
        constexpr ::std::ptrdiff_t _ce72654a926c7eee3113555a69631d5633aa40a9 = 0x1C8; // int
        constexpr ::std::ptrdiff_t _29a5fbd3a1d7232b504cf454961eed2247f494dc = 0x1CC; // int
        constexpr ::std::ptrdiff_t _85aaa5993c7945cc21f6e0ad98f8908250e8c2ad = 0x1D0; // int
        constexpr ::std::ptrdiff_t _5fda6802682fe1fddcf8c5dfb083ad777046ecf6 = 0x1D8; // RenderTexture
        constexpr ::std::ptrdiff_t _33e40f07cedbd593fc9ebf547df07905ff63dea3 = 0x1E0; // RenderTexture
        constexpr ::std::ptrdiff_t _13abfe2370a32bb7470ed6a2489c1e79c742868c = 0x1E8; // RenderTexture[]
    } // namespace OcclusionCulling
    namespace OcclusionCulling.DebugSettings {
        constexpr ::std::ptrdiff_t log = 0x10; // bool
        constexpr ::std::ptrdiff_t showAllVisible = 0x11; // bool
        constexpr ::std::ptrdiff_t showMipChain = 0x12; // bool
        constexpr ::std::ptrdiff_t showMain = 0x13; // bool
        constexpr ::std::ptrdiff_t showMainLod = 0x14; // int
        constexpr ::std::ptrdiff_t showFallback = 0x18; // bool
        constexpr ::std::ptrdiff_t showStats = 0x19; // bool
        constexpr ::std::ptrdiff_t showScreenBounds = 0x1A; // bool
        constexpr ::std::ptrdiff_t showMask = 0x1C; // OcclusionCulling.DebugMask
        constexpr ::std::ptrdiff_t layerFilter = 0x20; // LayerMask
    } // namespace OcclusionCulling.DebugSettings
    namespace PlayerInput {
        constexpr ::std::ptrdiff_t _c79fa022854bc7109e91f98214c3efa650fbe4ad = 0x28; // %a58f6c5e63d0f2a820015d024d0c92b348aad963
        constexpr ::std::ptrdiff_t _81ba91a120a9fe796fff614a05837510029ec965 = 0x30; // bool
        constexpr ::std::ptrdiff_t _7b27229fe038598a4e2159dfc4dc7ca6dc228160 = 0x34; // Quaternion
        constexpr ::std::ptrdiff_t _c06309314b5d3a1653f8351295430713992425ee = 0x44; // Vector3
        constexpr ::std::ptrdiff_t _c8bd4ac320fd70d4d378eda01143f38f03c80710 = 0x50; // Vector3
        constexpr ::std::ptrdiff_t _02e62eab5ef59f45af2cf72b92dbdb384fee395c = 0x5C; // bool
        constexpr ::std::ptrdiff_t _57000e3e276c3b5b67d99d4afaa403c225bbf44b = 0x60; // float
        constexpr ::std::ptrdiff_t _3f861d15809028d3dbd76f2eb8fe47ca366f3980 = 0x64; // Quaternion
        constexpr ::std::ptrdiff_t _42f69f36ec765a105268e368fa9c42c058b3d33e = 0x74; // Vector3
        constexpr ::std::ptrdiff_t _504802abff8dc62d0e4dce1bca02e2d2a591b4e5 = 0x8C; // Vector2
        constexpr ::std::ptrdiff_t _054f218f442184c36f47c491bd63c6ec703f47a2 = 0x94; // float
        constexpr ::std::ptrdiff_t _1fda4ed8887c4f50a57b5e258e5ccc17105388d9 = 0x98; // int
        constexpr ::std::ptrdiff_t _861840f45f7b9fe7274c4b7b3826063c0d10f30a = 0x9C; // int
        constexpr ::std::ptrdiff_t _8d71f2c61241b8d2a7dfe2d52bf6911a4ead93cd = 0xA0; // bool
        constexpr ::std::ptrdiff_t _61da7cf1f217307bb34e78f21bf045f813781c7e = 0xA1; // bool
        constexpr ::std::ptrdiff_t _6efc713752e9c9746de1c4f55496267d30fa3139 = 0xA2; // bool
        constexpr ::std::ptrdiff_t _c34172942a68b5de6140f9db89107e618bf0d3e2 = 0xA8; // NetworkableId
        constexpr ::std::ptrdiff_t _905713a5bbda88eebcc0b9448b03244c60e375a9 = 0xB0; // Vector3
        constexpr ::std::ptrdiff_t _afc149019dfcd133810e96b37e35618b3b20a0cb = 0xBC; // Vector3
        constexpr ::std::ptrdiff_t _ef58b06c3368ed8b3cb02dd9e61d351215da97fd = 0xC8; // int
        constexpr ::std::ptrdiff_t _1a940b44bcdd948329b253b1e0702d541d2f298a = 0xCC; // bool
    } // namespace PlayerInput
    namespace ItemDefinition {
        constexpr ::std::ptrdiff_t itemid = 0x20; // int
        constexpr ::std::ptrdiff_t shortname = 0x28; // string
        constexpr ::std::ptrdiff_t displayName = 0x30; // Translate.Phrase
        constexpr ::std::ptrdiff_t displayDescription = 0x38; // Translate.Phrase
        constexpr ::std::ptrdiff_t iconSprite = 0x40; // Sprite
        constexpr ::std::ptrdiff_t category = 0x48; // ItemCategory
        constexpr ::std::ptrdiff_t selectionPanel = 0x4C; // ItemSelectionPanel
        constexpr ::std::ptrdiff_t maxDraggable = 0x50; // int
        constexpr ::std::ptrdiff_t itemType = 0x54; // %dc26f59a0666e3f6bd00d71ae0b604e312a9f5fd.ContentsType
        constexpr ::std::ptrdiff_t amountType = 0x58; // ItemDefinition.AmountType
        constexpr ::std::ptrdiff_t occupySlots = 0x5C; // ItemSlot
        constexpr ::std::ptrdiff_t stackable = 0x60; // int
        constexpr ::std::ptrdiff_t volume = 0x64; // int
        constexpr ::std::ptrdiff_t quickDespawn = 0x68; // bool
        constexpr ::std::ptrdiff_t blockStealingInSafeZone = 0x69; // bool
        constexpr ::std::ptrdiff_t tutorialAllowance = 0x6C; // BasePlayer.TutorialItemAllowance
        constexpr ::std::ptrdiff_t rarity = 0x70; // Rarity
        constexpr ::std::ptrdiff_t despawnRarity = 0x74; // Rarity
        constexpr ::std::ptrdiff_t spawnAsBlueprint = 0x78; // bool
        constexpr ::std::ptrdiff_t inventoryGrabSound = 0x80; // SoundDefinition
        constexpr ::std::ptrdiff_t inventoryDropSound = 0x88; // SoundDefinition
        constexpr ::std::ptrdiff_t physImpactSoundDef = 0x90; // SoundDefinition
        constexpr ::std::ptrdiff_t condition = 0x98; // ItemDefinition.Condition
        constexpr ::std::ptrdiff_t hidden = 0xB0; // bool
        constexpr ::std::ptrdiff_t flags = 0xB4; // ItemDefinition.Flag
        constexpr ::std::ptrdiff_t hideSelectedPanel = 0xB8; // bool
        constexpr ::std::ptrdiff_t steamItem = 0xC0; // SteamInventoryItem
        constexpr ::std::ptrdiff_t steamDlc = 0xC8; // SteamDLCItem
        constexpr ::std::ptrdiff_t Parent = 0xD0; // ItemDefinition
        constexpr ::std::ptrdiff_t worldModelPrefab = 0xD8; // GameObjectRef
        constexpr ::std::ptrdiff_t treatAsComponentForRepairs = 0xE8; // bool
        constexpr ::std::ptrdiff_t AlignWorldModelOnDrop = 0xE9; // bool
        constexpr ::std::ptrdiff_t WorldModelDropOffset = 0xEC; // Vector3
        constexpr ::std::ptrdiff_t isRedirectOf = 0xF8; // ItemDefinition
        constexpr ::std::ptrdiff_t redirectVendingBehaviour = 0x100; // ItemDefinition.RedirectVendingBehaviour
        constexpr ::std::ptrdiff_t _ca692970119b5f6ecb998373a3572204dd950962 = 0x108; // ItemMod[]
        constexpr ::std::ptrdiff_t Traits = 0x110; // BaseEntity.TraitFlag
        constexpr ::std::ptrdiff_t _db854842e7ece253d7f54a27981ce07bffd83ec3 = 0x120; // IPlayerItemDefinition[]
        constexpr ::std::ptrdiff_t panel = 0x128; // GameObject
        constexpr ::std::ptrdiff_t _9463e341a0a98d1672eb5729b16488bbc48a6ee5 = 0x130; // ItemModWearable
        constexpr ::std::ptrdiff_t _f3690eb685b146d6f367eac3e44016012e81ae92 = 0x138; // ItemModBurnable
        constexpr ::std::ptrdiff_t _527df757e6c7c1addb9475c7da212ea9cc2ac96d = 0x140; // ItemModCookable
        constexpr ::std::ptrdiff_t _fb97f2f32c0fe4ae63b638ebe27a8c4ba257d320 = 0x148; // bool
        constexpr ::std::ptrdiff_t _1035503cac9e131fb1ba5f7f1b595b14ae09f7d6 = 0x149; // bool
        constexpr ::std::ptrdiff_t _d23e239c83d4ffb9fd33cbd02caf0c4a52f34b93 = 0x14A; // bool
        constexpr ::std::ptrdiff_t _3471444b25c1cd1f29ca60675383ac1169fd0e86 = 0x150; // ItemDefinition[]
    } // namespace ItemDefinition
    namespace PlayerEyes {
        constexpr ::std::ptrdiff_t thirdPersonSleepingOffset = 0x28; // Vector3
        constexpr ::std::ptrdiff_t defaultLazyAim = 0x38; // LazyAimProperties
        constexpr ::std::ptrdiff_t _b8e9dfc82a0c5616f443acb204d81129bf0048cb = 0x4C; // Quaternion
        constexpr ::std::ptrdiff_t _16c96d2328f2846cc4fcf4c106a62047f9ca29a2 = 0x5C; // Vector3
        constexpr ::std::ptrdiff_t _d853a996ae34e4e6134440fad79de89394e23c09 = 0x68; // Quaternion
        constexpr ::std::ptrdiff_t _4d03d9756a279c6b7ca1e8d31510164818026ae6 = 0x78; // Quaternion
        constexpr ::std::ptrdiff_t _3929cd9598d96d96b2d88d729bdad356231dd9af = 0x88; // float
        constexpr ::std::ptrdiff_t _959695506c2067209172ea2828003428bba40c57 = 0x8C; // bool
    } // namespace PlayerEyes
    namespace Projectile {
        constexpr ::std::ptrdiff_t initialVelocity = 0x20; // Vector3
        constexpr ::std::ptrdiff_t drag = 0x2C; // float
        constexpr ::std::ptrdiff_t gravityModifier = 0x30; // float
        constexpr ::std::ptrdiff_t thickness = 0x34; // float
        constexpr ::std::ptrdiff_t initialDistance = 0x38; // float
        constexpr ::std::ptrdiff_t remainInWorld = 0x3C; // bool
        constexpr ::std::ptrdiff_t stickProbability = 0x40; // float
        constexpr ::std::ptrdiff_t breakProbability = 0x44; // float
        constexpr ::std::ptrdiff_t conditionLoss = 0x48; // float
        constexpr ::std::ptrdiff_t ricochetChance = 0x4C; // float
        constexpr ::std::ptrdiff_t penetrationPower = 0x50; // float
        constexpr ::std::ptrdiff_t waterIntegrityLoss = 0x54; // float
        constexpr ::std::ptrdiff_t damageProperties = 0x58; // DamageProperties
        constexpr ::std::ptrdiff_t damageDistances = 0x60; // MinMax
        constexpr ::std::ptrdiff_t damageMultipliers = 0x68; // MinMax
        constexpr ::std::ptrdiff_t damageTypes = 0x70; // List<DamageTypeEntry>
        constexpr ::std::ptrdiff_t rendererToScale = 0x78; // ScaleRenderer
        constexpr ::std::ptrdiff_t firstPersonRenderer = 0x80; // ScaleRenderer
        constexpr ::std::ptrdiff_t createDecals = 0x88; // bool
        constexpr ::std::ptrdiff_t doDefaultHitEffects = 0x89; // bool
        constexpr ::std::ptrdiff_t flybySound = 0x90; // SoundDefinition
        constexpr ::std::ptrdiff_t flybySoundDistance = 0x98; // float
        constexpr ::std::ptrdiff_t closeFlybySound = 0xA0; // SoundDefinition
        constexpr ::std::ptrdiff_t closeFlybyDistance = 0xA8; // float
        constexpr ::std::ptrdiff_t tumbleSpeed = 0xAC; // float
        constexpr ::std::ptrdiff_t tumbleAxis = 0xB0; // Vector3
        constexpr ::std::ptrdiff_t swimScale = 0xBC; // Vector3
        constexpr ::std::ptrdiff_t swimSpeed = 0xC8; // Vector3
        constexpr ::std::ptrdiff_t _adccf462e79436a8e5ce3b3dde08386f5f3eba73 = 0xD8; // BasePlayer
        constexpr ::std::ptrdiff_t _c241793e3a1104679a30d35332ed2e59b6059c44 = 0xE0; // AttackEntity
        constexpr ::std::ptrdiff_t _c90a6bcfd4f596d1acc4af08eb9efcf3779d16a4 = 0xE8; // Projectile
        constexpr ::std::ptrdiff_t _8653c7683e52211f56dac31141f925f9a010efb6 = 0xF0; // ItemModProjectile
        constexpr ::std::ptrdiff_t _638e5c00b2bbff207b7ad8b74a7f1d47dca387be = 0xF8; // int
        constexpr ::std::ptrdiff_t _f9ce6599bfd2dbe0cc6b4257f4a99d6ee9a6ec04 = 0xFC; // int
        constexpr ::std::ptrdiff_t _f6b85192f410809f12e5c166479da36e7264e534 = 0x100; // bool
        constexpr ::std::ptrdiff_t _d653e7a6322657ecf135c3a2e9821f1ddd2e21d9 = 0x101; // bool
        constexpr ::std::ptrdiff_t _6b196db15d6f337ae6f4ef71fbe156636259165f = 0x104; // float
        constexpr ::std::ptrdiff_t _cb0f193c2165453a1d22c1021cf0834558e2a6c9 = 0x108; // float
        constexpr ::std::ptrdiff_t _997bf41db6765d396a301e0ec38a42e3d51c4bad = 0x10C; // Projectile.%8fe9d5bf69ff39b1950bba357940fd57c4d3e125
        constexpr ::std::ptrdiff_t _34616c23afbc07fb0cf42d1296e2918ca80363b6 = 0x11C; // bool
        constexpr ::std::ptrdiff_t _deea219c6b5bc109d4b463688d594a4f324c940d = 0x11D; // bool
        constexpr ::std::ptrdiff_t _cc7e342ec9c7014e70c3511f09c12ff57c4fbbe5 = 0x120; // float
        constexpr ::std::ptrdiff_t _7704150b382ebb7f639804d8bafee3278d3c44ef = 0x124; // Vector3
        constexpr ::std::ptrdiff_t _7ba4d28734493ccd6be206cc570885fef2c65ab6 = 0x130; // Vector3
        constexpr ::std::ptrdiff_t _e37f4566d00a4da8bfadd43c073ff61015196422 = 0x13C; // float
        constexpr ::std::ptrdiff_t _9eff71e12fb4b6ca57853a39373bc744371c885a = 0x140; // float
        constexpr ::std::ptrdiff_t _9a18ed005194e8aa314605e16960a34a3012626d = 0x144; // float
        constexpr ::std::ptrdiff_t _1ed191b591faa630f548231921b68413ba1db170 = 0x148; // Vector3
        constexpr ::std::ptrdiff_t _e209c2bd60150f44e7a96d8b187ebe431a3039b6 = 0x154; // Vector3
        constexpr ::std::ptrdiff_t _34c0e3c89e083d5840fc5cff93040822139e86e6 = 0x160; // Vector3
        constexpr ::std::ptrdiff_t _371baa4a1d0e76981b21f4b699afb3eb46b4cd61 = 0x16C; // float
        constexpr ::std::ptrdiff_t _09ed2bb7c1cbfd485e75ea95903dd3a8ab7e26d0 = 0x170; // bool
        constexpr ::std::ptrdiff_t _b08e90394b164722838f90a5413b9e4d2e442b61 = 0x171; // bool
        constexpr ::std::ptrdiff_t _bd414cc451a175effa6681f1cc6d883ed245c5db = 0x172; // bool
        constexpr ::std::ptrdiff_t _78e0bff3c3935fa1a95202f730174d10a98ac1c3 = 0x173; // bool
        constexpr ::std::ptrdiff_t _765771e1dcab220d9adbfc0b9fe4ea8e74ee593d = 0x174; // bool
        constexpr ::std::ptrdiff_t _d25834614fb416561b3ca1e515cce0421274fde8 = 0x178; // Plane
        constexpr ::std::ptrdiff_t _e8787f80a7d82bc5b32f1ebe2cd8808fb1da9da9 = 0x188; // Ray
        constexpr ::std::ptrdiff_t _3052b07c827ed018471984e66c8b9bc5b2c156fb = 0x1A0; // Action
        constexpr ::std::ptrdiff_t _ded37f2e479e40033f6f579baa447f7a837efbbb = 0x1A8; // %4a2c4ec6279948bccd8638f1be8f7881be5d131a
        constexpr ::std::ptrdiff_t _a9ca7acc359aae85018ab249a354cce17f5b7c9a = 0x1B0; // float
    } // namespace Projectile
    namespace ItemModProjectile {
        constexpr ::std::ptrdiff_t projectileObject = 0x20; // GameObjectRef
        constexpr ::std::ptrdiff_t mods = 0x28; // ItemModProjectileMod[]
        constexpr ::std::ptrdiff_t ammoType = 0x30; // AmmoTypes
        constexpr ::std::ptrdiff_t numProjectiles = 0x34; // int
        constexpr ::std::ptrdiff_t projectileSpread = 0x38; // float
        constexpr ::std::ptrdiff_t projectileVelocity = 0x3C; // float
        constexpr ::std::ptrdiff_t projectileVelocitySpread = 0x40; // float
        constexpr ::std::ptrdiff_t useCurve = 0x44; // bool
        constexpr ::std::ptrdiff_t spreadScalar = 0x48; // AnimationCurve
        constexpr ::std::ptrdiff_t attackEffectOverride = 0x50; // GameObjectRef
        constexpr ::std::ptrdiff_t barrelConditionLoss = 0x58; // float
        constexpr ::std::ptrdiff_t category = 0x60; // string
    } // namespace ItemModProjectile
} // namespace blazedumper
